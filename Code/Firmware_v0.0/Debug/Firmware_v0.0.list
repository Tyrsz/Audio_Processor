
Firmware_v0.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007404  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  0800769c  0800769c  0001769c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080076e0  080076e0  000176e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080076e4  080076e4  000176e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  080076e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000488  20000014  080076fc  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2000049c  080076fc  0002049c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .debug_info   00019751  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002976  00000000  00000000  00039793  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000d58  00000000  00000000  0003c110  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c68  00000000  00000000  0003ce68  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00034476  00000000  00000000  0003dad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000b331  00000000  00000000  00071f46  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00141890  00000000  00000000  0007d277  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  001beb07  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000037d4  00000000  00000000  001beb84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000014 	.word	0x20000014
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007684 	.word	0x08007684

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000018 	.word	0x20000018
 80002d4:	08007684 	.word	0x08007684

080002d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002dc:	2003      	movs	r0, #3
 80002de:	f000 f94d 	bl	800057c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80002e2:	2000      	movs	r0, #0
 80002e4:	f000 f80a 	bl	80002fc <HAL_InitTick>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <HAL_Init+0x1a>
  {
    return HAL_ERROR;
 80002ee:	2301      	movs	r3, #1
 80002f0:	e002      	b.n	80002f8 <HAL_Init+0x20>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80002f2:	f006 fde3 	bl	8006ebc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80002f6:	2300      	movs	r3, #0
}
 80002f8:	4618      	mov	r0, r3
 80002fa:	bd80      	pop	{r7, pc}

080002fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000304:	4b12      	ldr	r3, [pc, #72]	; (8000350 <HAL_InitTick+0x54>)
 8000306:	681a      	ldr	r2, [r3, #0]
 8000308:	4b12      	ldr	r3, [pc, #72]	; (8000354 <HAL_InitTick+0x58>)
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	4619      	mov	r1, r3
 800030e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000312:	fbb3 f3f1 	udiv	r3, r3, r1
 8000316:	fbb2 f3f3 	udiv	r3, r2, r3
 800031a:	4618      	mov	r0, r3
 800031c:	f000 f963 	bl	80005e6 <HAL_SYSTICK_Config>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000326:	2301      	movs	r3, #1
 8000328:	e00e      	b.n	8000348 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	2b0f      	cmp	r3, #15
 800032e:	d80a      	bhi.n	8000346 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000330:	2200      	movs	r2, #0
 8000332:	6879      	ldr	r1, [r7, #4]
 8000334:	f04f 30ff 	mov.w	r0, #4294967295
 8000338:	f000 f92b 	bl	8000592 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800033c:	4a06      	ldr	r2, [pc, #24]	; (8000358 <HAL_InitTick+0x5c>)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000342:	2300      	movs	r3, #0
 8000344:	e000      	b.n	8000348 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000346:	2301      	movs	r3, #1
}
 8000348:	4618      	mov	r0, r3
 800034a:	3708      	adds	r7, #8
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}
 8000350:	2000000c 	.word	0x2000000c
 8000354:	20000004 	.word	0x20000004
 8000358:	20000000 	.word	0x20000000

0800035c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000360:	4b06      	ldr	r3, [pc, #24]	; (800037c <HAL_IncTick+0x20>)
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	461a      	mov	r2, r3
 8000366:	4b06      	ldr	r3, [pc, #24]	; (8000380 <HAL_IncTick+0x24>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	4413      	add	r3, r2
 800036c:	4a04      	ldr	r2, [pc, #16]	; (8000380 <HAL_IncTick+0x24>)
 800036e:	6013      	str	r3, [r2, #0]
}
 8000370:	bf00      	nop
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr
 800037a:	bf00      	nop
 800037c:	20000004 	.word	0x20000004
 8000380:	20000030 	.word	0x20000030

08000384 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0
  return uwTick;
 8000388:	4b03      	ldr	r3, [pc, #12]	; (8000398 <HAL_GetTick+0x14>)
 800038a:	681b      	ldr	r3, [r3, #0]
}
 800038c:	4618      	mov	r0, r3
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	20000030 	.word	0x20000030

0800039c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b084      	sub	sp, #16
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80003a4:	f7ff ffee 	bl	8000384 <HAL_GetTick>
 80003a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80003b4:	d005      	beq.n	80003c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80003b6:	4b09      	ldr	r3, [pc, #36]	; (80003dc <HAL_Delay+0x40>)
 80003b8:	781b      	ldrb	r3, [r3, #0]
 80003ba:	461a      	mov	r2, r3
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	4413      	add	r3, r2
 80003c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80003c2:	bf00      	nop
 80003c4:	f7ff ffde 	bl	8000384 <HAL_GetTick>
 80003c8:	4602      	mov	r2, r0
 80003ca:	68bb      	ldr	r3, [r7, #8]
 80003cc:	1ad2      	subs	r2, r2, r3
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	429a      	cmp	r2, r3
 80003d2:	d3f7      	bcc.n	80003c4 <HAL_Delay+0x28>
  {
  }
}
 80003d4:	bf00      	nop
 80003d6:	3710      	adds	r7, #16
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	20000004 	.word	0x20000004

080003e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b085      	sub	sp, #20
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	f003 0307 	and.w	r3, r3, #7
 80003ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80003f0:	4b0b      	ldr	r3, [pc, #44]	; (8000420 <__NVIC_SetPriorityGrouping+0x40>)
 80003f2:	68db      	ldr	r3, [r3, #12]
 80003f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80003f6:	68ba      	ldr	r2, [r7, #8]
 80003f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80003fc:	4013      	ands	r3, r2
 80003fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000404:	68bb      	ldr	r3, [r7, #8]
 8000406:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000408:	4b06      	ldr	r3, [pc, #24]	; (8000424 <__NVIC_SetPriorityGrouping+0x44>)
 800040a:	4313      	orrs	r3, r2
 800040c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800040e:	4a04      	ldr	r2, [pc, #16]	; (8000420 <__NVIC_SetPriorityGrouping+0x40>)
 8000410:	68bb      	ldr	r3, [r7, #8]
 8000412:	60d3      	str	r3, [r2, #12]
}
 8000414:	bf00      	nop
 8000416:	3714      	adds	r7, #20
 8000418:	46bd      	mov	sp, r7
 800041a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041e:	4770      	bx	lr
 8000420:	e000ed00 	.word	0xe000ed00
 8000424:	05fa0000 	.word	0x05fa0000

08000428 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800042c:	4b04      	ldr	r3, [pc, #16]	; (8000440 <__NVIC_GetPriorityGrouping+0x18>)
 800042e:	68db      	ldr	r3, [r3, #12]
 8000430:	0a1b      	lsrs	r3, r3, #8
 8000432:	f003 0307 	and.w	r3, r3, #7
}
 8000436:	4618      	mov	r0, r3
 8000438:	46bd      	mov	sp, r7
 800043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043e:	4770      	bx	lr
 8000440:	e000ed00 	.word	0xe000ed00

08000444 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000444:	b480      	push	{r7}
 8000446:	b083      	sub	sp, #12
 8000448:	af00      	add	r7, sp, #0
 800044a:	4603      	mov	r3, r0
 800044c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800044e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000452:	2b00      	cmp	r3, #0
 8000454:	db0b      	blt.n	800046e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000456:	4909      	ldr	r1, [pc, #36]	; (800047c <__NVIC_EnableIRQ+0x38>)
 8000458:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800045c:	095b      	lsrs	r3, r3, #5
 800045e:	88fa      	ldrh	r2, [r7, #6]
 8000460:	f002 021f 	and.w	r2, r2, #31
 8000464:	2001      	movs	r0, #1
 8000466:	fa00 f202 	lsl.w	r2, r0, r2
 800046a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800046e:	bf00      	nop
 8000470:	370c      	adds	r7, #12
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop
 800047c:	e000e100 	.word	0xe000e100

08000480 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
 8000486:	4603      	mov	r3, r0
 8000488:	6039      	str	r1, [r7, #0]
 800048a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800048c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000490:	2b00      	cmp	r3, #0
 8000492:	db0a      	blt.n	80004aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000494:	490d      	ldr	r1, [pc, #52]	; (80004cc <__NVIC_SetPriority+0x4c>)
 8000496:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800049a:	683a      	ldr	r2, [r7, #0]
 800049c:	b2d2      	uxtb	r2, r2
 800049e:	0112      	lsls	r2, r2, #4
 80004a0:	b2d2      	uxtb	r2, r2
 80004a2:	440b      	add	r3, r1
 80004a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80004a8:	e00a      	b.n	80004c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004aa:	4909      	ldr	r1, [pc, #36]	; (80004d0 <__NVIC_SetPriority+0x50>)
 80004ac:	88fb      	ldrh	r3, [r7, #6]
 80004ae:	f003 030f 	and.w	r3, r3, #15
 80004b2:	3b04      	subs	r3, #4
 80004b4:	683a      	ldr	r2, [r7, #0]
 80004b6:	b2d2      	uxtb	r2, r2
 80004b8:	0112      	lsls	r2, r2, #4
 80004ba:	b2d2      	uxtb	r2, r2
 80004bc:	440b      	add	r3, r1
 80004be:	761a      	strb	r2, [r3, #24]
}
 80004c0:	bf00      	nop
 80004c2:	370c      	adds	r7, #12
 80004c4:	46bd      	mov	sp, r7
 80004c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ca:	4770      	bx	lr
 80004cc:	e000e100 	.word	0xe000e100
 80004d0:	e000ed00 	.word	0xe000ed00

080004d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b089      	sub	sp, #36	; 0x24
 80004d8:	af00      	add	r7, sp, #0
 80004da:	60f8      	str	r0, [r7, #12]
 80004dc:	60b9      	str	r1, [r7, #8]
 80004de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	f003 0307 	and.w	r3, r3, #7
 80004e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80004e8:	69fb      	ldr	r3, [r7, #28]
 80004ea:	f1c3 0307 	rsb	r3, r3, #7
 80004ee:	2b04      	cmp	r3, #4
 80004f0:	bf28      	it	cs
 80004f2:	2304      	movcs	r3, #4
 80004f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80004f6:	69fb      	ldr	r3, [r7, #28]
 80004f8:	3304      	adds	r3, #4
 80004fa:	2b06      	cmp	r3, #6
 80004fc:	d902      	bls.n	8000504 <NVIC_EncodePriority+0x30>
 80004fe:	69fb      	ldr	r3, [r7, #28]
 8000500:	3b03      	subs	r3, #3
 8000502:	e000      	b.n	8000506 <NVIC_EncodePriority+0x32>
 8000504:	2300      	movs	r3, #0
 8000506:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000508:	2201      	movs	r2, #1
 800050a:	69bb      	ldr	r3, [r7, #24]
 800050c:	fa02 f303 	lsl.w	r3, r2, r3
 8000510:	1e5a      	subs	r2, r3, #1
 8000512:	68bb      	ldr	r3, [r7, #8]
 8000514:	401a      	ands	r2, r3
 8000516:	697b      	ldr	r3, [r7, #20]
 8000518:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800051a:	2101      	movs	r1, #1
 800051c:	697b      	ldr	r3, [r7, #20]
 800051e:	fa01 f303 	lsl.w	r3, r1, r3
 8000522:	1e59      	subs	r1, r3, #1
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000528:	4313      	orrs	r3, r2
         );
}
 800052a:	4618      	mov	r0, r3
 800052c:	3724      	adds	r7, #36	; 0x24
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
	...

08000538 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	3b01      	subs	r3, #1
 8000544:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000548:	d301      	bcc.n	800054e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800054a:	2301      	movs	r3, #1
 800054c:	e00f      	b.n	800056e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800054e:	4a0a      	ldr	r2, [pc, #40]	; (8000578 <SysTick_Config+0x40>)
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	3b01      	subs	r3, #1
 8000554:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000556:	210f      	movs	r1, #15
 8000558:	f04f 30ff 	mov.w	r0, #4294967295
 800055c:	f7ff ff90 	bl	8000480 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000560:	4b05      	ldr	r3, [pc, #20]	; (8000578 <SysTick_Config+0x40>)
 8000562:	2200      	movs	r2, #0
 8000564:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000566:	4b04      	ldr	r3, [pc, #16]	; (8000578 <SysTick_Config+0x40>)
 8000568:	2207      	movs	r2, #7
 800056a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800056c:	2300      	movs	r3, #0
}
 800056e:	4618      	mov	r0, r3
 8000570:	3708      	adds	r7, #8
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	e000e010 	.word	0xe000e010

0800057c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000584:	6878      	ldr	r0, [r7, #4]
 8000586:	f7ff ff2b 	bl	80003e0 <__NVIC_SetPriorityGrouping>
}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}

08000592 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000592:	b580      	push	{r7, lr}
 8000594:	b086      	sub	sp, #24
 8000596:	af00      	add	r7, sp, #0
 8000598:	4603      	mov	r3, r0
 800059a:	60b9      	str	r1, [r7, #8]
 800059c:	607a      	str	r2, [r7, #4]
 800059e:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup = 0x00;
 80005a0:	2300      	movs	r3, #0
 80005a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80005a4:	f7ff ff40 	bl	8000428 <__NVIC_GetPriorityGrouping>
 80005a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	68b9      	ldr	r1, [r7, #8]
 80005ae:	6978      	ldr	r0, [r7, #20]
 80005b0:	f7ff ff90 	bl	80004d4 <NVIC_EncodePriority>
 80005b4:	4602      	mov	r2, r0
 80005b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80005ba:	4611      	mov	r1, r2
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff ff5f 	bl	8000480 <__NVIC_SetPriority>
}
 80005c2:	bf00      	nop
 80005c4:	3718      	adds	r7, #24
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}

080005ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005ca:	b580      	push	{r7, lr}
 80005cc:	b082      	sub	sp, #8
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	4603      	mov	r3, r0
 80005d2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80005d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005d8:	4618      	mov	r0, r3
 80005da:	f7ff ff33 	bl	8000444 <__NVIC_EnableIRQ>
}
 80005de:	bf00      	nop
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}

080005e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80005e6:	b580      	push	{r7, lr}
 80005e8:	b082      	sub	sp, #8
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80005ee:	6878      	ldr	r0, [r7, #4]
 80005f0:	f7ff ffa2 	bl	8000538 <SysTick_Config>
 80005f4:	4603      	mov	r3, r0
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
	...

08000600 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2b04      	cmp	r3, #4
 800060c:	d106      	bne.n	800061c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800060e:	4a09      	ldr	r2, [pc, #36]	; (8000634 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000610:	4b08      	ldr	r3, [pc, #32]	; (8000634 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f043 0304 	orr.w	r3, r3, #4
 8000618:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800061a:	e005      	b.n	8000628 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800061c:	4a05      	ldr	r2, [pc, #20]	; (8000634 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800061e:	4b05      	ldr	r3, [pc, #20]	; (8000634 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	f023 0304 	bic.w	r3, r3, #4
 8000626:	6013      	str	r3, [r2, #0]
}
 8000628:	bf00      	nop
 800062a:	370c      	adds	r7, #12
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	e000e010 	.word	0xe000e010

08000638 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800063c:	f000 f802 	bl	8000644 <HAL_SYSTICK_Callback>
}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}

08000644 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
	...

08000654 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b086      	sub	sp, #24
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue = 0U;
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000660:	f7ff fe90 	bl	8000384 <HAL_GetTick>
 8000664:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs = NULL;
 8000666:	2300      	movs	r3, #0
 8000668:	60fb      	str	r3, [r7, #12]

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d101      	bne.n	8000674 <HAL_DMA_Init+0x20>
  {
    return HAL_ERROR;
 8000670:	2301      	movs	r3, #1
 8000672:	e168      	b.n	8000946 <HAL_DMA_Init+0x2f2>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_D2_DMA_INSTANCE(hdma) != RESET) /*DMA2/DMA1 stream , D2 domain*/
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	461a      	mov	r2, r3
 800067a:	4b8d      	ldr	r3, [pc, #564]	; (80008b0 <HAL_DMA_Init+0x25c>)
 800067c:	429a      	cmp	r2, r3
 800067e:	d907      	bls.n	8000690 <HAL_DMA_Init+0x3c>
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	461a      	mov	r2, r3
 8000686:	4b8b      	ldr	r3, [pc, #556]	; (80008b4 <HAL_DMA_Init+0x260>)
 8000688:	429a      	cmp	r2, r3
 800068a:	d801      	bhi.n	8000690 <HAL_DMA_Init+0x3c>
 800068c:	2301      	movs	r3, #1
 800068e:	e000      	b.n	8000692 <HAL_DMA_Init+0x3e>
 8000690:	2300      	movs	r3, #0
 8000692:	2b00      	cmp	r3, #0
 8000694:	f000 80a5 	beq.w	80007e2 <HAL_DMA_Init+0x18e>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	2200      	movs	r2, #0
 800069c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	2202      	movs	r2, #2
 80006a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	461a      	mov	r2, r3
 80006ae:	4b80      	ldr	r3, [pc, #512]	; (80008b0 <HAL_DMA_Init+0x25c>)
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d90e      	bls.n	80006d2 <HAL_DMA_Init+0x7e>
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	461a      	mov	r2, r3
 80006ba:	4b7e      	ldr	r3, [pc, #504]	; (80008b4 <HAL_DMA_Init+0x260>)
 80006bc:	429a      	cmp	r2, r3
 80006be:	d808      	bhi.n	80006d2 <HAL_DMA_Init+0x7e>
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	687a      	ldr	r2, [r7, #4]
 80006c6:	6812      	ldr	r2, [r2, #0]
 80006c8:	6812      	ldr	r2, [r2, #0]
 80006ca:	f022 0201 	bic.w	r2, r2, #1
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	e007      	b.n	80006e2 <HAL_DMA_Init+0x8e>
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	687a      	ldr	r2, [r7, #4]
 80006d8:	6812      	ldr	r2, [r2, #0]
 80006da:	6812      	ldr	r2, [r2, #0]
 80006dc:	f022 0201 	bic.w	r2, r2, #1
 80006e0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != RESET)
 80006e2:	e00f      	b.n	8000704 <HAL_DMA_Init+0xb0>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80006e4:	f7ff fe4e 	bl	8000384 <HAL_GetTick>
 80006e8:	4602      	mov	r2, r0
 80006ea:	693b      	ldr	r3, [r7, #16]
 80006ec:	1ad3      	subs	r3, r2, r3
 80006ee:	2b05      	cmp	r3, #5
 80006f0:	d908      	bls.n	8000704 <HAL_DMA_Init+0xb0>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	2220      	movs	r2, #32
 80006f6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2203      	movs	r2, #3
 80006fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8000700:	2301      	movs	r3, #1
 8000702:	e120      	b.n	8000946 <HAL_DMA_Init+0x2f2>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != RESET)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	2b00      	cmp	r3, #0
 8000710:	d1e8      	bne.n	80006e4 <HAL_DMA_Init+0x90>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800071a:	697a      	ldr	r2, [r7, #20]
 800071c:	4b66      	ldr	r3, [pc, #408]	; (80008b8 <HAL_DMA_Init+0x264>)
 800071e:	4013      	ands	r3, r2
 8000720:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800072a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	691b      	ldr	r3, [r3, #16]
 8000730:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000736:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000742:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	6a1b      	ldr	r3, [r3, #32]
 8000748:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800074a:	697a      	ldr	r2, [r7, #20]
 800074c:	4313      	orrs	r3, r2
 800074e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000754:	2b04      	cmp	r3, #4
 8000756:	d107      	bne.n	8000768 <HAL_DMA_Init+0x114>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000760:	4313      	orrs	r3, r2
 8000762:	697a      	ldr	r2, [r7, #20]
 8000764:	4313      	orrs	r3, r2
 8000766:	617b      	str	r3, [r7, #20]
    }

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	697a      	ldr	r2, [r7, #20]
 800076e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	695b      	ldr	r3, [r3, #20]
 8000776:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	f023 0307 	bic.w	r3, r3, #7
 800077e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000784:	697a      	ldr	r2, [r7, #20]
 8000786:	4313      	orrs	r3, r2
 8000788:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800078e:	2b04      	cmp	r3, #4
 8000790:	d117      	bne.n	80007c2 <HAL_DMA_Init+0x16e>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000796:	697a      	ldr	r2, [r7, #20]
 8000798:	4313      	orrs	r3, r2
 800079a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d00e      	beq.n	80007c2 <HAL_DMA_Init+0x16e>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f000 ff87 	bl	80016b8 <DMA_CheckFifoParam>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d008      	beq.n	80007c2 <HAL_DMA_Init+0x16e>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2240      	movs	r2, #64	; 0x40
 80007b4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	2201      	movs	r2, #1
 80007ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80007be:	2301      	movs	r3, #1
 80007c0:	e0c1      	b.n	8000946 <HAL_DMA_Init+0x2f2>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	697a      	ldr	r2, [r7, #20]
 80007c8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80007ca:	6878      	ldr	r0, [r7, #4]
 80007cc:	f000 ff3e 	bl	800164c <DMA_CalcBaseAndBitshift>
 80007d0:	4603      	mov	r3, r0
 80007d2:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80007d8:	223f      	movs	r2, #63	; 0x3f
 80007da:	409a      	lsls	r2, r3
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	e076      	b.n	80008d0 <HAL_DMA_Init+0x27c>
  }
  else if(IS_D3_DMA_INSTANCE(hdma) != RESET) /*<BDMA channel , D3 domain*/
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	461a      	mov	r2, r3
 80007e8:	4b34      	ldr	r3, [pc, #208]	; (80008bc <HAL_DMA_Init+0x268>)
 80007ea:	429a      	cmp	r2, r3
 80007ec:	d907      	bls.n	80007fe <HAL_DMA_Init+0x1aa>
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	461a      	mov	r2, r3
 80007f4:	4b32      	ldr	r3, [pc, #200]	; (80008c0 <HAL_DMA_Init+0x26c>)
 80007f6:	429a      	cmp	r2, r3
 80007f8:	d801      	bhi.n	80007fe <HAL_DMA_Init+0x1aa>
 80007fa:	2301      	movs	r3, #1
 80007fc:	e000      	b.n	8000800 <HAL_DMA_Init+0x1ac>
 80007fe:	2300      	movs	r3, #0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d04b      	beq.n	800089c <HAL_DMA_Init+0x248>
  {
    /* Check the request parameter */
    assert_param(IS_BDMA_D3_REQUEST(hdma->Init.Request));

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	2200      	movs	r2, #0
 8000808:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2202      	movs	r2, #2
 8000810:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE  | BDMA_CCR_PSIZE  | \
 800081c:	697a      	ldr	r2, [r7, #20]
 800081e:	4b29      	ldr	r3, [pc, #164]	; (80008c4 <HAL_DMA_Init+0x270>)
 8000820:	4013      	ands	r3, r2
 8000822:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC   | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM));

    /* Prepare the DMA Channel configuration */
    registerValue |=  D2_TO_D3_DMA_DIRECTION(hdma->Init.Direction)            |
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	689b      	ldr	r3, [r3, #8]
 8000828:	2b40      	cmp	r3, #64	; 0x40
 800082a:	d008      	beq.n	800083e <HAL_DMA_Init+0x1ea>
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	689b      	ldr	r3, [r3, #8]
 8000830:	2b80      	cmp	r3, #128	; 0x80
 8000832:	d102      	bne.n	800083a <HAL_DMA_Init+0x1e6>
 8000834:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000838:	e002      	b.n	8000840 <HAL_DMA_Init+0x1ec>
 800083a:	2300      	movs	r3, #0
 800083c:	e000      	b.n	8000840 <HAL_DMA_Init+0x1ec>
 800083e:	2310      	movs	r3, #16
                      D2_TO_D3_DMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8000840:	687a      	ldr	r2, [r7, #4]
 8000842:	68d2      	ldr	r2, [r2, #12]
 8000844:	08d2      	lsrs	r2, r2, #3
    registerValue |=  D2_TO_D3_DMA_DIRECTION(hdma->Init.Direction)            |
 8000846:	431a      	orrs	r2, r3
                      D2_TO_D3_DMA_MEMORY_INC(hdma->Init.MemInc)              |
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	691b      	ldr	r3, [r3, #16]
 800084c:	08db      	lsrs	r3, r3, #3
                      D2_TO_D3_DMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800084e:	431a      	orrs	r2, r3
                      D2_TO_D3_DMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	695b      	ldr	r3, [r3, #20]
 8000854:	08db      	lsrs	r3, r3, #3
                      D2_TO_D3_DMA_MEMORY_INC(hdma->Init.MemInc)              |
 8000856:	431a      	orrs	r2, r3
                      D2_TO_D3_DMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	08db      	lsrs	r3, r3, #3
                      D2_TO_D3_DMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800085e:	431a      	orrs	r2, r3
                      D2_TO_D3_DMA_MODE(hdma->Init.Mode)                      |
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	69db      	ldr	r3, [r3, #28]
 8000864:	08db      	lsrs	r3, r3, #3
 8000866:	f003 0320 	and.w	r3, r3, #32
                      D2_TO_D3_DMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800086a:	431a      	orrs	r2, r3
                      D2_TO_D3_DMA_PRIORITY(hdma->Init.Priority);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	6a1b      	ldr	r3, [r3, #32]
 8000870:	091b      	lsrs	r3, r3, #4
                      D2_TO_D3_DMA_MODE(hdma->Init.Mode)                      |
 8000872:	4313      	orrs	r3, r2
    registerValue |=  D2_TO_D3_DMA_DIRECTION(hdma->Init.Direction)            |
 8000874:	697a      	ldr	r2, [r7, #20]
 8000876:	4313      	orrs	r3, r2
 8000878:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	697a      	ldr	r2, [r7, #20]
 8000880:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)hdma->Instance - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	461a      	mov	r2, r3
 8000888:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <HAL_DMA_Init+0x274>)
 800088a:	4413      	add	r3, r2
 800088c:	4a0f      	ldr	r2, [pc, #60]	; (80008cc <HAL_DMA_Init+0x278>)
 800088e:	fba2 2303 	umull	r2, r3, r2, r3
 8000892:	091b      	lsrs	r3, r3, #4
 8000894:	009a      	lsls	r2, r3, #2
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	65da      	str	r2, [r3, #92]	; 0x5c
 800089a:	e019      	b.n	80008d0 <HAL_DMA_Init+0x27c>

  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2240      	movs	r2, #64	; 0x40
 80008a0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	2203      	movs	r2, #3
 80008a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80008aa:	2301      	movs	r3, #1
 80008ac:	e04b      	b.n	8000946 <HAL_DMA_Init+0x2f2>
 80008ae:	bf00      	nop
 80008b0:	4002000f 	.word	0x4002000f
 80008b4:	400204b8 	.word	0x400204b8
 80008b8:	fe10803f 	.word	0xfe10803f
 80008bc:	58025407 	.word	0x58025407
 80008c0:	58025494 	.word	0x58025494
 80008c4:	ffff800f 	.word	0xffff800f
 80008c8:	a7fdabf8 	.word	0xa7fdabf8
 80008cc:	cccccccd 	.word	0xcccccccd
  }

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80008d0:	6878      	ldr	r0, [r7, #4]
 80008d2:	f000 ff6d 	bl	80017b0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	689b      	ldr	r3, [r3, #8]
 80008da:	2b80      	cmp	r3, #128	; 0x80
 80008dc:	d102      	bne.n	80008e4 <HAL_DMA_Init+0x290>
  {
     /* if memory to memory force the request to 0*/
     hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	2200      	movs	r2, #0
 80008e2:	605a      	str	r2, [r3, #4]
  }


  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008e8:	687a      	ldr	r2, [r7, #4]
 80008ea:	6852      	ldr	r2, [r2, #4]
 80008ec:	b2d2      	uxtb	r2, r2
 80008ee:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80008f4:	687a      	ldr	r2, [r7, #4]
 80008f6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80008f8:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX request generator :
     if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
  */

  if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d010      	beq.n	8000924 <HAL_DMA_Init+0x2d0>
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	2b08      	cmp	r3, #8
 8000908:	d80c      	bhi.n	8000924 <HAL_DMA_Init+0x2d0>
  {
     /* Initialize parameters for DMAMUX request generator :
        DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
     */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f000 ffb8 	bl	8001880 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
     hdma->DMAmuxRequestGen->RGCR = 0U;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800091c:	687a      	ldr	r2, [r7, #4]
 800091e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	e008      	b.n	8000936 <HAL_DMA_Init+0x2e2>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2200      	movs	r2, #0
 8000928:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	2200      	movs	r2, #0
 800092e:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2200      	movs	r2, #0
 8000934:	675a      	str	r2, [r3, #116]	; 0x74
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2200      	movs	r2, #0
 800093a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2201      	movs	r2, #1
 8000940:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000944:	2300      	movs	r3, #0
}
 8000946:	4618      	mov	r0, r3
 8000948:	3718      	adds	r7, #24
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop

08000950 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b086      	sub	sp, #24
 8000954:	af00      	add	r7, sp, #0
 8000956:	60f8      	str	r0, [r7, #12]
 8000958:	60b9      	str	r1, [r7, #8]
 800095a:	607a      	str	r2, [r7, #4]
 800095c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800095e:	2300      	movs	r3, #0
 8000960:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d101      	bne.n	800096c <HAL_DMA_Start+0x1c>
  {
    return HAL_ERROR;
 8000968:	2301      	movs	r3, #1
 800096a:	e063      	b.n	8000a34 <HAL_DMA_Start+0xe4>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000972:	2b01      	cmp	r3, #1
 8000974:	d101      	bne.n	800097a <HAL_DMA_Start+0x2a>
 8000976:	2302      	movs	r3, #2
 8000978:	e05c      	b.n	8000a34 <HAL_DMA_Start+0xe4>
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	2201      	movs	r2, #1
 800097e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000988:	b2db      	uxtb	r3, r3
 800098a:	2b01      	cmp	r3, #1
 800098c:	d147      	bne.n	8000a1e <HAL_DMA_Start+0xce>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	2202      	movs	r2, #2
 8000992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	2200      	movs	r2, #0
 800099a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	461a      	mov	r2, r3
 80009a2:	4b26      	ldr	r3, [pc, #152]	; (8000a3c <HAL_DMA_Start+0xec>)
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d90e      	bls.n	80009c6 <HAL_DMA_Start+0x76>
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	461a      	mov	r2, r3
 80009ae:	4b24      	ldr	r3, [pc, #144]	; (8000a40 <HAL_DMA_Start+0xf0>)
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d808      	bhi.n	80009c6 <HAL_DMA_Start+0x76>
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	68fa      	ldr	r2, [r7, #12]
 80009ba:	6812      	ldr	r2, [r2, #0]
 80009bc:	6812      	ldr	r2, [r2, #0]
 80009be:	f022 0201 	bic.w	r2, r2, #1
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	e007      	b.n	80009d6 <HAL_DMA_Start+0x86>
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	68fa      	ldr	r2, [r7, #12]
 80009cc:	6812      	ldr	r2, [r2, #0]
 80009ce:	6812      	ldr	r2, [r2, #0]
 80009d0:	f022 0201 	bic.w	r2, r2, #1
 80009d4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	687a      	ldr	r2, [r7, #4]
 80009da:	68b9      	ldr	r1, [r7, #8]
 80009dc:	68f8      	ldr	r0, [r7, #12]
 80009de:	f000 fda5 	bl	800152c <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	461a      	mov	r2, r3
 80009e8:	4b14      	ldr	r3, [pc, #80]	; (8000a3c <HAL_DMA_Start+0xec>)
 80009ea:	429a      	cmp	r2, r3
 80009ec:	d90e      	bls.n	8000a0c <HAL_DMA_Start+0xbc>
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	461a      	mov	r2, r3
 80009f4:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <HAL_DMA_Start+0xf0>)
 80009f6:	429a      	cmp	r2, r3
 80009f8:	d808      	bhi.n	8000a0c <HAL_DMA_Start+0xbc>
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	68fa      	ldr	r2, [r7, #12]
 8000a00:	6812      	ldr	r2, [r2, #0]
 8000a02:	6812      	ldr	r2, [r2, #0]
 8000a04:	f042 0201 	orr.w	r2, r2, #1
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	e012      	b.n	8000a32 <HAL_DMA_Start+0xe2>
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	68fa      	ldr	r2, [r7, #12]
 8000a12:	6812      	ldr	r2, [r2, #0]
 8000a14:	6812      	ldr	r2, [r2, #0]
 8000a16:	f042 0201 	orr.w	r2, r2, #1
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	e009      	b.n	8000a32 <HAL_DMA_Start+0xe2>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	2200      	movs	r2, #0
 8000a22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a2c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000a32:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3718      	adds	r7, #24
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	4002000f 	.word	0x4002000f
 8000a40:	400204b8 	.word	0x400204b8

08000a44 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	60f8      	str	r0, [r7, #12]
 8000a4c:	60b9      	str	r1, [r7, #8]
 8000a4e:	607a      	str	r2, [r7, #4]
 8000a50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000a52:	2300      	movs	r3, #0
 8000a54:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d101      	bne.n	8000a60 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	e0c5      	b.n	8000bec <HAL_DMA_Start_IT+0x1a8>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d101      	bne.n	8000a6e <HAL_DMA_Start_IT+0x2a>
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	e0be      	b.n	8000bec <HAL_DMA_Start_IT+0x1a8>
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	2201      	movs	r2, #1
 8000a72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	f040 80a9 	bne.w	8000bd6 <HAL_DMA_Start_IT+0x192>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	2202      	movs	r2, #2
 8000a88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	2200      	movs	r2, #0
 8000a90:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	461a      	mov	r2, r3
 8000a98:	4b56      	ldr	r3, [pc, #344]	; (8000bf4 <HAL_DMA_Start_IT+0x1b0>)
 8000a9a:	429a      	cmp	r2, r3
 8000a9c:	d90e      	bls.n	8000abc <HAL_DMA_Start_IT+0x78>
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	4b54      	ldr	r3, [pc, #336]	; (8000bf8 <HAL_DMA_Start_IT+0x1b4>)
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	d808      	bhi.n	8000abc <HAL_DMA_Start_IT+0x78>
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	68fa      	ldr	r2, [r7, #12]
 8000ab0:	6812      	ldr	r2, [r2, #0]
 8000ab2:	6812      	ldr	r2, [r2, #0]
 8000ab4:	f022 0201 	bic.w	r2, r2, #1
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	e007      	b.n	8000acc <HAL_DMA_Start_IT+0x88>
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	68fa      	ldr	r2, [r7, #12]
 8000ac2:	6812      	ldr	r2, [r2, #0]
 8000ac4:	6812      	ldr	r2, [r2, #0]
 8000ac6:	f022 0201 	bic.w	r2, r2, #1
 8000aca:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	68b9      	ldr	r1, [r7, #8]
 8000ad2:	68f8      	ldr	r0, [r7, #12]
 8000ad4:	f000 fd2a 	bl	800152c <DMA_SetConfig>

    if(IS_D2_DMA_INSTANCE(hdma) != RESET) /* D2 Domain DMA : DMA1 or DMA2 */
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	461a      	mov	r2, r3
 8000ade:	4b45      	ldr	r3, [pc, #276]	; (8000bf4 <HAL_DMA_Start_IT+0x1b0>)
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d907      	bls.n	8000af4 <HAL_DMA_Start_IT+0xb0>
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	461a      	mov	r2, r3
 8000aea:	4b43      	ldr	r3, [pc, #268]	; (8000bf8 <HAL_DMA_Start_IT+0x1b4>)
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d801      	bhi.n	8000af4 <HAL_DMA_Start_IT+0xb0>
 8000af0:	2301      	movs	r3, #1
 8000af2:	e000      	b.n	8000af6 <HAL_DMA_Start_IT+0xb2>
 8000af4:	2300      	movs	r3, #0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d01e      	beq.n	8000b38 <HAL_DMA_Start_IT+0xf4>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	68fa      	ldr	r2, [r7, #12]
 8000b00:	6812      	ldr	r2, [r2, #0]
 8000b02:	6812      	ldr	r2, [r2, #0]
 8000b04:	f022 021e 	bic.w	r2, r2, #30
 8000b08:	f042 0216 	orr.w	r2, r2, #22
 8000b0c:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	68fa      	ldr	r2, [r7, #12]
 8000b14:	6812      	ldr	r2, [r2, #0]
 8000b16:	6952      	ldr	r2, [r2, #20]
 8000b18:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000b1c:	615a      	str	r2, [r3, #20]

      if(hdma->XferHalfCpltCallback != NULL)
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d01e      	beq.n	8000b64 <HAL_DMA_Start_IT+0x120>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	68fa      	ldr	r2, [r7, #12]
 8000b2c:	6812      	ldr	r2, [r2, #0]
 8000b2e:	6812      	ldr	r2, [r2, #0]
 8000b30:	f042 0208 	orr.w	r2, r2, #8
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	e015      	b.n	8000b64 <HAL_DMA_Start_IT+0x120>
      }
    }
    else /* D3 Domain BDMA */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	68fa      	ldr	r2, [r7, #12]
 8000b3e:	6812      	ldr	r2, [r2, #0]
 8000b40:	6812      	ldr	r2, [r2, #0]
 8000b42:	f022 020e 	bic.w	r2, r2, #14
 8000b46:	f042 020a 	orr.w	r2, r2, #10
 8000b4a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d007      	beq.n	8000b64 <HAL_DMA_Start_IT+0x120>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	68fa      	ldr	r2, [r7, #12]
 8000b5a:	6812      	ldr	r2, [r2, #0]
 8000b5c:	6812      	ldr	r2, [r2, #0]
 8000b5e:	f042 0204 	orr.w	r2, r2, #4
 8000b62:	601a      	str	r2, [r3, #0]
      }
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d007      	beq.n	8000b82 <HAL_DMA_Start_IT+0x13e>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b76:	68fa      	ldr	r2, [r7, #12]
 8000b78:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8000b7a:	6812      	ldr	r2, [r2, #0]
 8000b7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b80:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d007      	beq.n	8000b9a <HAL_DMA_Start_IT+0x156>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000b8e:	68fa      	ldr	r2, [r7, #12]
 8000b90:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8000b92:	6812      	ldr	r2, [r2, #0]
 8000b94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b98:	601a      	str	r2, [r3, #0]

    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	4b14      	ldr	r3, [pc, #80]	; (8000bf4 <HAL_DMA_Start_IT+0x1b0>)
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	d90e      	bls.n	8000bc4 <HAL_DMA_Start_IT+0x180>
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	461a      	mov	r2, r3
 8000bac:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <HAL_DMA_Start_IT+0x1b4>)
 8000bae:	429a      	cmp	r2, r3
 8000bb0:	d808      	bhi.n	8000bc4 <HAL_DMA_Start_IT+0x180>
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	68fa      	ldr	r2, [r7, #12]
 8000bb8:	6812      	ldr	r2, [r2, #0]
 8000bba:	6812      	ldr	r2, [r2, #0]
 8000bbc:	f042 0201 	orr.w	r2, r2, #1
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	e012      	b.n	8000bea <HAL_DMA_Start_IT+0x1a6>
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	68fa      	ldr	r2, [r7, #12]
 8000bca:	6812      	ldr	r2, [r2, #0]
 8000bcc:	6812      	ldr	r2, [r2, #0]
 8000bce:	f042 0201 	orr.w	r2, r2, #1
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	e009      	b.n	8000bea <HAL_DMA_Start_IT+0x1a6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	2200      	movs	r2, #0
 8000bda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000be4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
 8000be8:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8000bea:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3718      	adds	r7, #24
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	4002000f 	.word	0x4002000f
 8000bf8:	400204b8 	.word	0x400204b8

08000bfc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = NULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]
  __IO uint32_t *enableRegister = NULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	613b      	str	r3, [r7, #16]

  uint32_t tickstart = HAL_GetTick();
 8000c0c:	f7ff fbba 	bl	8000384 <HAL_GetTick>
 8000c10:	60f8      	str	r0, [r7, #12]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d101      	bne.n	8000c1c <HAL_DMA_Abort+0x20>
  {
    return HAL_ERROR;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	e0bf      	b.n	8000d9c <HAL_DMA_Abort+0x1a0>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	2b02      	cmp	r3, #2
 8000c26:	d008      	beq.n	8000c3a <HAL_DMA_Abort+0x3e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2280      	movs	r2, #128	; 0x80
 8000c2c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2200      	movs	r2, #0
 8000c32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	e0b0      	b.n	8000d9c <HAL_DMA_Abort+0x1a0>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_D2_DMA_INSTANCE(hdma) != RESET) /* D2 Domain DMA : DMA1 or DMA2*/
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	461a      	mov	r2, r3
 8000c40:	4b58      	ldr	r3, [pc, #352]	; (8000da4 <HAL_DMA_Abort+0x1a8>)
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d907      	bls.n	8000c56 <HAL_DMA_Abort+0x5a>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	4b56      	ldr	r3, [pc, #344]	; (8000da8 <HAL_DMA_Abort+0x1ac>)
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	d801      	bhi.n	8000c56 <HAL_DMA_Abort+0x5a>
 8000c52:	2301      	movs	r3, #1
 8000c54:	e000      	b.n	8000c58 <HAL_DMA_Abort+0x5c>
 8000c56:	2300      	movs	r3, #0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d016      	beq.n	8000c8a <HAL_DMA_Abort+0x8e>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	687a      	ldr	r2, [r7, #4]
 8000c62:	6812      	ldr	r2, [r2, #0]
 8000c64:	6812      	ldr	r2, [r2, #0]
 8000c66:	f022 021e 	bic.w	r2, r2, #30
 8000c6a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	687a      	ldr	r2, [r7, #4]
 8000c72:	6812      	ldr	r2, [r2, #0]
 8000c74:	6952      	ldr	r2, [r2, #20]
 8000c76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c7a:	615a      	str	r2, [r3, #20]

      regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c80:	617b      	str	r3, [r7, #20]
      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	613b      	str	r3, [r7, #16]
 8000c88:	e00a      	b.n	8000ca0 <HAL_DMA_Abort+0xa4>
    }
    else /* D3 domain BDMA*/
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	6812      	ldr	r2, [r2, #0]
 8000c92:	6812      	ldr	r2, [r2, #0]
 8000c94:	f022 020e 	bic.w	r2, r2, #14
 8000c98:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	613b      	str	r3, [r7, #16]
    }

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ca4:	687a      	ldr	r2, [r7, #4]
 8000ca6:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8000ca8:	6812      	ldr	r2, [r2, #0]
 8000caa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000cae:	601a      	str	r2, [r3, #0]

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4b3b      	ldr	r3, [pc, #236]	; (8000da4 <HAL_DMA_Abort+0x1a8>)
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d90e      	bls.n	8000cda <HAL_DMA_Abort+0xde>
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	4b39      	ldr	r3, [pc, #228]	; (8000da8 <HAL_DMA_Abort+0x1ac>)
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d808      	bhi.n	8000cda <HAL_DMA_Abort+0xde>
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	6812      	ldr	r2, [r2, #0]
 8000cd0:	6812      	ldr	r2, [r2, #0]
 8000cd2:	f022 0201 	bic.w	r2, r2, #1
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	e007      	b.n	8000cea <HAL_DMA_Abort+0xee>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	6812      	ldr	r2, [r2, #0]
 8000ce2:	6812      	ldr	r2, [r2, #0]
 8000ce4:	f022 0201 	bic.w	r2, r2, #1
 8000ce8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != RESET)
 8000cea:	e013      	b.n	8000d14 <HAL_DMA_Abort+0x118>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000cec:	f7ff fb4a 	bl	8000384 <HAL_GetTick>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	2b05      	cmp	r3, #5
 8000cf8:	d90c      	bls.n	8000d14 <HAL_DMA_Abort+0x118>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2220      	movs	r2, #32
 8000cfe:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2200      	movs	r2, #0
 8000d04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2203      	movs	r2, #3
 8000d0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8000d10:	2301      	movs	r3, #1
 8000d12:	e043      	b.n	8000d9c <HAL_DMA_Abort+0x1a0>
    while(((*enableRegister) & DMA_SxCR_EN) != RESET)
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f003 0301 	and.w	r3, r3, #1
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d1e5      	bne.n	8000cec <HAL_DMA_Abort+0xf0>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_D2_DMA_INSTANCE(hdma) != RESET) /* D2 Domain DMA : DMA1 or DMA2*/
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	461a      	mov	r2, r3
 8000d26:	4b1f      	ldr	r3, [pc, #124]	; (8000da4 <HAL_DMA_Abort+0x1a8>)
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d907      	bls.n	8000d3c <HAL_DMA_Abort+0x140>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	461a      	mov	r2, r3
 8000d32:	4b1d      	ldr	r3, [pc, #116]	; (8000da8 <HAL_DMA_Abort+0x1ac>)
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d801      	bhi.n	8000d3c <HAL_DMA_Abort+0x140>
 8000d38:	2301      	movs	r3, #1
 8000d3a:	e000      	b.n	8000d3e <HAL_DMA_Abort+0x142>
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d006      	beq.n	8000d50 <HAL_DMA_Abort+0x154>
    {
      regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d46:	223f      	movs	r2, #63	; 0x3f
 8000d48:	409a      	lsls	r2, r3
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	e006      	b.n	8000d5e <HAL_DMA_Abort+0x162>
    }
    else /* D3 domain BDMA*/
    {
      BDMA->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex));
 8000d50:	4a16      	ldr	r2, [pc, #88]	; (8000dac <HAL_DMA_Abort+0x1b0>)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d56:	2101      	movs	r1, #1
 8000d58:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5c:	6053      	str	r3, [r2, #4]
    }

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8000d66:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d00c      	beq.n	8000d8a <HAL_DMA_Abort+0x18e>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000d74:	687a      	ldr	r2, [r7, #4]
 8000d76:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8000d78:	6812      	ldr	r2, [r2, #0]
 8000d7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000d7e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d84:	687a      	ldr	r2, [r7, #4]
 8000d86:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8000d88:	605a      	str	r2, [r3, #4]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2201      	movs	r2, #1
 8000d96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8000d9a:	2300      	movs	r3, #0
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3718      	adds	r7, #24
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	4002000f 	.word	0x4002000f
 8000da8:	400204b8 	.word	0x400204b8
 8000dac:	58025400 	.word	0x58025400

08000db0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d101      	bne.n	8000dc2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e098      	b.n	8000ef4 <HAL_DMA_Abort_IT+0x144>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	2b02      	cmp	r3, #2
 8000dcc:	d004      	beq.n	8000dd8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2280      	movs	r2, #128	; 0x80
 8000dd2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	e08d      	b.n	8000ef4 <HAL_DMA_Abort_IT+0x144>
  }
  else
  {
    if(IS_D2_DMA_INSTANCE(hdma) != RESET) /* D2 Domain DMA : DMA1 or DMA2*/
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	461a      	mov	r2, r3
 8000dde:	4b47      	ldr	r3, [pc, #284]	; (8000efc <HAL_DMA_Abort_IT+0x14c>)
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d907      	bls.n	8000df4 <HAL_DMA_Abort_IT+0x44>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	461a      	mov	r2, r3
 8000dea:	4b45      	ldr	r3, [pc, #276]	; (8000f00 <HAL_DMA_Abort_IT+0x150>)
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d801      	bhi.n	8000df4 <HAL_DMA_Abort_IT+0x44>
 8000df0:	2301      	movs	r3, #1
 8000df2:	e000      	b.n	8000df6 <HAL_DMA_Abort_IT+0x46>
 8000df4:	2300      	movs	r3, #0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d021      	beq.n	8000e3e <HAL_DMA_Abort_IT+0x8e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2204      	movs	r2, #4
 8000dfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	461a      	mov	r2, r3
 8000e08:	4b3c      	ldr	r3, [pc, #240]	; (8000efc <HAL_DMA_Abort_IT+0x14c>)
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	d90e      	bls.n	8000e2c <HAL_DMA_Abort_IT+0x7c>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	461a      	mov	r2, r3
 8000e14:	4b3a      	ldr	r3, [pc, #232]	; (8000f00 <HAL_DMA_Abort_IT+0x150>)
 8000e16:	429a      	cmp	r2, r3
 8000e18:	d808      	bhi.n	8000e2c <HAL_DMA_Abort_IT+0x7c>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	6812      	ldr	r2, [r2, #0]
 8000e22:	6812      	ldr	r2, [r2, #0]
 8000e24:	f022 0201 	bic.w	r2, r2, #1
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	e062      	b.n	8000ef2 <HAL_DMA_Abort_IT+0x142>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	687a      	ldr	r2, [r7, #4]
 8000e32:	6812      	ldr	r2, [r2, #0]
 8000e34:	6812      	ldr	r2, [r2, #0]
 8000e36:	f022 0201 	bic.w	r2, r2, #1
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	e059      	b.n	8000ef2 <HAL_DMA_Abort_IT+0x142>
    }
    else /* D3 Domain BDMA */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	6812      	ldr	r2, [r2, #0]
 8000e46:	6812      	ldr	r2, [r2, #0]
 8000e48:	f022 020e 	bic.w	r2, r2, #14
 8000e4c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	461a      	mov	r2, r3
 8000e54:	4b29      	ldr	r3, [pc, #164]	; (8000efc <HAL_DMA_Abort_IT+0x14c>)
 8000e56:	429a      	cmp	r2, r3
 8000e58:	d90e      	bls.n	8000e78 <HAL_DMA_Abort_IT+0xc8>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	4b27      	ldr	r3, [pc, #156]	; (8000f00 <HAL_DMA_Abort_IT+0x150>)
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d808      	bhi.n	8000e78 <HAL_DMA_Abort_IT+0xc8>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	6812      	ldr	r2, [r2, #0]
 8000e6e:	6812      	ldr	r2, [r2, #0]
 8000e70:	f022 0201 	bic.w	r2, r2, #1
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	e007      	b.n	8000e88 <HAL_DMA_Abort_IT+0xd8>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	687a      	ldr	r2, [r7, #4]
 8000e7e:	6812      	ldr	r2, [r2, #0]
 8000e80:	6812      	ldr	r2, [r2, #0]
 8000e82:	f022 0201 	bic.w	r2, r2, #1
 8000e86:	601a      	str	r2, [r3, #0]

      /* disable the DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e8c:	687a      	ldr	r2, [r7, #4]
 8000e8e:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8000e90:	6812      	ldr	r2, [r2, #0]
 8000e92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000e96:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      BDMA->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex));
 8000e98:	4a1a      	ldr	r2, [pc, #104]	; (8000f04 <HAL_DMA_Abort_IT+0x154>)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea4:	6053      	str	r3, [r2, #4]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8000eae:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d00c      	beq.n	8000ed2 <HAL_DMA_Abort_IT+0x122>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
        /* disable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8000ec0:	6812      	ldr	r2, [r2, #0]
 8000ec2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000ec6:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8000ed0:	605a      	str	r2, [r3, #4]
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2201      	movs	r2, #1
 8000ede:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d003      	beq.n	8000ef2 <HAL_DMA_Abort_IT+0x142>
      {
        hdma->XferAbortCallback(hdma);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8000ef2:	2300      	movs	r3, #0
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	4002000f 	.word	0x4002000f
 8000f00:	400204b8 	.word	0x400204b8
 8000f04:	58025400 	.word	0x58025400

08000f08 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b088      	sub	sp, #32
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr = 0U;
 8000f10:	2300      	movs	r3, #0
 8000f12:	61fb      	str	r3, [r7, #28]
  __IO uint32_t *ccr_reg = NULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000f1c:	4b88      	ldr	r3, [pc, #544]	; (8001140 <HAL_DMA_IRQHandler+0x238>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a88      	ldr	r2, [pc, #544]	; (8001144 <HAL_DMA_IRQHandler+0x23c>)
 8000f22:	fba2 2303 	umull	r2, r3, r2, r3
 8000f26:	0a9b      	lsrs	r3, r3, #10
 8000f28:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f2e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	61fb      	str	r3, [r7, #28]

  if(IS_D2_DMA_INSTANCE(hdma) != RESET)  /*D2 domain DMA : DMA1 or DMA2*/
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	4b82      	ldr	r3, [pc, #520]	; (8001148 <HAL_DMA_IRQHandler+0x240>)
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d907      	bls.n	8000f52 <HAL_DMA_IRQHandler+0x4a>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	461a      	mov	r2, r3
 8000f48:	4b80      	ldr	r3, [pc, #512]	; (800114c <HAL_DMA_IRQHandler+0x244>)
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d801      	bhi.n	8000f52 <HAL_DMA_IRQHandler+0x4a>
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e000      	b.n	8000f54 <HAL_DMA_IRQHandler+0x4c>
 8000f52:	2300      	movs	r3, #0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	f000 821f 	beq.w	8001398 <HAL_DMA_IRQHandler+0x490>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f5e:	2208      	movs	r2, #8
 8000f60:	409a      	lsls	r2, r3
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	4013      	ands	r3, r2
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d036      	beq.n	8000fd8 <HAL_DMA_IRQHandler+0xd0>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	4b75      	ldr	r3, [pc, #468]	; (8001148 <HAL_DMA_IRQHandler+0x240>)
 8000f72:	429a      	cmp	r2, r3
 8000f74:	d910      	bls.n	8000f98 <HAL_DMA_IRQHandler+0x90>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	4b73      	ldr	r3, [pc, #460]	; (800114c <HAL_DMA_IRQHandler+0x244>)
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d80a      	bhi.n	8000f98 <HAL_DMA_IRQHandler+0x90>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f003 0304 	and.w	r3, r3, #4
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	bf14      	ite	ne
 8000f90:	2301      	movne	r3, #1
 8000f92:	2300      	moveq	r3, #0
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	e009      	b.n	8000fac <HAL_DMA_IRQHandler+0xa4>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f003 0308 	and.w	r3, r3, #8
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	bf14      	ite	ne
 8000fa6:	2301      	movne	r3, #1
 8000fa8:	2300      	moveq	r3, #0
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d013      	beq.n	8000fd8 <HAL_DMA_IRQHandler+0xd0>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	6812      	ldr	r2, [r2, #0]
 8000fb8:	6812      	ldr	r2, [r2, #0]
 8000fba:	f022 0204 	bic.w	r2, r2, #4
 8000fbe:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fc4:	2208      	movs	r2, #8
 8000fc6:	409a      	lsls	r2, r3
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fd0:	f043 0201 	orr.w	r2, r3, #1
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fdc:	4a5c      	ldr	r2, [pc, #368]	; (8001150 <HAL_DMA_IRQHandler+0x248>)
 8000fde:	409a      	lsls	r2, r3
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d028      	beq.n	800103a <HAL_DMA_IRQHandler+0x132>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	461a      	mov	r2, r3
 8000fee:	4b56      	ldr	r3, [pc, #344]	; (8001148 <HAL_DMA_IRQHandler+0x240>)
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d910      	bls.n	8001016 <HAL_DMA_IRQHandler+0x10e>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4b54      	ldr	r3, [pc, #336]	; (800114c <HAL_DMA_IRQHandler+0x244>)
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d80a      	bhi.n	8001016 <HAL_DMA_IRQHandler+0x10e>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	695b      	ldr	r3, [r3, #20]
 8001006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800100a:	2b00      	cmp	r3, #0
 800100c:	bf14      	ite	ne
 800100e:	2301      	movne	r3, #1
 8001010:	2300      	moveq	r3, #0
 8001012:	b2db      	uxtb	r3, r3
 8001014:	e003      	b.n	800101e <HAL_DMA_IRQHandler+0x116>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2300      	movs	r3, #0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d00b      	beq.n	800103a <HAL_DMA_IRQHandler+0x132>
      {
        /* Clear the FIFO error flag */
        regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001026:	4a4a      	ldr	r2, [pc, #296]	; (8001150 <HAL_DMA_IRQHandler+0x248>)
 8001028:	409a      	lsls	r2, r3
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001032:	f043 0202 	orr.w	r2, r3, #2
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800103e:	4a45      	ldr	r2, [pc, #276]	; (8001154 <HAL_DMA_IRQHandler+0x24c>)
 8001040:	409a      	lsls	r2, r3
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	4013      	ands	r3, r2
 8001046:	2b00      	cmp	r3, #0
 8001048:	d028      	beq.n	800109c <HAL_DMA_IRQHandler+0x194>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	461a      	mov	r2, r3
 8001050:	4b3d      	ldr	r3, [pc, #244]	; (8001148 <HAL_DMA_IRQHandler+0x240>)
 8001052:	429a      	cmp	r2, r3
 8001054:	d910      	bls.n	8001078 <HAL_DMA_IRQHandler+0x170>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	461a      	mov	r2, r3
 800105c:	4b3b      	ldr	r3, [pc, #236]	; (800114c <HAL_DMA_IRQHandler+0x244>)
 800105e:	429a      	cmp	r2, r3
 8001060:	d80a      	bhi.n	8001078 <HAL_DMA_IRQHandler+0x170>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f003 0302 	and.w	r3, r3, #2
 800106c:	2b00      	cmp	r3, #0
 800106e:	bf14      	ite	ne
 8001070:	2301      	movne	r3, #1
 8001072:	2300      	moveq	r3, #0
 8001074:	b2db      	uxtb	r3, r3
 8001076:	e003      	b.n	8001080 <HAL_DMA_IRQHandler+0x178>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2300      	movs	r3, #0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d00b      	beq.n	800109c <HAL_DMA_IRQHandler+0x194>
      {
        /* Clear the direct mode error flag */
        regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001088:	4a32      	ldr	r2, [pc, #200]	; (8001154 <HAL_DMA_IRQHandler+0x24c>)
 800108a:	409a      	lsls	r2, r3
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001094:	f043 0204 	orr.w	r2, r3, #4
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010a0:	2210      	movs	r2, #16
 80010a2:	409a      	lsls	r2, r3
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	4013      	ands	r3, r2
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d06c      	beq.n	8001186 <HAL_DMA_IRQHandler+0x27e>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	461a      	mov	r2, r3
 80010b2:	4b25      	ldr	r3, [pc, #148]	; (8001148 <HAL_DMA_IRQHandler+0x240>)
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d910      	bls.n	80010da <HAL_DMA_IRQHandler+0x1d2>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	461a      	mov	r2, r3
 80010be:	4b23      	ldr	r3, [pc, #140]	; (800114c <HAL_DMA_IRQHandler+0x244>)
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d80a      	bhi.n	80010da <HAL_DMA_IRQHandler+0x1d2>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f003 0308 	and.w	r3, r3, #8
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	bf14      	ite	ne
 80010d2:	2301      	movne	r3, #1
 80010d4:	2300      	moveq	r3, #0
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	e009      	b.n	80010ee <HAL_DMA_IRQHandler+0x1e6>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f003 0304 	and.w	r3, r3, #4
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	bf14      	ite	ne
 80010e8:	2301      	movne	r3, #1
 80010ea:	2300      	moveq	r3, #0
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d049      	beq.n	8001186 <HAL_DMA_IRQHandler+0x27e>
      {
        /* Clear the half transfer complete flag */
        regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010f6:	2210      	movs	r2, #16
 80010f8:	409a      	lsls	r2, r3
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d025      	beq.n	8001158 <HAL_DMA_IRQHandler+0x250>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == RESET)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d108      	bne.n	800112c <HAL_DMA_IRQHandler+0x224>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111e:	2b00      	cmp	r3, #0
 8001120:	d031      	beq.n	8001186 <HAL_DMA_IRQHandler+0x27e>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	4798      	blx	r3
 800112a:	e02c      	b.n	8001186 <HAL_DMA_IRQHandler+0x27e>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001130:	2b00      	cmp	r3, #0
 8001132:	d028      	beq.n	8001186 <HAL_DMA_IRQHandler+0x27e>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	4798      	blx	r3
 800113c:	e023      	b.n	8001186 <HAL_DMA_IRQHandler+0x27e>
 800113e:	bf00      	nop
 8001140:	2000000c 	.word	0x2000000c
 8001144:	1b4e81b5 	.word	0x1b4e81b5
 8001148:	4002000f 	.word	0x4002000f
 800114c:	400204b8 	.word	0x400204b8
 8001150:	00800001 	.word	0x00800001
 8001154:	00800004 	.word	0x00800004
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == RESET)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001162:	2b00      	cmp	r3, #0
 8001164:	d107      	bne.n	8001176 <HAL_DMA_IRQHandler+0x26e>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	6812      	ldr	r2, [r2, #0]
 800116e:	6812      	ldr	r2, [r2, #0]
 8001170:	f022 0208 	bic.w	r2, r2, #8
 8001174:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <HAL_DMA_IRQHandler+0x27e>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800118a:	2220      	movs	r2, #32
 800118c:	409a      	lsls	r2, r3
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	4013      	ands	r3, r2
 8001192:	2b00      	cmp	r3, #0
 8001194:	f000 80a7 	beq.w	80012e6 <HAL_DMA_IRQHandler+0x3de>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	461a      	mov	r2, r3
 800119e:	4b85      	ldr	r3, [pc, #532]	; (80013b4 <HAL_DMA_IRQHandler+0x4ac>)
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d910      	bls.n	80011c6 <HAL_DMA_IRQHandler+0x2be>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	461a      	mov	r2, r3
 80011aa:	4b83      	ldr	r3, [pc, #524]	; (80013b8 <HAL_DMA_IRQHandler+0x4b0>)
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d80a      	bhi.n	80011c6 <HAL_DMA_IRQHandler+0x2be>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 0310 	and.w	r3, r3, #16
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	bf14      	ite	ne
 80011be:	2301      	movne	r3, #1
 80011c0:	2300      	moveq	r3, #0
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	e009      	b.n	80011da <HAL_DMA_IRQHandler+0x2d2>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 0302 	and.w	r3, r3, #2
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	bf14      	ite	ne
 80011d4:	2301      	movne	r3, #1
 80011d6:	2300      	moveq	r3, #0
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	2b00      	cmp	r3, #0
 80011dc:	f000 8083 	beq.w	80012e6 <HAL_DMA_IRQHandler+0x3de>
      {
        /* Clear the transfer complete flag */
        regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011e4:	2220      	movs	r2, #32
 80011e6:	409a      	lsls	r2, r3
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	2b04      	cmp	r3, #4
 80011f6:	d137      	bne.n	8001268 <HAL_DMA_IRQHandler+0x360>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	6812      	ldr	r2, [r2, #0]
 8001200:	6812      	ldr	r2, [r2, #0]
 8001202:	f022 0216 	bic.w	r2, r2, #22
 8001206:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	6812      	ldr	r2, [r2, #0]
 8001210:	6952      	ldr	r2, [r2, #20]
 8001212:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001216:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121c:	2b00      	cmp	r3, #0
 800121e:	d103      	bne.n	8001228 <HAL_DMA_IRQHandler+0x320>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001224:	2b00      	cmp	r3, #0
 8001226:	d007      	beq.n	8001238 <HAL_DMA_IRQHandler+0x330>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	6812      	ldr	r2, [r2, #0]
 8001230:	6812      	ldr	r2, [r2, #0]
 8001232:	f022 0208 	bic.w	r2, r2, #8
 8001236:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800123c:	223f      	movs	r2, #63	; 0x3f
 800123e:	409a      	lsls	r2, r3
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2200      	movs	r2, #0
 8001248:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2201      	movs	r2, #1
 8001250:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001258:	2b00      	cmp	r3, #0
 800125a:	f000 8154 	beq.w	8001506 <HAL_DMA_IRQHandler+0x5fe>
          {
            hdma->XferAbortCallback(hdma);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	4798      	blx	r3
          }
          return;
 8001266:	e14e      	b.n	8001506 <HAL_DMA_IRQHandler+0x5fe>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d018      	beq.n	80012a8 <HAL_DMA_IRQHandler+0x3a0>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == RESET)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d108      	bne.n	8001296 <HAL_DMA_IRQHandler+0x38e>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001288:	2b00      	cmp	r3, #0
 800128a:	d02c      	beq.n	80012e6 <HAL_DMA_IRQHandler+0x3de>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	4798      	blx	r3
 8001294:	e027      	b.n	80012e6 <HAL_DMA_IRQHandler+0x3de>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800129a:	2b00      	cmp	r3, #0
 800129c:	d023      	beq.n	80012e6 <HAL_DMA_IRQHandler+0x3de>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	4798      	blx	r3
 80012a6:	e01e      	b.n	80012e6 <HAL_DMA_IRQHandler+0x3de>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == RESET)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d10f      	bne.n	80012d6 <HAL_DMA_IRQHandler+0x3ce>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	6812      	ldr	r2, [r2, #0]
 80012be:	6812      	ldr	r2, [r2, #0]
 80012c0:	f022 0210 	bic.w	r2, r2, #16
 80012c4:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2200      	movs	r2, #0
 80012ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2201      	movs	r2, #1
 80012d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d003      	beq.n	80012e6 <HAL_DMA_IRQHandler+0x3de>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	f000 810c 	beq.w	8001508 <HAL_DMA_IRQHandler+0x600>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012f4:	f003 0301 	and.w	r3, r3, #1
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d043      	beq.n	8001384 <HAL_DMA_IRQHandler+0x47c>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2204      	movs	r2, #4
 8001300:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	461a      	mov	r2, r3
 800130a:	4b2a      	ldr	r3, [pc, #168]	; (80013b4 <HAL_DMA_IRQHandler+0x4ac>)
 800130c:	429a      	cmp	r2, r3
 800130e:	d90e      	bls.n	800132e <HAL_DMA_IRQHandler+0x426>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	461a      	mov	r2, r3
 8001316:	4b28      	ldr	r3, [pc, #160]	; (80013b8 <HAL_DMA_IRQHandler+0x4b0>)
 8001318:	429a      	cmp	r2, r3
 800131a:	d808      	bhi.n	800132e <HAL_DMA_IRQHandler+0x426>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	6812      	ldr	r2, [r2, #0]
 8001324:	6812      	ldr	r2, [r2, #0]
 8001326:	f022 0201 	bic.w	r2, r2, #1
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	e007      	b.n	800133e <HAL_DMA_IRQHandler+0x436>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	6812      	ldr	r2, [r2, #0]
 8001336:	6812      	ldr	r2, [r2, #0]
 8001338:	f022 0201 	bic.w	r2, r2, #1
 800133c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	3301      	adds	r3, #1
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	697a      	ldr	r2, [r7, #20]
 8001346:	4293      	cmp	r3, r2
 8001348:	d807      	bhi.n	800135a <HAL_DMA_IRQHandler+0x452>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != RESET);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 0301 	and.w	r3, r3, #1
 8001354:	2b00      	cmp	r3, #0
 8001356:	d1f2      	bne.n	800133e <HAL_DMA_IRQHandler+0x436>
 8001358:	e000      	b.n	800135c <HAL_DMA_IRQHandler+0x454>
            break;
 800135a:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != RESET)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	2b00      	cmp	r3, #0
 8001370:	d004      	beq.n	800137c <HAL_DMA_IRQHandler+0x474>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2203      	movs	r2, #3
 8001376:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800137a:	e003      	b.n	8001384 <HAL_DMA_IRQHandler+0x47c>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2201      	movs	r2, #1
 8001380:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001388:	2b00      	cmp	r3, #0
 800138a:	f000 80bd 	beq.w	8001508 <HAL_DMA_IRQHandler+0x600>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	4798      	blx	r3
 8001396:	e0b7      	b.n	8001508 <HAL_DMA_IRQHandler+0x600>
      }
    }
  }
  else if(IS_D3_DMA_INSTANCE(hdma) != RESET)  /*D3 domain BDMA */
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	461a      	mov	r2, r3
 800139e:	4b07      	ldr	r3, [pc, #28]	; (80013bc <HAL_DMA_IRQHandler+0x4b4>)
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d90f      	bls.n	80013c4 <HAL_DMA_IRQHandler+0x4bc>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	461a      	mov	r2, r3
 80013aa:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <HAL_DMA_IRQHandler+0x4b8>)
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d809      	bhi.n	80013c4 <HAL_DMA_IRQHandler+0x4bc>
 80013b0:	2301      	movs	r3, #1
 80013b2:	e008      	b.n	80013c6 <HAL_DMA_IRQHandler+0x4be>
 80013b4:	4002000f 	.word	0x4002000f
 80013b8:	400204b8 	.word	0x400204b8
 80013bc:	58025407 	.word	0x58025407
 80013c0:	58025494 	.word	0x58025494
 80013c4:	2300      	movs	r3, #0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	f000 809e 	beq.w	8001508 <HAL_DMA_IRQHandler+0x600>
  {
    ccr_reg = &(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	61bb      	str	r3, [r7, #24]

    /* Half Transfer Complete Interrupt management ******************************/
    if ((RESET != (BDMA->ISR & (BDMA_FLAG_HT0 << hdma->StreamIndex))) && (RESET != ((*ccr_reg) & BDMA_CCR_HTIE)))
 80013d2:	4b4f      	ldr	r3, [pc, #316]	; (8001510 <HAL_DMA_IRQHandler+0x608>)
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013da:	2104      	movs	r1, #4
 80013dc:	fa01 f303 	lsl.w	r3, r1, r3
 80013e0:	4013      	ands	r3, r2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d024      	beq.n	8001430 <HAL_DMA_IRQHandler+0x528>
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0304 	and.w	r3, r3, #4
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d01e      	beq.n	8001430 <HAL_DMA_IRQHandler+0x528>
    {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if(((*ccr_reg) & BDMA_CCR_CIRC) == 0U)
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0320 	and.w	r3, r3, #32
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d105      	bne.n	800140a <HAL_DMA_IRQHandler+0x502>
        {
          /* Disable the half transfer interrupt */
          (*ccr_reg) &= ~BDMA_CCR_HTIE;
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f023 0204 	bic.w	r2, r3, #4
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	601a      	str	r2, [r3, #0]
        }
        /* Clear the half transfer complete flag */
        BDMA->IFCR  |= (BDMA_ISR_HTIF0 << hdma->StreamIndex);
 800140a:	4941      	ldr	r1, [pc, #260]	; (8001510 <HAL_DMA_IRQHandler+0x608>)
 800140c:	4b40      	ldr	r3, [pc, #256]	; (8001510 <HAL_DMA_IRQHandler+0x608>)
 800140e:	685a      	ldr	r2, [r3, #4]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001414:	2004      	movs	r0, #4
 8001416:	fa00 f303 	lsl.w	r3, r0, r3
 800141a:	4313      	orrs	r3, r2
 800141c:	604b      	str	r3, [r1, #4]

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	2b00      	cmp	r3, #0
 8001424:	d070      	beq.n	8001508 <HAL_DMA_IRQHandler+0x600>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	4798      	blx	r3
       if(hdma->XferHalfCpltCallback != NULL)
 800142e:	e06b      	b.n	8001508 <HAL_DMA_IRQHandler+0x600>
        }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if ((RESET != (BDMA->ISR & (BDMA_FLAG_TC0 << hdma->StreamIndex))) && (RESET != ((*ccr_reg) & BDMA_CCR_TCIE)))
 8001430:	4b37      	ldr	r3, [pc, #220]	; (8001510 <HAL_DMA_IRQHandler+0x608>)
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001438:	2102      	movs	r1, #2
 800143a:	fa01 f303 	lsl.w	r3, r1, r3
 800143e:	4013      	ands	r3, r2
 8001440:	2b00      	cmp	r3, #0
 8001442:	d02c      	beq.n	800149e <HAL_DMA_IRQHandler+0x596>
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0302 	and.w	r3, r3, #2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d026      	beq.n	800149e <HAL_DMA_IRQHandler+0x596>
    {
      if(((*ccr_reg) & BDMA_CCR_CIRC) == 0U)
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0320 	and.w	r3, r3, #32
 8001458:	2b00      	cmp	r3, #0
 800145a:	d10d      	bne.n	8001478 <HAL_DMA_IRQHandler+0x570>
      {
        /* Disable TE & TC */
        (*ccr_reg) &= ~(BDMA_CCR_TEIE | BDMA_CCR_TCIE);
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f023 020a 	bic.w	r2, r3, #10
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2201      	movs	r2, #1
 8001474:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      }
      /* Clear the transfer complete flag */
      BDMA->IFCR |= (BDMA_ISR_TCIF0 << hdma->StreamIndex);
 8001478:	4925      	ldr	r1, [pc, #148]	; (8001510 <HAL_DMA_IRQHandler+0x608>)
 800147a:	4b25      	ldr	r3, [pc, #148]	; (8001510 <HAL_DMA_IRQHandler+0x608>)
 800147c:	685a      	ldr	r2, [r3, #4]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001482:	2002      	movs	r0, #2
 8001484:	fa00 f303 	lsl.w	r3, r0, r3
 8001488:	4313      	orrs	r3, r2
 800148a:	604b      	str	r3, [r1, #4]

      if(hdma->XferCpltCallback != NULL)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001490:	2b00      	cmp	r3, #0
 8001492:	d039      	beq.n	8001508 <HAL_DMA_IRQHandler+0x600>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	4798      	blx	r3
      if(hdma->XferCpltCallback != NULL)
 800149c:	e034      	b.n	8001508 <HAL_DMA_IRQHandler+0x600>
      }
    }

    /* Transfer Error Interrupt management **************************************/
    else if (( RESET != (BDMA->ISR & (BDMA_FLAG_TE0 << hdma->StreamIndex))) && (RESET != ((*ccr_reg) & BDMA_CCR_TEIE)))
 800149e:	4b1c      	ldr	r3, [pc, #112]	; (8001510 <HAL_DMA_IRQHandler+0x608>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014a6:	2108      	movs	r1, #8
 80014a8:	fa01 f303 	lsl.w	r3, r1, r3
 80014ac:	4013      	ands	r3, r2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d02a      	beq.n	8001508 <HAL_DMA_IRQHandler+0x600>
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0308 	and.w	r3, r3, #8
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d024      	beq.n	8001508 <HAL_DMA_IRQHandler+0x600>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      (*ccr_reg) &= ~(BDMA_CCR_TEIE | BDMA_CCR_TCIE | BDMA_CCR_HTIE);
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f023 020e 	bic.w	r2, r3, #14
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      BDMA->IFCR  |= (BDMA_ISR_GIF0 << hdma->StreamIndex);
 80014ca:	4911      	ldr	r1, [pc, #68]	; (8001510 <HAL_DMA_IRQHandler+0x608>)
 80014cc:	4b10      	ldr	r3, [pc, #64]	; (8001510 <HAL_DMA_IRQHandler+0x608>)
 80014ce:	685a      	ldr	r2, [r3, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014d4:	2001      	movs	r0, #1
 80014d6:	fa00 f303 	lsl.w	r3, r0, r3
 80014da:	4313      	orrs	r3, r2
 80014dc:	604b      	str	r3, [r1, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2201      	movs	r2, #1
 80014e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2200      	movs	r2, #0
 80014e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2201      	movs	r2, #1
 80014f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d005      	beq.n	8001508 <HAL_DMA_IRQHandler+0x600>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	4798      	blx	r3
 8001504:	e000      	b.n	8001508 <HAL_DMA_IRQHandler+0x600>
          return;
 8001506:	bf00      	nop
      }
    }
  }
}
 8001508:	3720      	adds	r7, #32
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	58025400 	.word	0x58025400

08001514 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001520:	4618      	mov	r0, r3
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800152c:	b480      	push	{r7}
 800152e:	b087      	sub	sp, #28
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
 8001538:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800153e:	617b      	str	r3, [r7, #20]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001544:	68fa      	ldr	r2, [r7, #12]
 8001546:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001548:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800154e:	2b00      	cmp	r3, #0
 8001550:	d004      	beq.n	800155c <DMA_SetConfig+0x30>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800155a:	605a      	str	r2, [r3, #4]
  }

  if(IS_D2_DMA_INSTANCE(hdma) != RESET) /* D2 Domain DMA : DMA1 or DMA2 */
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	461a      	mov	r2, r3
 8001562:	4b35      	ldr	r3, [pc, #212]	; (8001638 <DMA_SetConfig+0x10c>)
 8001564:	429a      	cmp	r2, r3
 8001566:	d907      	bls.n	8001578 <DMA_SetConfig+0x4c>
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	461a      	mov	r2, r3
 800156e:	4b33      	ldr	r3, [pc, #204]	; (800163c <DMA_SetConfig+0x110>)
 8001570:	429a      	cmp	r2, r3
 8001572:	d801      	bhi.n	8001578 <DMA_SetConfig+0x4c>
 8001574:	2301      	movs	r3, #1
 8001576:	e000      	b.n	800157a <DMA_SetConfig+0x4e>
 8001578:	2300      	movs	r3, #0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d027      	beq.n	80015ce <DMA_SetConfig+0xa2>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001582:	223f      	movs	r2, #63	; 0x3f
 8001584:	409a      	lsls	r2, r3
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	68fa      	ldr	r2, [r7, #12]
 8001590:	6812      	ldr	r2, [r2, #0]
 8001592:	6812      	ldr	r2, [r2, #0]
 8001594:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001598:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	683a      	ldr	r2, [r7, #0]
 80015a0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	2b40      	cmp	r3, #64	; 0x40
 80015a8:	d108      	bne.n	80015bc <DMA_SetConfig+0x90>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	68ba      	ldr	r2, [r7, #8]
 80015b8:	60da      	str	r2, [r3, #12]

      /* Configure DMA Channel destination address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CMAR = DstAddress;
    }
  }
}
 80015ba:	e037      	b.n	800162c <DMA_SetConfig+0x100>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	68ba      	ldr	r2, [r7, #8]
 80015c2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	60da      	str	r2, [r3, #12]
}
 80015cc:	e02e      	b.n	800162c <DMA_SetConfig+0x100>
  else if(IS_D3_DMA_INSTANCE(hdma)) /* D3 Domain BDMA */
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	461a      	mov	r2, r3
 80015d4:	4b1a      	ldr	r3, [pc, #104]	; (8001640 <DMA_SetConfig+0x114>)
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d928      	bls.n	800162c <DMA_SetConfig+0x100>
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	461a      	mov	r2, r3
 80015e0:	4b18      	ldr	r3, [pc, #96]	; (8001644 <DMA_SetConfig+0x118>)
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d822      	bhi.n	800162c <DMA_SetConfig+0x100>
    BDMA->IFCR  |= (BDMA_ISR_GIF0 << hdma->StreamIndex);
 80015e6:	4918      	ldr	r1, [pc, #96]	; (8001648 <DMA_SetConfig+0x11c>)
 80015e8:	4b17      	ldr	r3, [pc, #92]	; (8001648 <DMA_SetConfig+0x11c>)
 80015ea:	685a      	ldr	r2, [r3, #4]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015f0:	2001      	movs	r0, #1
 80015f2:	fa00 f303 	lsl.w	r3, r0, r3
 80015f6:	4313      	orrs	r3, r2
 80015f8:	604b      	str	r3, [r1, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	683a      	ldr	r2, [r7, #0]
 8001600:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	2b40      	cmp	r3, #64	; 0x40
 8001608:	d108      	bne.n	800161c <DMA_SetConfig+0xf0>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CMAR = SrcAddress;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	68ba      	ldr	r2, [r7, #8]
 8001618:	60da      	str	r2, [r3, #12]
}
 800161a:	e007      	b.n	800162c <DMA_SetConfig+0x100>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	68ba      	ldr	r2, [r7, #8]
 8001622:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CMAR = DstAddress;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	60da      	str	r2, [r3, #12]
}
 800162c:	bf00      	nop
 800162e:	371c      	adds	r7, #28
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	4002000f 	.word	0x4002000f
 800163c:	400204b8 	.word	0x400204b8
 8001640:	58025407 	.word	0x58025407
 8001644:	58025494 	.word	0x58025494
 8001648:	58025400 	.word	0x58025400

0800164c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	b2db      	uxtb	r3, r3
 800165a:	3b10      	subs	r3, #16
 800165c:	4a13      	ldr	r2, [pc, #76]	; (80016ac <DMA_CalcBaseAndBitshift+0x60>)
 800165e:	fba2 2303 	umull	r2, r3, r2, r3
 8001662:	091b      	lsrs	r3, r3, #4
 8001664:	60fb      	str	r3, [r7, #12]

  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001666:	4a12      	ldr	r2, [pc, #72]	; (80016b0 <DMA_CalcBaseAndBitshift+0x64>)
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	4413      	add	r3, r2
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	461a      	mov	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	65da      	str	r2, [r3, #92]	; 0x5c

  if (stream_number > 3U)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2b03      	cmp	r3, #3
 8001678:	d908      	bls.n	800168c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	461a      	mov	r2, r3
 8001680:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <DMA_CalcBaseAndBitshift+0x68>)
 8001682:	4013      	ands	r3, r2
 8001684:	1d1a      	adds	r2, r3, #4
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	659a      	str	r2, [r3, #88]	; 0x58
 800168a:	e006      	b.n	800169a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	461a      	mov	r2, r3
 8001692:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <DMA_CalcBaseAndBitshift+0x68>)
 8001694:	4013      	ands	r3, r2
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	6593      	str	r3, [r2, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3714      	adds	r7, #20
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	aaaaaaab 	.word	0xaaaaaaab
 80016b0:	0800769c 	.word	0x0800769c
 80016b4:	fffffc00 	.word	0xfffffc00

080016b8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016c0:	2300      	movs	r3, #0
 80016c2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d120      	bne.n	800170e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d0:	2b03      	cmp	r3, #3
 80016d2:	d858      	bhi.n	8001786 <DMA_CheckFifoParam+0xce>
 80016d4:	a201      	add	r2, pc, #4	; (adr r2, 80016dc <DMA_CheckFifoParam+0x24>)
 80016d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016da:	bf00      	nop
 80016dc:	080016ed 	.word	0x080016ed
 80016e0:	080016ff 	.word	0x080016ff
 80016e4:	080016ed 	.word	0x080016ed
 80016e8:	08001787 	.word	0x08001787
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d048      	beq.n	800178a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80016fc:	e045      	b.n	800178a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001702:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001706:	d142      	bne.n	800178e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800170c:	e03f      	b.n	800178e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001716:	d123      	bne.n	8001760 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800171c:	2b03      	cmp	r3, #3
 800171e:	d838      	bhi.n	8001792 <DMA_CheckFifoParam+0xda>
 8001720:	a201      	add	r2, pc, #4	; (adr r2, 8001728 <DMA_CheckFifoParam+0x70>)
 8001722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001726:	bf00      	nop
 8001728:	08001739 	.word	0x08001739
 800172c:	0800173f 	.word	0x0800173f
 8001730:	08001739 	.word	0x08001739
 8001734:	08001751 	.word	0x08001751
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	73fb      	strb	r3, [r7, #15]
        break;
 800173c:	e030      	b.n	80017a0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001742:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d025      	beq.n	8001796 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800174e:	e022      	b.n	8001796 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001754:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001758:	d11f      	bne.n	800179a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800175e:	e01c      	b.n	800179a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001764:	2b02      	cmp	r3, #2
 8001766:	d902      	bls.n	800176e <DMA_CheckFifoParam+0xb6>
 8001768:	2b03      	cmp	r3, #3
 800176a:	d003      	beq.n	8001774 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800176c:	e018      	b.n	80017a0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	73fb      	strb	r3, [r7, #15]
        break;
 8001772:	e015      	b.n	80017a0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001778:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d00e      	beq.n	800179e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	73fb      	strb	r3, [r7, #15]
    break;
 8001784:	e00b      	b.n	800179e <DMA_CheckFifoParam+0xe6>
        break;
 8001786:	bf00      	nop
 8001788:	e00a      	b.n	80017a0 <DMA_CheckFifoParam+0xe8>
        break;
 800178a:	bf00      	nop
 800178c:	e008      	b.n	80017a0 <DMA_CheckFifoParam+0xe8>
        break;
 800178e:	bf00      	nop
 8001790:	e006      	b.n	80017a0 <DMA_CheckFifoParam+0xe8>
        break;
 8001792:	bf00      	nop
 8001794:	e004      	b.n	80017a0 <DMA_CheckFifoParam+0xe8>
        break;
 8001796:	bf00      	nop
 8001798:	e002      	b.n	80017a0 <DMA_CheckFifoParam+0xe8>
        break;
 800179a:	bf00      	nop
 800179c:	e000      	b.n	80017a0 <DMA_CheckFifoParam+0xe8>
    break;
 800179e:	bf00      	nop
    }
  }

  return status;
 80017a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3714      	adds	r7, #20
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop

080017b0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = 0U;
 80017b8:	2300      	movs	r3, #0
 80017ba:	60fb      	str	r3, [r7, #12]
  uint32_t stream_baseaddress = (uint32_t)hdma->Instance;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	60bb      	str	r3, [r7, #8]

  if((stream_baseaddress <= ((uint32_t)BDMA_Channel7) ) && \
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	4a24      	ldr	r2, [pc, #144]	; (8001858 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d81c      	bhi.n	8001804 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	4a23      	ldr	r2, [pc, #140]	; (800185c <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d918      	bls.n	8001804 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
     (stream_baseaddress >= ((uint32_t)BDMA_Channel0)))
  {
    /*BDMA Channels are connected to DMAMUX2 channels*/
    stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	3b08      	subs	r3, #8
 80017da:	4a21      	ldr	r2, [pc, #132]	; (8001860 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 80017dc:	fba2 2303 	umull	r2, r3, r2, r3
 80017e0:	091b      	lsrs	r3, r3, #4
 80017e2:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80017e4:	68fa      	ldr	r2, [r7, #12]
 80017e6:	4b1f      	ldr	r3, [pc, #124]	; (8001864 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
 80017e8:	4413      	add	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	461a      	mov	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a1c      	ldr	r2, [pc, #112]	; (8001868 <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
 80017f6:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1U << stream_number;
 80017f8:	2201      	movs	r2, #1
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	409a      	lsls	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	669a      	str	r2, [r3, #104]	; 0x68
 8001802:	e022      	b.n	800184a <DMA_CalcDMAMUXChannelBaseAndMask+0x9a>
  }
  else
  {
    /*DMA1/DMA2 Streams are connected to DMAMUX1 channels*/
    stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	b2db      	uxtb	r3, r3
 800180a:	3b10      	subs	r3, #16
 800180c:	4a17      	ldr	r2, [pc, #92]	; (800186c <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
 800180e:	fba2 2303 	umull	r2, r3, r2, r3
 8001812:	091b      	lsrs	r3, r3, #4
 8001814:	60fb      	str	r3, [r7, #12]

    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	4a15      	ldr	r2, [pc, #84]	; (8001870 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d806      	bhi.n	800182c <DMA_CalcDMAMUXChannelBaseAndMask+0x7c>
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	4a14      	ldr	r2, [pc, #80]	; (8001874 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d902      	bls.n	800182c <DMA_CalcDMAMUXChannelBaseAndMask+0x7c>
     (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	3308      	adds	r3, #8
 800182a:	60fb      	str	r3, [r7, #12]
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800182c:	68fa      	ldr	r2, [r7, #12]
 800182e:	4b12      	ldr	r3, [pc, #72]	; (8001878 <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
 8001830:	4413      	add	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	461a      	mov	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a0f      	ldr	r2, [pc, #60]	; (800187c <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
 800183e:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1U << stream_number;
 8001840:	2201      	movs	r2, #1
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	409a      	lsls	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 800184a:	bf00      	nop
 800184c:	3714      	adds	r7, #20
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	58025494 	.word	0x58025494
 800185c:	58025407 	.word	0x58025407
 8001860:	cccccccd 	.word	0xcccccccd
 8001864:	16009600 	.word	0x16009600
 8001868:	58025880 	.word	0x58025880
 800186c:	aaaaaaab 	.word	0xaaaaaaab
 8001870:	400204b8 	.word	0x400204b8
 8001874:	4002040f 	.word	0x4002040f
 8001878:	10008200 	.word	0x10008200
 800187c:	40020880 	.word	0x40020880

08001880 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t stream_baseaddress = (uint32_t)hdma->Instance;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	60fb      	str	r3, [r7, #12]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	b2db      	uxtb	r3, r3
 8001894:	60bb      	str	r3, [r7, #8]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d025      	beq.n	80018e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x68>
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	2b08      	cmp	r3, #8
 80018a0:	d822      	bhi.n	80018e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x68>
  {
    if((stream_baseaddress <= ((uint32_t)BDMA_Channel7) ) && \
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	4a13      	ldr	r2, [pc, #76]	; (80018f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x74>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d80e      	bhi.n	80018c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	4a12      	ldr	r2, [pc, #72]	; (80018f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x78>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d90a      	bls.n	80018c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>
      (stream_baseaddress >= ((uint32_t)BDMA_Channel0)))
    {
      /*BDMA Channels are connected to DMAMUX2 request generator blocks*/
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80018b2:	68ba      	ldr	r2, [r7, #8]
 80018b4:	4b11      	ldr	r3, [pc, #68]	; (80018fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x7c>)
 80018b6:	4413      	add	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	461a      	mov	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4a0f      	ldr	r2, [pc, #60]	; (8001900 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x80>)
 80018c4:	671a      	str	r2, [r3, #112]	; 0x70
 80018c6:	e009      	b.n	80018dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x5c>
    }
    else
    {
      /*DMA1 and DMA2 Streams use DMAMUX1 request generator blocks*/
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80018c8:	68ba      	ldr	r2, [r7, #8]
 80018ca:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x84>)
 80018cc:	4413      	add	r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	461a      	mov	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a0b      	ldr	r2, [pc, #44]	; (8001908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x88>)
 80018da:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1U << (request - 1U);
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	3b01      	subs	r3, #1
 80018e0:	2201      	movs	r2, #1
 80018e2:	409a      	lsls	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80018e8:	bf00      	nop
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	58025494 	.word	0x58025494
 80018f8:	58025407 	.word	0x58025407
 80018fc:	1600963f 	.word	0x1600963f
 8001900:	58025940 	.word	0x58025940
 8001904:	1000823f 	.word	0x1000823f
 8001908:	40020940 	.word	0x40020940

0800190c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800190c:	b480      	push	{r7}
 800190e:	b089      	sub	sp, #36	; 0x24
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001916:	2300      	movs	r3, #0
 8001918:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800191a:	2300      	movs	r3, #0
 800191c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800191e:	2300      	movs	r3, #0
 8001920:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001922:	2300      	movs	r3, #0
 8001924:	61bb      	str	r3, [r7, #24]
  EXTI_Core_TypeDef * EXTI_Ptr = EXTI_D1; 
 8001926:	4b8b      	ldr	r3, [pc, #556]	; (8001b54 <HAL_GPIO_Init+0x248>)
 8001928:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800192a:	2300      	movs	r3, #0
 800192c:	61fb      	str	r3, [r7, #28]
 800192e:	e196      	b.n	8001c5e <HAL_GPIO_Init+0x352>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001930:	2201      	movs	r2, #1
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	4013      	ands	r3, r2
 8001942:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	429a      	cmp	r2, r3
 800194a:	f040 8185 	bne.w	8001c58 <HAL_GPIO_Init+0x34c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	2b02      	cmp	r3, #2
 8001954:	d003      	beq.n	800195e <HAL_GPIO_Init+0x52>
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	2b12      	cmp	r3, #18
 800195c:	d123      	bne.n	80019a6 <HAL_GPIO_Init+0x9a>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	08da      	lsrs	r2, r3, #3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	3208      	adds	r2, #8
 8001966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800196a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	220f      	movs	r2, #15
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	43db      	mvns	r3, r3
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	4013      	ands	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	691a      	ldr	r2, [r3, #16]
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	4313      	orrs	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	08da      	lsrs	r2, r3, #3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3208      	adds	r2, #8
 80019a0:	69b9      	ldr	r1, [r7, #24]
 80019a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	2203      	movs	r2, #3
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	43db      	mvns	r3, r3
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	4013      	ands	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f003 0203 	and.w	r2, r3, #3
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d00b      	beq.n	80019fa <HAL_GPIO_Init+0xee>
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d007      	beq.n	80019fa <HAL_GPIO_Init+0xee>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019ee:	2b11      	cmp	r3, #17
 80019f0:	d003      	beq.n	80019fa <HAL_GPIO_Init+0xee>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2b12      	cmp	r3, #18
 80019f8:	d130      	bne.n	8001a5c <HAL_GPIO_Init+0x150>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	2203      	movs	r2, #3
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	43db      	mvns	r3, r3
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	68da      	ldr	r2, [r3, #12]
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a30:	2201      	movs	r2, #1
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	091b      	lsrs	r3, r3, #4
 8001a46:	f003 0201 	and.w	r2, r3, #1
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	2203      	movs	r2, #3
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	4013      	ands	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	689a      	ldr	r2, [r3, #8]
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f000 80df 	beq.w	8001c58 <HAL_GPIO_Init+0x34c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9a:	4a2f      	ldr	r2, [pc, #188]	; (8001b58 <HAL_GPIO_Init+0x24c>)
 8001a9c:	4b2e      	ldr	r3, [pc, #184]	; (8001b58 <HAL_GPIO_Init+0x24c>)
 8001a9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001aa2:	f043 0302 	orr.w	r3, r3, #2
 8001aa6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001aaa:	4b2b      	ldr	r3, [pc, #172]	; (8001b58 <HAL_GPIO_Init+0x24c>)
 8001aac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	60bb      	str	r3, [r7, #8]
 8001ab6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001ab8:	4a28      	ldr	r2, [pc, #160]	; (8001b5c <HAL_GPIO_Init+0x250>)
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	089b      	lsrs	r3, r3, #2
 8001abe:	3302      	adds	r3, #2
 8001ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	f003 0303 	and.w	r3, r3, #3
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	220f      	movs	r2, #15
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4a20      	ldr	r2, [pc, #128]	; (8001b60 <HAL_GPIO_Init+0x254>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d051      	beq.n	8001b88 <HAL_GPIO_Init+0x27c>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4a1f      	ldr	r2, [pc, #124]	; (8001b64 <HAL_GPIO_Init+0x258>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d031      	beq.n	8001b50 <HAL_GPIO_Init+0x244>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4a1e      	ldr	r2, [pc, #120]	; (8001b68 <HAL_GPIO_Init+0x25c>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d02b      	beq.n	8001b4c <HAL_GPIO_Init+0x240>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	4a1d      	ldr	r2, [pc, #116]	; (8001b6c <HAL_GPIO_Init+0x260>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d025      	beq.n	8001b48 <HAL_GPIO_Init+0x23c>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4a1c      	ldr	r2, [pc, #112]	; (8001b70 <HAL_GPIO_Init+0x264>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d01f      	beq.n	8001b44 <HAL_GPIO_Init+0x238>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	4a1b      	ldr	r2, [pc, #108]	; (8001b74 <HAL_GPIO_Init+0x268>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d019      	beq.n	8001b40 <HAL_GPIO_Init+0x234>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4a1a      	ldr	r2, [pc, #104]	; (8001b78 <HAL_GPIO_Init+0x26c>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d013      	beq.n	8001b3c <HAL_GPIO_Init+0x230>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4a19      	ldr	r2, [pc, #100]	; (8001b7c <HAL_GPIO_Init+0x270>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d00d      	beq.n	8001b38 <HAL_GPIO_Init+0x22c>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4a18      	ldr	r2, [pc, #96]	; (8001b80 <HAL_GPIO_Init+0x274>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d007      	beq.n	8001b34 <HAL_GPIO_Init+0x228>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4a17      	ldr	r2, [pc, #92]	; (8001b84 <HAL_GPIO_Init+0x278>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d101      	bne.n	8001b30 <HAL_GPIO_Init+0x224>
 8001b2c:	2309      	movs	r3, #9
 8001b2e:	e02c      	b.n	8001b8a <HAL_GPIO_Init+0x27e>
 8001b30:	230a      	movs	r3, #10
 8001b32:	e02a      	b.n	8001b8a <HAL_GPIO_Init+0x27e>
 8001b34:	2308      	movs	r3, #8
 8001b36:	e028      	b.n	8001b8a <HAL_GPIO_Init+0x27e>
 8001b38:	2307      	movs	r3, #7
 8001b3a:	e026      	b.n	8001b8a <HAL_GPIO_Init+0x27e>
 8001b3c:	2306      	movs	r3, #6
 8001b3e:	e024      	b.n	8001b8a <HAL_GPIO_Init+0x27e>
 8001b40:	2305      	movs	r3, #5
 8001b42:	e022      	b.n	8001b8a <HAL_GPIO_Init+0x27e>
 8001b44:	2304      	movs	r3, #4
 8001b46:	e020      	b.n	8001b8a <HAL_GPIO_Init+0x27e>
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e01e      	b.n	8001b8a <HAL_GPIO_Init+0x27e>
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	e01c      	b.n	8001b8a <HAL_GPIO_Init+0x27e>
 8001b50:	2301      	movs	r3, #1
 8001b52:	e01a      	b.n	8001b8a <HAL_GPIO_Init+0x27e>
 8001b54:	58000080 	.word	0x58000080
 8001b58:	58024400 	.word	0x58024400
 8001b5c:	58000400 	.word	0x58000400
 8001b60:	58020000 	.word	0x58020000
 8001b64:	58020400 	.word	0x58020400
 8001b68:	58020800 	.word	0x58020800
 8001b6c:	58020c00 	.word	0x58020c00
 8001b70:	58021000 	.word	0x58021000
 8001b74:	58021400 	.word	0x58021400
 8001b78:	58021800 	.word	0x58021800
 8001b7c:	58021c00 	.word	0x58021c00
 8001b80:	58022000 	.word	0x58022000
 8001b84:	58022400 	.word	0x58022400
 8001b88:	2300      	movs	r3, #0
 8001b8a:	69fa      	ldr	r2, [r7, #28]
 8001b8c:	f002 0203 	and.w	r2, r2, #3
 8001b90:	0092      	lsls	r2, r2, #2
 8001b92:	4093      	lsls	r3, r2
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b9a:	4936      	ldr	r1, [pc, #216]	; (8001c74 <HAL_GPIO_Init+0x368>)
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	089b      	lsrs	r3, r3, #2
 8001ba0:	3302      	adds	r3, #2
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
     
        /* Clear EXTI line configuration */
        temp = EXTI_Ptr->IMR1;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d003      	beq.n	8001bcc <HAL_GPIO_Init+0x2c0>
        {
          temp |= iocurrent;
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_Ptr->IMR1 = temp;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	601a      	str	r2, [r3, #0]

        temp = EXTI_Ptr->EMR1;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4013      	ands	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <HAL_GPIO_Init+0x2ea>
        {
          temp |= iocurrent;
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_Ptr->EMR1 = temp;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	605a      	str	r2, [r3, #4]
             
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	43db      	mvns	r3, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <HAL_GPIO_Init+0x316>
        {
          temp |= iocurrent;
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001c22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001c2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	43db      	mvns	r3, r3
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d003      	beq.n	8001c50 <HAL_GPIO_Init+0x344>
        {
          temp |= iocurrent;
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001c50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	6053      	str	r3, [r2, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	61fb      	str	r3, [r7, #28]
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	2b0f      	cmp	r3, #15
 8001c62:	f67f ae65 	bls.w	8001930 <HAL_GPIO_Init+0x24>
      }      
    }
  }
}
 8001c66:	bf00      	nop
 8001c68:	3724      	adds	r7, #36	; 0x24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	58000400 	.word	0x58000400

08001c78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	460b      	mov	r3, r1
 8001c82:	807b      	strh	r3, [r7, #2]
 8001c84:	4613      	mov	r3, r2
 8001c86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c88:	787b      	ldrb	r3, [r7, #1]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d003      	beq.n	8001c96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	887a      	ldrh	r2, [r7, #2]
 8001c92:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 8001c94:	e002      	b.n	8001c9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BSRRH = GPIO_Pin ;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	887a      	ldrh	r2, [r7, #2]
 8001c9a:	835a      	strh	r2, [r3, #26]
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and creates the associated handle.
  * @param  hlptim: LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr = 0;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	60fb      	str	r3, [r7, #12]

  /* Check the LPTIM handle allocation */
  if(hlptim == NULL)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d101      	bne.n	8001cbe <HAL_LPTIM_Init+0x16>
  {
    return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e07e      	b.n	8001dbc <HAL_LPTIM_Init+0x114>
  }  
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));  
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
  
  if(hlptim->State == HAL_LPTIM_STATE_RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d106      	bne.n	8001cd8 <HAL_LPTIM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware */
    HAL_LPTIM_MspInit(hlptim);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f005 f938 	bl	8006f48 <HAL_LPTIM_MspInit>
  }
  
  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2202      	movs	r2, #2
 8001cdc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	60fb      	str	r3, [r7, #12]
  
  if ((hlptim->Init.Clock.Source) ==  LPTIM_CLOCKSOURCE_ULPTIM)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d103      	bne.n	8001cf8 <HAL_LPTIM_Init+0x50>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f023 031e 	bic.w	r3, r3, #30
 8001cf6:	60fb      	str	r3, [r7, #12]
  }
  if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	695b      	ldr	r3, [r3, #20]
 8001cfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d003      	beq.n	8001d0c <HAL_LPTIM_Init+0x64>
  {
    tmpcfgr &= (uint32_t)(~ (LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8001d04:	68fa      	ldr	r2, [r7, #12]
 8001d06:	4b2f      	ldr	r3, [pc, #188]	; (8001dc4 <HAL_LPTIM_Init+0x11c>)
 8001d08:	4013      	ands	r3, r2
 8001d0a:	60fb      	str	r3, [r7, #12]
  }
    
  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8001d0c:	68fa      	ldr	r2, [r7, #12]
 8001d0e:	4b2e      	ldr	r3, [pc, #184]	; (8001dc8 <HAL_LPTIM_Init+0x120>)
 8001d10:	4013      	ands	r3, r2
 8001d12:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE ));
  
  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001d1c:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8001d22:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8001d28:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8001d2e:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	60fb      	str	r3, [r7, #12]
  
  if ((hlptim->Init.Clock.Source) ==  LPTIM_CLOCKSOURCE_ULPTIM)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d107      	bne.n	8001d4e <HAL_LPTIM_Init+0xa6>
  {
    tmpcfgr |=  (hlptim->Init.UltraLowPowerClock.Polarity |
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |=  (hlptim->Init.UltraLowPowerClock.Polarity |
 8001d46:	4313      	orrs	r3, r2
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	60fb      	str	r3, [r7, #12]
  } 
  
  if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	695b      	ldr	r3, [r3, #20]
 8001d52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d00a      	beq.n	8001d70 <HAL_LPTIM_Init+0xc8>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001d62:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8001d68:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	68fa      	ldr	r2, [r7, #12]
 8001d76:	60da      	str	r2, [r3, #12]

 /* Configure LPTIM input sources */
  if((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a13      	ldr	r2, [pc, #76]	; (8001dcc <HAL_LPTIM_Init+0x124>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d004      	beq.n	8001d8c <HAL_LPTIM_Init+0xe4>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a12      	ldr	r2, [pc, #72]	; (8001dd0 <HAL_LPTIM_Init+0x128>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d108      	bne.n	8001d9e <HAL_LPTIM_Init+0xf6>
    /* Check LPTIM1/2 Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance,hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance,hlptim->Init.Input2Source));
    
    /* Configure LPTIM1/2 Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	625a      	str	r2, [r3, #36]	; 0x24
 8001d9c:	e009      	b.n	8001db2 <HAL_LPTIM_Init+0x10a>
  }
  else
  {
  if(hlptim->Instance == LPTIM3)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a0c      	ldr	r2, [pc, #48]	; (8001dd4 <HAL_LPTIM_Init+0x12c>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d104      	bne.n	8001db2 <HAL_LPTIM_Init+0x10a>
    {
      /* Check LPTIM2 Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance,hlptim->Init.Input1Source));
    
      /* Configure LPTIM2 Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001db0:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }
  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2201      	movs	r2, #1
 8001db6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Return function status */
  return HAL_OK;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3710      	adds	r7, #16
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	ffff1f3f 	.word	0xffff1f3f
 8001dc8:	ff19f1fe 	.word	0xff19f1fe
 8001dcc:	40002400 	.word	0x40002400
 8001dd0:	58002400 	.word	0x58002400
 8001dd4:	58002800 	.word	0x58002800

08001dd8 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim: LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d10d      	bne.n	8001e0a <HAL_LPTIM_IRQHandler+0x32>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f003 0301 	and.w	r3, r3, #1
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d106      	bne.n	8001e0a <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2201      	movs	r2, #1
 8001e02:	605a      	str	r2, [r3, #4]
      
      /* Compare match Callback */
      HAL_LPTIM_CompareMatchCallback(hlptim);      
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f000 f882 	bl	8001f0e <HAL_LPTIM_CompareMatchCallback>
    }
  }
  
  /* Autoreload match interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d10d      	bne.n	8001e34 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d106      	bne.n	8001e34 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	605a      	str	r2, [r3, #4]
      
      /* Autoreload match Callback */
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);      
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 f877 	bl	8001f22 <HAL_LPTIM_AutoReloadMatchCallback>
    }
  }
  
  /* Trigger detected interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0304 	and.w	r3, r3, #4
 8001e3e:	2b04      	cmp	r3, #4
 8001e40:	d10d      	bne.n	8001e5e <HAL_LPTIM_IRQHandler+0x86>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f003 0304 	and.w	r3, r3, #4
 8001e4c:	2b04      	cmp	r3, #4
 8001e4e:	d106      	bne.n	8001e5e <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2204      	movs	r2, #4
 8001e56:	605a      	str	r2, [r3, #4]
      
      /* Trigger detected callback */
      HAL_LPTIM_TriggerCallback(hlptim);      
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 f86c 	bl	8001f36 <HAL_LPTIM_TriggerCallback>
    }
  }
  
  /* Compare write interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0308 	and.w	r3, r3, #8
 8001e68:	2b08      	cmp	r3, #8
 8001e6a:	d10d      	bne.n	8001e88 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 0308 	and.w	r3, r3, #8
 8001e76:	2b08      	cmp	r3, #8
 8001e78:	d106      	bne.n	8001e88 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2208      	movs	r2, #8
 8001e80:	605a      	str	r2, [r3, #4]
      
      /* Compare write Callback */
      HAL_LPTIM_CompareWriteCallback(hlptim);      
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 f861 	bl	8001f4a <HAL_LPTIM_CompareWriteCallback>
    }
  }
  
  /* Autoreload write interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0310 	and.w	r3, r3, #16
 8001e92:	2b10      	cmp	r3, #16
 8001e94:	d10d      	bne.n	8001eb2 <HAL_LPTIM_IRQHandler+0xda>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f003 0310 	and.w	r3, r3, #16
 8001ea0:	2b10      	cmp	r3, #16
 8001ea2:	d106      	bne.n	8001eb2 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2210      	movs	r2, #16
 8001eaa:	605a      	str	r2, [r3, #4]
      
      /* Autoreload write Callback */
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);      
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 f856 	bl	8001f5e <HAL_LPTIM_AutoReloadWriteCallback>
    }
  }
  
  /* Direction counter changed from Down to Up interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0320 	and.w	r3, r3, #32
 8001ebc:	2b20      	cmp	r3, #32
 8001ebe:	d10d      	bne.n	8001edc <HAL_LPTIM_IRQHandler+0x104>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f003 0320 	and.w	r3, r3, #32
 8001eca:	2b20      	cmp	r3, #32
 8001ecc:	d106      	bne.n	8001edc <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2220      	movs	r2, #32
 8001ed4:	605a      	str	r2, [r3, #4]
      
      /* Direction counter changed from Down to Up Callback */
      HAL_LPTIM_DirectionUpCallback(hlptim);      
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 f84b 	bl	8001f72 <HAL_LPTIM_DirectionUpCallback>
    }
  }
  
  /* Direction counter changed from Up to Down interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ee6:	2b40      	cmp	r3, #64	; 0x40
 8001ee8:	d10d      	bne.n	8001f06 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef4:	2b40      	cmp	r3, #64	; 0x40
 8001ef6:	d106      	bne.n	8001f06 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2240      	movs	r2, #64	; 0x40
 8001efe:	605a      	str	r2, [r3, #4]
      
      /* Direction counter changed from Up to Down Callback */
      HAL_LPTIM_DirectionDownCallback(hlptim);      
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 f840 	bl	8001f86 <HAL_LPTIM_DirectionDownCallback>
    }
  }
}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode 
  * @param  hlptim : LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b083      	sub	sp, #12
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */  
}
 8001f16:	bf00      	nop
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode 
  * @param  hlptim : LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001f22:	b480      	push	{r7}
 8001f24:	b083      	sub	sp, #12
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */  
}
 8001f2a:	bf00      	nop
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode 
  * @param  hlptim : LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001f36:	b480      	push	{r7}
 8001f38:	b083      	sub	sp, #12
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */  
}
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr

08001f4a <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode 
  * @param  hlptim : LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	b083      	sub	sp, #12
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */  
}
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr

08001f5e <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode 
  * @param  hlptim : LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	b083      	sub	sp, #12
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */  
}
 8001f66:	bf00      	nop
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode 
  * @param  hlptim : LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001f72:	b480      	push	{r7}
 8001f74:	b083      	sub	sp, #12
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */  
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode 
  * @param  hlptim : LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b083      	sub	sp, #12
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */  
}
 8001f8e:	bf00      	nop
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
	...

08001f9c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b08e      	sub	sp, #56	; 0x38
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	637b      	str	r3, [r7, #52]	; 0x34

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f000 8086 	beq.w	80020c2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001fb6:	4b93      	ldr	r3, [pc, #588]	; (8002204 <HAL_RCC_OscConfig+0x268>)
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001fbe:	2b10      	cmp	r3, #16
 8001fc0:	d00b      	beq.n	8001fda <HAL_RCC_OscConfig+0x3e>
 8001fc2:	4b90      	ldr	r3, [pc, #576]	; (8002204 <HAL_RCC_OscConfig+0x268>)
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001fca:	2b18      	cmp	r3, #24
 8001fcc:	d111      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x56>
 8001fce:	4b8d      	ldr	r3, [pc, #564]	; (8002204 <HAL_RCC_OscConfig+0x268>)
 8001fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd2:	f003 0303 	and.w	r3, r3, #3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d10b      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x56>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fda:	4b8a      	ldr	r3, [pc, #552]	; (8002204 <HAL_RCC_OscConfig+0x268>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d06c      	beq.n	80020c0 <HAL_RCC_OscConfig+0x124>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d168      	bne.n	80020c0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e364      	b.n	80026bc <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ffa:	d106      	bne.n	800200a <HAL_RCC_OscConfig+0x6e>
 8001ffc:	4a81      	ldr	r2, [pc, #516]	; (8002204 <HAL_RCC_OscConfig+0x268>)
 8001ffe:	4b81      	ldr	r3, [pc, #516]	; (8002204 <HAL_RCC_OscConfig+0x268>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002006:	6013      	str	r3, [r2, #0]
 8002008:	e02e      	b.n	8002068 <HAL_RCC_OscConfig+0xcc>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10c      	bne.n	800202c <HAL_RCC_OscConfig+0x90>
 8002012:	4a7c      	ldr	r2, [pc, #496]	; (8002204 <HAL_RCC_OscConfig+0x268>)
 8002014:	4b7b      	ldr	r3, [pc, #492]	; (8002204 <HAL_RCC_OscConfig+0x268>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800201c:	6013      	str	r3, [r2, #0]
 800201e:	4a79      	ldr	r2, [pc, #484]	; (8002204 <HAL_RCC_OscConfig+0x268>)
 8002020:	4b78      	ldr	r3, [pc, #480]	; (8002204 <HAL_RCC_OscConfig+0x268>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002028:	6013      	str	r3, [r2, #0]
 800202a:	e01d      	b.n	8002068 <HAL_RCC_OscConfig+0xcc>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002034:	d10c      	bne.n	8002050 <HAL_RCC_OscConfig+0xb4>
 8002036:	4a73      	ldr	r2, [pc, #460]	; (8002204 <HAL_RCC_OscConfig+0x268>)
 8002038:	4b72      	ldr	r3, [pc, #456]	; (8002204 <HAL_RCC_OscConfig+0x268>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002040:	6013      	str	r3, [r2, #0]
 8002042:	4a70      	ldr	r2, [pc, #448]	; (8002204 <HAL_RCC_OscConfig+0x268>)
 8002044:	4b6f      	ldr	r3, [pc, #444]	; (8002204 <HAL_RCC_OscConfig+0x268>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800204c:	6013      	str	r3, [r2, #0]
 800204e:	e00b      	b.n	8002068 <HAL_RCC_OscConfig+0xcc>
 8002050:	4a6c      	ldr	r2, [pc, #432]	; (8002204 <HAL_RCC_OscConfig+0x268>)
 8002052:	4b6c      	ldr	r3, [pc, #432]	; (8002204 <HAL_RCC_OscConfig+0x268>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800205a:	6013      	str	r3, [r2, #0]
 800205c:	4a69      	ldr	r2, [pc, #420]	; (8002204 <HAL_RCC_OscConfig+0x268>)
 800205e:	4b69      	ldr	r3, [pc, #420]	; (8002204 <HAL_RCC_OscConfig+0x268>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002066:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d013      	beq.n	8002098 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002070:	f7fe f988 	bl	8000384 <HAL_GetTick>
 8002074:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0xee>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002078:	f7fe f984 	bl	8000384 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b64      	cmp	r3, #100	; 0x64
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e318      	b.n	80026bc <HAL_RCC_OscConfig+0x720>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208a:	4b5e      	ldr	r3, [pc, #376]	; (8002204 <HAL_RCC_OscConfig+0x268>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d0f0      	beq.n	8002078 <HAL_RCC_OscConfig+0xdc>
 8002096:	e014      	b.n	80020c2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002098:	f7fe f974 	bl	8000384 <HAL_GetTick>
 800209c:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x116>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020a0:	f7fe f970 	bl	8000384 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b64      	cmp	r3, #100	; 0x64
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e304      	b.n	80026bc <HAL_RCC_OscConfig+0x720>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020b2:	4b54      	ldr	r3, [pc, #336]	; (8002204 <HAL_RCC_OscConfig+0x268>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1f0      	bne.n	80020a0 <HAL_RCC_OscConfig+0x104>
 80020be:	e000      	b.n	80020c2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f000 80a2 	beq.w	8002214 <HAL_RCC_OscConfig+0x278>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80020d0:	4b4c      	ldr	r3, [pc, #304]	; (8002204 <HAL_RCC_OscConfig+0x268>)
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d00b      	beq.n	80020f4 <HAL_RCC_OscConfig+0x158>
 80020dc:	4b49      	ldr	r3, [pc, #292]	; (8002204 <HAL_RCC_OscConfig+0x268>)
 80020de:	691b      	ldr	r3, [r3, #16]
 80020e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020e4:	2b18      	cmp	r3, #24
 80020e6:	d143      	bne.n	8002170 <HAL_RCC_OscConfig+0x1d4>
 80020e8:	4b46      	ldr	r3, [pc, #280]	; (8002204 <HAL_RCC_OscConfig+0x268>)
 80020ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ec:	f003 0303 	and.w	r3, r3, #3
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d13d      	bne.n	8002170 <HAL_RCC_OscConfig+0x1d4>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020f4:	4b43      	ldr	r3, [pc, #268]	; (8002204 <HAL_RCC_OscConfig+0x268>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0304 	and.w	r3, r3, #4
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d005      	beq.n	800210c <HAL_RCC_OscConfig+0x170>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d101      	bne.n	800210c <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e2d7      	b.n	80026bc <HAL_RCC_OscConfig+0x720>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
      /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800210c:	493d      	ldr	r1, [pc, #244]	; (8002204 <HAL_RCC_OscConfig+0x268>)
 800210e:	4b3d      	ldr	r3, [pc, #244]	; (8002204 <HAL_RCC_OscConfig+0x268>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f023 0219 	bic.w	r2, r3, #25
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	4313      	orrs	r3, r2
 800211c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211e:	f7fe f931 	bl	8000384 <HAL_GetTick>
 8002122:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002124:	e008      	b.n	8002138 <HAL_RCC_OscConfig+0x19c>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002126:	f7fe f92d 	bl	8000384 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e2c1      	b.n	80026bc <HAL_RCC_OscConfig+0x720>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002138:	4b32      	ldr	r3, [pc, #200]	; (8002204 <HAL_RCC_OscConfig+0x268>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0304 	and.w	r3, r3, #4
 8002140:	2b00      	cmp	r3, #0
 8002142:	d0f0      	beq.n	8002126 <HAL_RCC_OscConfig+0x18a>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002144:	482f      	ldr	r0, [pc, #188]	; (8002204 <HAL_RCC_OscConfig+0x268>)
 8002146:	4b2f      	ldr	r3, [pc, #188]	; (8002204 <HAL_RCC_OscConfig+0x268>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6919      	ldr	r1, [r3, #16]
 8002152:	f44f 337c 	mov.w	r3, #258048	; 0x3f000
 8002156:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800215a:	fa93 f3a3 	rbit	r3, r3
 800215e:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002162:	fab3 f383 	clz	r3, r3
 8002166:	fa01 f303 	lsl.w	r3, r1, r3
 800216a:	4313      	orrs	r3, r2
 800216c:	6043      	str	r3, [r0, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800216e:	e051      	b.n	8002214 <HAL_RCC_OscConfig+0x278>
    }
    
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d031      	beq.n	80021dc <HAL_RCC_OscConfig+0x240>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002178:	4922      	ldr	r1, [pc, #136]	; (8002204 <HAL_RCC_OscConfig+0x268>)
 800217a:	4b22      	ldr	r3, [pc, #136]	; (8002204 <HAL_RCC_OscConfig+0x268>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f023 0219 	bic.w	r2, r3, #25
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	4313      	orrs	r3, r2
 8002188:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218a:	f7fe f8fb 	bl	8000384 <HAL_GetTick>
 800218e:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002190:	e008      	b.n	80021a4 <HAL_RCC_OscConfig+0x208>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002192:	f7fe f8f7 	bl	8000384 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x208>
          {
            return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e28b      	b.n	80026bc <HAL_RCC_OscConfig+0x720>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a4:	4b17      	ldr	r3, [pc, #92]	; (8002204 <HAL_RCC_OscConfig+0x268>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0304 	and.w	r3, r3, #4
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d0f0      	beq.n	8002192 <HAL_RCC_OscConfig+0x1f6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b0:	4814      	ldr	r0, [pc, #80]	; (8002204 <HAL_RCC_OscConfig+0x268>)
 80021b2:	4b14      	ldr	r3, [pc, #80]	; (8002204 <HAL_RCC_OscConfig+0x268>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6919      	ldr	r1, [r3, #16]
 80021be:	f44f 337c 	mov.w	r3, #258048	; 0x3f000
 80021c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c6:	fa93 f3a3 	rbit	r3, r3
 80021ca:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80021cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ce:	fab3 f383 	clz	r3, r3
 80021d2:	fa01 f303 	lsl.w	r3, r1, r3
 80021d6:	4313      	orrs	r3, r2
 80021d8:	6043      	str	r3, [r0, #4]
 80021da:	e01b      	b.n	8002214 <HAL_RCC_OscConfig+0x278>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021dc:	4a09      	ldr	r2, [pc, #36]	; (8002204 <HAL_RCC_OscConfig+0x268>)
 80021de:	4b09      	ldr	r3, [pc, #36]	; (8002204 <HAL_RCC_OscConfig+0x268>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f023 0301 	bic.w	r3, r3, #1
 80021e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e8:	f7fe f8cc 	bl	8000384 <HAL_GetTick>
 80021ec:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ee:	e00b      	b.n	8002208 <HAL_RCC_OscConfig+0x26c>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021f0:	f7fe f8c8 	bl	8000384 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d904      	bls.n	8002208 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e25c      	b.n	80026bc <HAL_RCC_OscConfig+0x720>
 8002202:	bf00      	nop
 8002204:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002208:	4ba0      	ldr	r3, [pc, #640]	; (800248c <HAL_RCC_OscConfig+0x4f0>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b00      	cmp	r3, #0
 8002212:	d1ed      	bne.n	80021f0 <HAL_RCC_OscConfig+0x254>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0310 	and.w	r3, r3, #16
 800221c:	2b00      	cmp	r3, #0
 800221e:	d07f      	beq.n	8002320 <HAL_RCC_OscConfig+0x384>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_CSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002220:	4b9a      	ldr	r3, [pc, #616]	; (800248c <HAL_RCC_OscConfig+0x4f0>)
 8002222:	691b      	ldr	r3, [r3, #16]
 8002224:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002228:	2b08      	cmp	r3, #8
 800222a:	d00b      	beq.n	8002244 <HAL_RCC_OscConfig+0x2a8>
 800222c:	4b97      	ldr	r3, [pc, #604]	; (800248c <HAL_RCC_OscConfig+0x4f0>)
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002234:	2b18      	cmp	r3, #24
 8002236:	d127      	bne.n	8002288 <HAL_RCC_OscConfig+0x2ec>
 8002238:	4b94      	ldr	r3, [pc, #592]	; (800248c <HAL_RCC_OscConfig+0x4f0>)
 800223a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223c:	f003 0303 	and.w	r3, r3, #3
 8002240:	2b01      	cmp	r3, #1
 8002242:	d121      	bne.n	8002288 <HAL_RCC_OscConfig+0x2ec>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002244:	4b91      	ldr	r3, [pc, #580]	; (800248c <HAL_RCC_OscConfig+0x4f0>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800224c:	2b00      	cmp	r3, #0
 800224e:	d005      	beq.n	800225c <HAL_RCC_OscConfig+0x2c0>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	69db      	ldr	r3, [r3, #28]
 8002254:	2b80      	cmp	r3, #128	; 0x80
 8002256:	d001      	beq.n	800225c <HAL_RCC_OscConfig+0x2c0>
      {
        return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e22f      	b.n	80026bc <HAL_RCC_OscConfig+0x720>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800225c:	488b      	ldr	r0, [pc, #556]	; (800248c <HAL_RCC_OscConfig+0x4f0>)
 800225e:	4b8b      	ldr	r3, [pc, #556]	; (800248c <HAL_RCC_OscConfig+0x4f0>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a19      	ldr	r1, [r3, #32]
 800226a:	f04f 43f8 	mov.w	r3, #2080374784	; 0x7c000000
 800226e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002270:	6a3b      	ldr	r3, [r7, #32]
 8002272:	fa93 f3a3 	rbit	r3, r3
 8002276:	61fb      	str	r3, [r7, #28]
  return(result);
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	fab3 f383 	clz	r3, r3
 800227e:	fa01 f303 	lsl.w	r3, r1, r3
 8002282:	4313      	orrs	r3, r2
 8002284:	6043      	str	r3, [r0, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002286:	e04b      	b.n	8002320 <HAL_RCC_OscConfig+0x384>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	69db      	ldr	r3, [r3, #28]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d02e      	beq.n	80022ee <HAL_RCC_OscConfig+0x352>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002290:	4a7e      	ldr	r2, [pc, #504]	; (800248c <HAL_RCC_OscConfig+0x4f0>)
 8002292:	4b7e      	ldr	r3, [pc, #504]	; (800248c <HAL_RCC_OscConfig+0x4f0>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800229a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800229c:	f7fe f872 	bl	8000384 <HAL_GetTick>
 80022a0:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x31a>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80022a4:	f7fe f86e 	bl	8000384 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e202      	b.n	80026bc <HAL_RCC_OscConfig+0x720>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
 80022b6:	4b75      	ldr	r3, [pc, #468]	; (800248c <HAL_RCC_OscConfig+0x4f0>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d0f0      	beq.n	80022a4 <HAL_RCC_OscConfig+0x308>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80022c2:	4872      	ldr	r0, [pc, #456]	; (800248c <HAL_RCC_OscConfig+0x4f0>)
 80022c4:	4b71      	ldr	r3, [pc, #452]	; (800248c <HAL_RCC_OscConfig+0x4f0>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a19      	ldr	r1, [r3, #32]
 80022d0:	f04f 43f8 	mov.w	r3, #2080374784	; 0x7c000000
 80022d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	fa93 f3a3 	rbit	r3, r3
 80022dc:	617b      	str	r3, [r7, #20]
  return(result);
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	fab3 f383 	clz	r3, r3
 80022e4:	fa01 f303 	lsl.w	r3, r1, r3
 80022e8:	4313      	orrs	r3, r2
 80022ea:	6043      	str	r3, [r0, #4]
 80022ec:	e018      	b.n	8002320 <HAL_RCC_OscConfig+0x384>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80022ee:	4a67      	ldr	r2, [pc, #412]	; (800248c <HAL_RCC_OscConfig+0x4f0>)
 80022f0:	4b66      	ldr	r3, [pc, #408]	; (800248c <HAL_RCC_OscConfig+0x4f0>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fa:	f7fe f843 	bl	8000384 <HAL_GetTick>
 80022fe:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
 8002300:	e008      	b.n	8002314 <HAL_RCC_OscConfig+0x378>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002302:	f7fe f83f 	bl	8000384 <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d901      	bls.n	8002314 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e1d3      	b.n	80026bc <HAL_RCC_OscConfig+0x720>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
 8002314:	4b5d      	ldr	r3, [pc, #372]	; (800248c <HAL_RCC_OscConfig+0x4f0>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800231c:	2b00      	cmp	r3, #0
 800231e:	d1f0      	bne.n	8002302 <HAL_RCC_OscConfig+0x366>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0308 	and.w	r3, r3, #8
 8002328:	2b00      	cmp	r3, #0
 800232a:	d036      	beq.n	800239a <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	695b      	ldr	r3, [r3, #20]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d019      	beq.n	8002368 <HAL_RCC_OscConfig+0x3cc>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002334:	4a55      	ldr	r2, [pc, #340]	; (800248c <HAL_RCC_OscConfig+0x4f0>)
 8002336:	4b55      	ldr	r3, [pc, #340]	; (800248c <HAL_RCC_OscConfig+0x4f0>)
 8002338:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800233a:	f043 0301 	orr.w	r3, r3, #1
 800233e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002340:	f7fe f820 	bl	8000384 <HAL_GetTick>
 8002344:	6378      	str	r0, [r7, #52]	; 0x34

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0x3be>
      {
        if((int32_t) (HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002348:	f7fe f81c 	bl	8000384 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e1b0      	b.n	80026bc <HAL_RCC_OscConfig+0x720>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800235a:	4b4c      	ldr	r3, [pc, #304]	; (800248c <HAL_RCC_OscConfig+0x4f0>)
 800235c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0f0      	beq.n	8002348 <HAL_RCC_OscConfig+0x3ac>
 8002366:	e018      	b.n	800239a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002368:	4a48      	ldr	r2, [pc, #288]	; (800248c <HAL_RCC_OscConfig+0x4f0>)
 800236a:	4b48      	ldr	r3, [pc, #288]	; (800248c <HAL_RCC_OscConfig+0x4f0>)
 800236c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800236e:	f023 0301 	bic.w	r3, r3, #1
 8002372:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002374:	f7fe f806 	bl	8000384 <HAL_GetTick>
 8002378:	6378      	str	r0, [r7, #52]	; 0x34

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x3f2>
      {
        if((int32_t) (HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800237c:	f7fe f802 	bl	8000384 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x3f2>
        {
          return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e196      	b.n	80026bc <HAL_RCC_OscConfig+0x720>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800238e:	4b3f      	ldr	r3, [pc, #252]	; (800248c <HAL_RCC_OscConfig+0x4f0>)
 8002390:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1f0      	bne.n	800237c <HAL_RCC_OscConfig+0x3e0>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0320 	and.w	r3, r3, #32
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d036      	beq.n	8002414 <HAL_RCC_OscConfig+0x478>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
    
    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d019      	beq.n	80023e2 <HAL_RCC_OscConfig+0x446>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80023ae:	4a37      	ldr	r2, [pc, #220]	; (800248c <HAL_RCC_OscConfig+0x4f0>)
 80023b0:	4b36      	ldr	r3, [pc, #216]	; (800248c <HAL_RCC_OscConfig+0x4f0>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023b8:	6013      	str	r3, [r2, #0]
      
      /* Get time-out */
      tickstart = HAL_GetTick();
 80023ba:	f7fd ffe3 	bl	8000384 <HAL_GetTick>
 80023be:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till HSI48 is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80023c0:	e008      	b.n	80023d4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80023c2:	f7fd ffdf 	bl	8000384 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e173      	b.n	80026bc <HAL_RCC_OscConfig+0x720>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80023d4:	4b2d      	ldr	r3, [pc, #180]	; (800248c <HAL_RCC_OscConfig+0x4f0>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d0f0      	beq.n	80023c2 <HAL_RCC_OscConfig+0x426>
 80023e0:	e018      	b.n	8002414 <HAL_RCC_OscConfig+0x478>
      } 
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80023e2:	4a2a      	ldr	r2, [pc, #168]	; (800248c <HAL_RCC_OscConfig+0x4f0>)
 80023e4:	4b29      	ldr	r3, [pc, #164]	; (800248c <HAL_RCC_OscConfig+0x4f0>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023ec:	6013      	str	r3, [r2, #0]
      
      /* Get time-out */
      tickstart = HAL_GetTick();
 80023ee:	f7fd ffc9 	bl	8000384 <HAL_GetTick>
 80023f2:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till HSI48 is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80023f4:	e008      	b.n	8002408 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80023f6:	f7fd ffc5 	bl	8000384 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d901      	bls.n	8002408 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e159      	b.n	80026bc <HAL_RCC_OscConfig+0x720>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002408:	4b20      	ldr	r3, [pc, #128]	; (800248c <HAL_RCC_OscConfig+0x4f0>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1f0      	bne.n	80023f6 <HAL_RCC_OscConfig+0x45a>
        }      
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0304 	and.w	r3, r3, #4
 800241c:	2b00      	cmp	r3, #0
 800241e:	f000 8085 	beq.w	800252c <HAL_RCC_OscConfig+0x590>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002422:	4a1b      	ldr	r2, [pc, #108]	; (8002490 <HAL_RCC_OscConfig+0x4f4>)
 8002424:	4b1a      	ldr	r3, [pc, #104]	; (8002490 <HAL_RCC_OscConfig+0x4f4>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800242c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800242e:	f7fd ffa9 	bl	8000384 <HAL_GetTick>
 8002432:	6378      	str	r0, [r7, #52]	; 0x34

    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002434:	e008      	b.n	8002448 <HAL_RCC_OscConfig+0x4ac>
    {
      if((int32_t) (HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002436:	f7fd ffa5 	bl	8000384 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b64      	cmp	r3, #100	; 0x64
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x4ac>
      {
        return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e139      	b.n	80026bc <HAL_RCC_OscConfig+0x720>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002448:	4b11      	ldr	r3, [pc, #68]	; (8002490 <HAL_RCC_OscConfig+0x4f4>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002450:	2b00      	cmp	r3, #0
 8002452:	d0f0      	beq.n	8002436 <HAL_RCC_OscConfig+0x49a>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d106      	bne.n	800246a <HAL_RCC_OscConfig+0x4ce>
 800245c:	4a0b      	ldr	r2, [pc, #44]	; (800248c <HAL_RCC_OscConfig+0x4f0>)
 800245e:	4b0b      	ldr	r3, [pc, #44]	; (800248c <HAL_RCC_OscConfig+0x4f0>)
 8002460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002462:	f043 0301 	orr.w	r3, r3, #1
 8002466:	6713      	str	r3, [r2, #112]	; 0x70
 8002468:	e031      	b.n	80024ce <HAL_RCC_OscConfig+0x532>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d110      	bne.n	8002494 <HAL_RCC_OscConfig+0x4f8>
 8002472:	4a06      	ldr	r2, [pc, #24]	; (800248c <HAL_RCC_OscConfig+0x4f0>)
 8002474:	4b05      	ldr	r3, [pc, #20]	; (800248c <HAL_RCC_OscConfig+0x4f0>)
 8002476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002478:	f023 0301 	bic.w	r3, r3, #1
 800247c:	6713      	str	r3, [r2, #112]	; 0x70
 800247e:	4a03      	ldr	r2, [pc, #12]	; (800248c <HAL_RCC_OscConfig+0x4f0>)
 8002480:	4b02      	ldr	r3, [pc, #8]	; (800248c <HAL_RCC_OscConfig+0x4f0>)
 8002482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002484:	f023 0304 	bic.w	r3, r3, #4
 8002488:	6713      	str	r3, [r2, #112]	; 0x70
 800248a:	e020      	b.n	80024ce <HAL_RCC_OscConfig+0x532>
 800248c:	58024400 	.word	0x58024400
 8002490:	58024800 	.word	0x58024800
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	2b05      	cmp	r3, #5
 800249a:	d10c      	bne.n	80024b6 <HAL_RCC_OscConfig+0x51a>
 800249c:	4a89      	ldr	r2, [pc, #548]	; (80026c4 <HAL_RCC_OscConfig+0x728>)
 800249e:	4b89      	ldr	r3, [pc, #548]	; (80026c4 <HAL_RCC_OscConfig+0x728>)
 80024a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a2:	f043 0304 	orr.w	r3, r3, #4
 80024a6:	6713      	str	r3, [r2, #112]	; 0x70
 80024a8:	4a86      	ldr	r2, [pc, #536]	; (80026c4 <HAL_RCC_OscConfig+0x728>)
 80024aa:	4b86      	ldr	r3, [pc, #536]	; (80026c4 <HAL_RCC_OscConfig+0x728>)
 80024ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ae:	f043 0301 	orr.w	r3, r3, #1
 80024b2:	6713      	str	r3, [r2, #112]	; 0x70
 80024b4:	e00b      	b.n	80024ce <HAL_RCC_OscConfig+0x532>
 80024b6:	4a83      	ldr	r2, [pc, #524]	; (80026c4 <HAL_RCC_OscConfig+0x728>)
 80024b8:	4b82      	ldr	r3, [pc, #520]	; (80026c4 <HAL_RCC_OscConfig+0x728>)
 80024ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024bc:	f023 0301 	bic.w	r3, r3, #1
 80024c0:	6713      	str	r3, [r2, #112]	; 0x70
 80024c2:	4a80      	ldr	r2, [pc, #512]	; (80026c4 <HAL_RCC_OscConfig+0x728>)
 80024c4:	4b7f      	ldr	r3, [pc, #508]	; (80026c4 <HAL_RCC_OscConfig+0x728>)
 80024c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c8:	f023 0304 	bic.w	r3, r3, #4
 80024cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d015      	beq.n	8002502 <HAL_RCC_OscConfig+0x566>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d6:	f7fd ff55 	bl	8000384 <HAL_GetTick>
 80024da:	6378      	str	r0, [r7, #52]	; 0x34

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024dc:	e00a      	b.n	80024f4 <HAL_RCC_OscConfig+0x558>
      {
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024de:	f7fd ff51 	bl	8000384 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x558>
        {
          return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e0e3      	b.n	80026bc <HAL_RCC_OscConfig+0x720>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024f4:	4b73      	ldr	r3, [pc, #460]	; (80026c4 <HAL_RCC_OscConfig+0x728>)
 80024f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d0ee      	beq.n	80024de <HAL_RCC_OscConfig+0x542>
 8002500:	e014      	b.n	800252c <HAL_RCC_OscConfig+0x590>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002502:	f7fd ff3f 	bl	8000384 <HAL_GetTick>
 8002506:	6378      	str	r0, [r7, #52]	; 0x34

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002508:	e00a      	b.n	8002520 <HAL_RCC_OscConfig+0x584>
      {
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800250a:	f7fd ff3b 	bl	8000384 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	f241 3288 	movw	r2, #5000	; 0x1388
 8002518:	4293      	cmp	r3, r2
 800251a:	d901      	bls.n	8002520 <HAL_RCC_OscConfig+0x584>
        {
          return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e0cd      	b.n	80026bc <HAL_RCC_OscConfig+0x720>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002520:	4b68      	ldr	r3, [pc, #416]	; (80026c4 <HAL_RCC_OscConfig+0x728>)
 8002522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d1ee      	bne.n	800250a <HAL_RCC_OscConfig+0x56e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002530:	2b00      	cmp	r3, #0
 8002532:	f000 80c2 	beq.w	80026ba <HAL_RCC_OscConfig+0x71e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002536:	4b63      	ldr	r3, [pc, #396]	; (80026c4 <HAL_RCC_OscConfig+0x728>)
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800253e:	2b18      	cmp	r3, #24
 8002540:	f000 80b9 	beq.w	80026b6 <HAL_RCC_OscConfig+0x71a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002548:	2b02      	cmp	r3, #2
 800254a:	f040 809a 	bne.w	8002682 <HAL_RCC_OscConfig+0x6e6>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800254e:	4a5d      	ldr	r2, [pc, #372]	; (80026c4 <HAL_RCC_OscConfig+0x728>)
 8002550:	4b5c      	ldr	r3, [pc, #368]	; (80026c4 <HAL_RCC_OscConfig+0x728>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002558:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255a:	f7fd ff13 	bl	8000384 <HAL_GetTick>
 800255e:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002560:	e008      	b.n	8002574 <HAL_RCC_OscConfig+0x5d8>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002562:	f7fd ff0f 	bl	8000384 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e0a3      	b.n	80026bc <HAL_RCC_OscConfig+0x720>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002574:	4b53      	ldr	r3, [pc, #332]	; (80026c4 <HAL_RCC_OscConfig+0x728>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d1f0      	bne.n	8002562 <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002580:	4850      	ldr	r0, [pc, #320]	; (80026c4 <HAL_RCC_OscConfig+0x728>)
 8002582:	4b50      	ldr	r3, [pc, #320]	; (80026c4 <HAL_RCC_OscConfig+0x728>)
 8002584:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002586:	4b50      	ldr	r3, [pc, #320]	; (80026c8 <HAL_RCC_OscConfig+0x72c>)
 8002588:	4013      	ands	r3, r2
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002592:	0112      	lsls	r2, r2, #4
 8002594:	430a      	orrs	r2, r1
 8002596:	4313      	orrs	r3, r2
 8002598:	6283      	str	r3, [r0, #40]	; 0x28
 800259a:	494a      	ldr	r1, [pc, #296]	; (80026c4 <HAL_RCC_OscConfig+0x728>)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a0:	3b01      	subs	r3, #1
 80025a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025aa:	3b01      	subs	r3, #1
 80025ac:	025b      	lsls	r3, r3, #9
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	431a      	orrs	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b6:	3b01      	subs	r3, #1
 80025b8:	041b      	lsls	r3, r3, #16
 80025ba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80025be:	431a      	orrs	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c4:	3b01      	subs	r3, #1
 80025c6:	061b      	lsls	r3, r3, #24
 80025c8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80025cc:	4313      	orrs	r3, r2
 80025ce:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Configure PLL  PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80025d0:	483c      	ldr	r0, [pc, #240]	; (80026c4 <HAL_RCC_OscConfig+0x728>)
 80025d2:	4b3c      	ldr	r3, [pc, #240]	; (80026c4 <HAL_RCC_OscConfig+0x728>)
 80025d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025d6:	4b3d      	ldr	r3, [pc, #244]	; (80026cc <HAL_RCC_OscConfig+0x730>)
 80025d8:	4013      	ands	r3, r2
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80025de:	f64f 72f8 	movw	r2, #65528	; 0xfff8
 80025e2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	fa92 f2a2 	rbit	r2, r2
 80025ea:	60fa      	str	r2, [r7, #12]
  return(result);
 80025ec:	68fa      	ldr	r2, [r7, #12]
 80025ee:	fab2 f282 	clz	r2, r2
 80025f2:	fa01 f202 	lsl.w	r2, r1, r2
 80025f6:	4313      	orrs	r3, r2
 80025f8:	6343      	str	r3, [r0, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */ 
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80025fa:	4932      	ldr	r1, [pc, #200]	; (80026c4 <HAL_RCC_OscConfig+0x728>)
 80025fc:	4b31      	ldr	r3, [pc, #196]	; (80026c4 <HAL_RCC_OscConfig+0x728>)
 80025fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002600:	f023 020c 	bic.w	r2, r3, #12
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002608:	4313      	orrs	r3, r2
 800260a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800260c:	492d      	ldr	r1, [pc, #180]	; (80026c4 <HAL_RCC_OscConfig+0x728>)
 800260e:	4b2d      	ldr	r3, [pc, #180]	; (80026c4 <HAL_RCC_OscConfig+0x728>)
 8002610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002612:	f023 0202 	bic.w	r2, r3, #2
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261a:	4313      	orrs	r3, r2
 800261c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800261e:	4a29      	ldr	r2, [pc, #164]	; (80026c4 <HAL_RCC_OscConfig+0x728>)
 8002620:	4b28      	ldr	r3, [pc, #160]	; (80026c4 <HAL_RCC_OscConfig+0x728>)
 8002622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002624:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002628:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800262a:	4a26      	ldr	r2, [pc, #152]	; (80026c4 <HAL_RCC_OscConfig+0x728>)
 800262c:	4b25      	ldr	r3, [pc, #148]	; (80026c4 <HAL_RCC_OscConfig+0x728>)
 800262e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002634:	62d3      	str	r3, [r2, #44]	; 0x2c
 
        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002636:	4a23      	ldr	r2, [pc, #140]	; (80026c4 <HAL_RCC_OscConfig+0x728>)
 8002638:	4b22      	ldr	r3, [pc, #136]	; (80026c4 <HAL_RCC_OscConfig+0x728>)
 800263a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002640:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002642:	4a20      	ldr	r2, [pc, #128]	; (80026c4 <HAL_RCC_OscConfig+0x728>)
 8002644:	4b1f      	ldr	r3, [pc, #124]	; (80026c4 <HAL_RCC_OscConfig+0x728>)
 8002646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002648:	f043 0301 	orr.w	r3, r3, #1
 800264c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800264e:	4a1d      	ldr	r2, [pc, #116]	; (80026c4 <HAL_RCC_OscConfig+0x728>)
 8002650:	4b1c      	ldr	r3, [pc, #112]	; (80026c4 <HAL_RCC_OscConfig+0x728>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002658:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800265a:	f7fd fe93 	bl	8000384 <HAL_GetTick>
 800265e:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002660:	e008      	b.n	8002674 <HAL_RCC_OscConfig+0x6d8>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002662:	f7fd fe8f 	bl	8000384 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x6d8>
          {
            return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e023      	b.n	80026bc <HAL_RCC_OscConfig+0x720>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002674:	4b13      	ldr	r3, [pc, #76]	; (80026c4 <HAL_RCC_OscConfig+0x728>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d0f0      	beq.n	8002662 <HAL_RCC_OscConfig+0x6c6>
 8002680:	e01b      	b.n	80026ba <HAL_RCC_OscConfig+0x71e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002682:	4a10      	ldr	r2, [pc, #64]	; (80026c4 <HAL_RCC_OscConfig+0x728>)
 8002684:	4b0f      	ldr	r3, [pc, #60]	; (80026c4 <HAL_RCC_OscConfig+0x728>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800268c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800268e:	f7fd fe79 	bl	8000384 <HAL_GetTick>
 8002692:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002694:	e008      	b.n	80026a8 <HAL_RCC_OscConfig+0x70c>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002696:	f7fd fe75 	bl	8000384 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x70c>
          {
            return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e009      	b.n	80026bc <HAL_RCC_OscConfig+0x720>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026a8:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <HAL_RCC_OscConfig+0x728>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1f0      	bne.n	8002696 <HAL_RCC_OscConfig+0x6fa>
 80026b4:	e001      	b.n	80026ba <HAL_RCC_OscConfig+0x71e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e000      	b.n	80026bc <HAL_RCC_OscConfig+0x720>
    }
  }
  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3738      	adds	r7, #56	; 0x38
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	58024400 	.word	0x58024400
 80026c8:	fffffc0c 	.word	0xfffffc0c
 80026cc:	ffff0007 	.word	0xffff0007

080026d0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b086      	sub	sp, #24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80026da:	2300      	movs	r3, #0
 80026dc:	617b      	str	r3, [r7, #20]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80026de:	4b9d      	ldr	r3, [pc, #628]	; (8002954 <HAL_RCC_ClockConfig+0x284>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0207 	and.w	r2, r3, #7
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d210      	bcs.n	800270e <HAL_RCC_ClockConfig+0x3e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ec:	4999      	ldr	r1, [pc, #612]	; (8002954 <HAL_RCC_ClockConfig+0x284>)
 80026ee:	4b99      	ldr	r3, [pc, #612]	; (8002954 <HAL_RCC_ClockConfig+0x284>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f023 0207 	bic.w	r2, r3, #7
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80026fc:	4b95      	ldr	r3, [pc, #596]	; (8002954 <HAL_RCC_ClockConfig+0x284>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0207 	and.w	r2, r3, #7
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	429a      	cmp	r2, r3
 8002708:	d001      	beq.n	800270e <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e11d      	b.n	800294a <HAL_RCC_ClockConfig+0x27a>
    }

  }
   /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d008      	beq.n	800272c <HAL_RCC_ClockConfig+0x5c>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800271a:	498f      	ldr	r1, [pc, #572]	; (8002958 <HAL_RCC_ClockConfig+0x288>)
 800271c:	4b8e      	ldr	r3, [pc, #568]	; (8002958 <HAL_RCC_ClockConfig+0x288>)
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	f023 020f 	bic.w	r2, r3, #15
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	4313      	orrs	r3, r2
 800272a:	618b      	str	r3, [r1, #24]
    }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	2b00      	cmp	r3, #0
 8002736:	f000 8097 	beq.w	8002868 <HAL_RCC_ClockConfig+0x198>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800273a:	4987      	ldr	r1, [pc, #540]	; (8002958 <HAL_RCC_ClockConfig+0x288>)
 800273c:	4b86      	ldr	r3, [pc, #536]	; (8002958 <HAL_RCC_ClockConfig+0x288>)
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	4313      	orrs	r3, r2
 800274a:	618b      	str	r3, [r1, #24]
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	2b02      	cmp	r3, #2
 8002752:	d107      	bne.n	8002764 <HAL_RCC_ClockConfig+0x94>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002754:	4b80      	ldr	r3, [pc, #512]	; (8002958 <HAL_RCC_ClockConfig+0x288>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d121      	bne.n	80027a4 <HAL_RCC_ClockConfig+0xd4>
        {
          return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e0f2      	b.n	800294a <HAL_RCC_ClockConfig+0x27a>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	2b03      	cmp	r3, #3
 800276a:	d107      	bne.n	800277c <HAL_RCC_ClockConfig+0xac>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800276c:	4b7a      	ldr	r3, [pc, #488]	; (8002958 <HAL_RCC_ClockConfig+0x288>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d115      	bne.n	80027a4 <HAL_RCC_ClockConfig+0xd4>
        {
          return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e0e6      	b.n	800294a <HAL_RCC_ClockConfig+0x27a>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d107      	bne.n	8002794 <HAL_RCC_ClockConfig+0xc4>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
 8002784:	4b74      	ldr	r3, [pc, #464]	; (8002958 <HAL_RCC_ClockConfig+0x288>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800278c:	2b00      	cmp	r3, #0
 800278e:	d109      	bne.n	80027a4 <HAL_RCC_ClockConfig+0xd4>
        {
          return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e0da      	b.n	800294a <HAL_RCC_ClockConfig+0x27a>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002794:	4b70      	ldr	r3, [pc, #448]	; (8002958 <HAL_RCC_ClockConfig+0x288>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0304 	and.w	r3, r3, #4
 800279c:	2b00      	cmp	r3, #0
 800279e:	d101      	bne.n	80027a4 <HAL_RCC_ClockConfig+0xd4>
        {
          return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e0d2      	b.n	800294a <HAL_RCC_ClockConfig+0x27a>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027a4:	496c      	ldr	r1, [pc, #432]	; (8002958 <HAL_RCC_ClockConfig+0x288>)
 80027a6:	4b6c      	ldr	r3, [pc, #432]	; (8002958 <HAL_RCC_ClockConfig+0x288>)
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	f023 0207 	bic.w	r2, r3, #7
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b6:	f7fd fde5 	bl	8000384 <HAL_GetTick>
 80027ba:	6178      	str	r0, [r7, #20]

      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d112      	bne.n	80027ea <HAL_RCC_ClockConfig+0x11a>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 80027c4:	e00a      	b.n	80027dc <HAL_RCC_ClockConfig+0x10c>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027c6:	f7fd fddd 	bl	8000384 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_ClockConfig+0x10c>
          {
            return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e0b6      	b.n	800294a <HAL_RCC_ClockConfig+0x27a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 80027dc:	4b5e      	ldr	r3, [pc, #376]	; (8002958 <HAL_RCC_ClockConfig+0x288>)
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027e4:	2b10      	cmp	r3, #16
 80027e6:	d1ee      	bne.n	80027c6 <HAL_RCC_ClockConfig+0xf6>
 80027e8:	e03e      	b.n	8002868 <HAL_RCC_ClockConfig+0x198>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	2b03      	cmp	r3, #3
 80027f0:	d112      	bne.n	8002818 <HAL_RCC_ClockConfig+0x148>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80027f2:	e00a      	b.n	800280a <HAL_RCC_ClockConfig+0x13a>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027f4:	f7fd fdc6 	bl	8000384 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002802:	4293      	cmp	r3, r2
 8002804:	d901      	bls.n	800280a <HAL_RCC_ClockConfig+0x13a>
          {
            return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e09f      	b.n	800294a <HAL_RCC_ClockConfig+0x27a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800280a:	4b53      	ldr	r3, [pc, #332]	; (8002958 <HAL_RCC_ClockConfig+0x288>)
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002812:	2b18      	cmp	r3, #24
 8002814:	d1ee      	bne.n	80027f4 <HAL_RCC_ClockConfig+0x124>
 8002816:	e027      	b.n	8002868 <HAL_RCC_ClockConfig+0x198>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d11d      	bne.n	800285c <HAL_RCC_ClockConfig+0x18c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_CSI)
 8002820:	e00a      	b.n	8002838 <HAL_RCC_ClockConfig+0x168>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002822:	f7fd fdaf 	bl	8000384 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002830:	4293      	cmp	r3, r2
 8002832:	d901      	bls.n	8002838 <HAL_RCC_ClockConfig+0x168>
          {
            return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e088      	b.n	800294a <HAL_RCC_ClockConfig+0x27a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_CSI)
 8002838:	4b47      	ldr	r3, [pc, #284]	; (8002958 <HAL_RCC_ClockConfig+0x288>)
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002840:	2b08      	cmp	r3, #8
 8002842:	d1ee      	bne.n	8002822 <HAL_RCC_ClockConfig+0x152>
 8002844:	e010      	b.n	8002868 <HAL_RCC_ClockConfig+0x198>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002846:	f7fd fd9d 	bl	8000384 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	f241 3288 	movw	r2, #5000	; 0x1388
 8002854:	4293      	cmp	r3, r2
 8002856:	d901      	bls.n	800285c <HAL_RCC_ClockConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e076      	b.n	800294a <HAL_RCC_ClockConfig+0x27a>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 800285c:	4b3e      	ldr	r3, [pc, #248]	; (8002958 <HAL_RCC_ClockConfig+0x288>)
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002864:	2b00      	cmp	r3, #0
 8002866:	d1ee      	bne.n	8002846 <HAL_RCC_ClockConfig+0x176>
        }
      }
    }
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002868:	4b3a      	ldr	r3, [pc, #232]	; (8002954 <HAL_RCC_ClockConfig+0x284>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0207 	and.w	r2, r3, #7
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	429a      	cmp	r2, r3
 8002874:	d910      	bls.n	8002898 <HAL_RCC_ClockConfig+0x1c8>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002876:	4937      	ldr	r1, [pc, #220]	; (8002954 <HAL_RCC_ClockConfig+0x284>)
 8002878:	4b36      	ldr	r3, [pc, #216]	; (8002954 <HAL_RCC_ClockConfig+0x284>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f023 0207 	bic.w	r2, r3, #7
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	4313      	orrs	r3, r2
 8002884:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002886:	4b33      	ldr	r3, [pc, #204]	; (8002954 <HAL_RCC_ClockConfig+0x284>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0207 	and.w	r2, r3, #7
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	429a      	cmp	r2, r3
 8002892:	d001      	beq.n	8002898 <HAL_RCC_ClockConfig+0x1c8>
    {
      return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e058      	b.n	800294a <HAL_RCC_ClockConfig+0x27a>
    }
 }

  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0304 	and.w	r3, r3, #4
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d008      	beq.n	80028b6 <HAL_RCC_ClockConfig+0x1e6>
  {
    assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80028a4:	492c      	ldr	r1, [pc, #176]	; (8002958 <HAL_RCC_ClockConfig+0x288>)
 80028a6:	4b2c      	ldr	r3, [pc, #176]	; (8002958 <HAL_RCC_ClockConfig+0x288>)
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	618b      	str	r3, [r1, #24]
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0308 	and.w	r3, r3, #8
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d008      	beq.n	80028d4 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80028c2:	4925      	ldr	r1, [pc, #148]	; (8002958 <HAL_RCC_ClockConfig+0x288>)
 80028c4:	4b24      	ldr	r3, [pc, #144]	; (8002958 <HAL_RCC_ClockConfig+0x288>)
 80028c6:	69db      	ldr	r3, [r3, #28]
 80028c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	61cb      	str	r3, [r1, #28]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0310 	and.w	r3, r3, #16
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d008      	beq.n	80028f2 <HAL_RCC_ClockConfig+0x222>
  {
    assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80028e0:	491d      	ldr	r1, [pc, #116]	; (8002958 <HAL_RCC_ClockConfig+0x288>)
 80028e2:	4b1d      	ldr	r3, [pc, #116]	; (8002958 <HAL_RCC_ClockConfig+0x288>)
 80028e4:	69db      	ldr	r3, [r3, #28]
 80028e6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	61cb      	str	r3, [r1, #28]
  }


  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0320 	and.w	r3, r3, #32
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d008      	beq.n	8002910 <HAL_RCC_ClockConfig+0x240>
  {
    assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
    MODIFY_REG(RCC->D3CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB4CLKDivider) );
 80028fe:	4916      	ldr	r1, [pc, #88]	; (8002958 <HAL_RCC_ClockConfig+0x288>)
 8002900:	4b15      	ldr	r3, [pc, #84]	; (8002958 <HAL_RCC_ClockConfig+0x288>)
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	69db      	ldr	r3, [r3, #28]
 800290c:	4313      	orrs	r3, r2
 800290e:	620b      	str	r3, [r1, #32]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> POSITION_VAL(RCC_D1CFGR_D1CPRE_0)];
 8002910:	f000 f828 	bl	8002964 <HAL_RCC_GetSysClockFreq>
 8002914:	4601      	mov	r1, r0
 8002916:	4b10      	ldr	r3, [pc, #64]	; (8002958 <HAL_RCC_ClockConfig+0x288>)
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800291e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002922:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	fa93 f3a3 	rbit	r3, r3
 800292a:	60fb      	str	r3, [r7, #12]
  return(result);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	fab3 f383 	clz	r3, r3
 8002932:	fa22 f303 	lsr.w	r3, r2, r3
 8002936:	4a09      	ldr	r2, [pc, #36]	; (800295c <HAL_RCC_ClockConfig+0x28c>)
 8002938:	5cd3      	ldrb	r3, [r2, r3]
 800293a:	fa21 f303 	lsr.w	r3, r1, r3
 800293e:	4a08      	ldr	r2, [pc, #32]	; (8002960 <HAL_RCC_ClockConfig+0x290>)
 8002940:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002942:	2000      	movs	r0, #0
 8002944:	f7fd fcda 	bl	80002fc <HAL_InitTick>

  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3718      	adds	r7, #24
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	52002000 	.word	0x52002000
 8002958:	58024400 	.word	0x58024400
 800295c:	080076d0 	.word	0x080076d0
 8002960:	2000000c 	.word	0x2000000c

08002964 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002964:	b480      	push	{r7}
 8002966:	b089      	sub	sp, #36	; 0x24
 8002968:	af00      	add	r7, sp, #0
 uint32_t pllp = 1, pllsource = 0, pllm = 1 ,pllfracen =0 , hsivalue = 0;
 800296a:	2301      	movs	r3, #1
 800296c:	617b      	str	r3, [r7, #20]
 800296e:	2300      	movs	r3, #0
 8002970:	613b      	str	r3, [r7, #16]
 8002972:	2301      	movs	r3, #1
 8002974:	60fb      	str	r3, [r7, #12]
 8002976:	2300      	movs	r3, #0
 8002978:	60bb      	str	r3, [r7, #8]
 800297a:	2300      	movs	r3, #0
 800297c:	607b      	str	r3, [r7, #4]
 float fracn1=0, pllvco = 0;
 800297e:	f04f 0300 	mov.w	r3, #0
 8002982:	603b      	str	r3, [r7, #0]
 8002984:	f04f 0300 	mov.w	r3, #0
 8002988:	61fb      	str	r3, [r7, #28]
 uint32_t sysclockfreq = 0;
 800298a:	2300      	movs	r3, #0
 800298c:	61bb      	str	r3, [r7, #24]
  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800298e:	4ba8      	ldr	r3, [pc, #672]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002996:	2b18      	cmp	r3, #24
 8002998:	f200 813f 	bhi.w	8002c1a <HAL_RCC_GetSysClockFreq+0x2b6>
 800299c:	a201      	add	r2, pc, #4	; (adr r2, 80029a4 <HAL_RCC_GetSysClockFreq+0x40>)
 800299e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029a2:	bf00      	nop
 80029a4:	08002a09 	.word	0x08002a09
 80029a8:	08002c1b 	.word	0x08002c1b
 80029ac:	08002c1b 	.word	0x08002c1b
 80029b0:	08002c1b 	.word	0x08002c1b
 80029b4:	08002c1b 	.word	0x08002c1b
 80029b8:	08002c1b 	.word	0x08002c1b
 80029bc:	08002c1b 	.word	0x08002c1b
 80029c0:	08002c1b 	.word	0x08002c1b
 80029c4:	08002a2f 	.word	0x08002a2f
 80029c8:	08002c1b 	.word	0x08002c1b
 80029cc:	08002c1b 	.word	0x08002c1b
 80029d0:	08002c1b 	.word	0x08002c1b
 80029d4:	08002c1b 	.word	0x08002c1b
 80029d8:	08002c1b 	.word	0x08002c1b
 80029dc:	08002c1b 	.word	0x08002c1b
 80029e0:	08002c1b 	.word	0x08002c1b
 80029e4:	08002a35 	.word	0x08002a35
 80029e8:	08002c1b 	.word	0x08002c1b
 80029ec:	08002c1b 	.word	0x08002c1b
 80029f0:	08002c1b 	.word	0x08002c1b
 80029f4:	08002c1b 	.word	0x08002c1b
 80029f8:	08002c1b 	.word	0x08002c1b
 80029fc:	08002c1b 	.word	0x08002c1b
 8002a00:	08002c1b 	.word	0x08002c1b
 8002a04:	08002a3b 	.word	0x08002a3b
  {
  case 0x00:  /* HSI used as system clock source */
  
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a08:	4b89      	ldr	r3, [pc, #548]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0320 	and.w	r3, r3, #32
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d009      	beq.n	8002a28 <HAL_RCC_GetSysClockFreq+0xc4>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002a14:	4b86      	ldr	r3, [pc, #536]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	08db      	lsrs	r3, r3, #3
 8002a1a:	f003 0303 	and.w	r3, r3, #3
 8002a1e:	4a85      	ldr	r2, [pc, #532]	; (8002c34 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8002a20:	fa22 f303 	lsr.w	r3, r2, r3
 8002a24:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }
      
    break;
 8002a26:	e0fb      	b.n	8002c20 <HAL_RCC_GetSysClockFreq+0x2bc>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002a28:	4b82      	ldr	r3, [pc, #520]	; (8002c34 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8002a2a:	61bb      	str	r3, [r7, #24]
    break;
 8002a2c:	e0f8      	b.n	8002c20 <HAL_RCC_GetSysClockFreq+0x2bc>

  case 0x08:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002a2e:	4b82      	ldr	r3, [pc, #520]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a30:	61bb      	str	r3, [r7, #24]
    break;
 8002a32:	e0f5      	b.n	8002c20 <HAL_RCC_GetSysClockFreq+0x2bc>

  case 0x10:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002a34:	4b81      	ldr	r3, [pc, #516]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002a36:	61bb      	str	r3, [r7, #24]
    break;
 8002a38:	e0f2      	b.n	8002c20 <HAL_RCC_GetSysClockFreq+0x2bc>
  case 0x18:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002a3a:	4b7d      	ldr	r3, [pc, #500]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3e:	f003 0303 	and.w	r3, r3, #3
 8002a42:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002a44:	4b7a      	ldr	r3, [pc, #488]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a48:	091b      	lsrs	r3, r3, #4
 8002a4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a4e:	60fb      	str	r3, [r7, #12]
    pllfracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8002a50:	4b77      	ldr	r3, [pc, #476]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	60bb      	str	r3, [r7, #8]
    fracn1 = (pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002a5a:	4b75      	ldr	r3, [pc, #468]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a5e:	08db      	lsrs	r3, r3, #3
 8002a60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002a64:	68ba      	ldr	r2, [r7, #8]
 8002a66:	fb02 f303 	mul.w	r3, r2, r3
 8002a6a:	ee07 3a90 	vmov	s15, r3
 8002a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a72:	edc7 7a00 	vstr	s15, [r7]

    switch (pllsource)
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d055      	beq.n	8002b28 <HAL_RCC_GetSysClockFreq+0x1c4>
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d302      	bcc.n	8002a86 <HAL_RCC_GetSysClockFreq+0x122>
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d072      	beq.n	8002b6a <HAL_RCC_GetSysClockFreq+0x206>
 8002a84:	e092      	b.n	8002bac <HAL_RCC_GetSysClockFreq+0x248>
    {
    case 0x00:  /* HSI used as PLL clock source */

     if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a86:	4b6a      	ldr	r3, [pc, #424]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0320 	and.w	r3, r3, #32
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d029      	beq.n	8002ae6 <HAL_RCC_GetSysClockFreq+0x182>
      {
        hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002a92:	4b67      	ldr	r3, [pc, #412]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	08db      	lsrs	r3, r3, #3
 8002a98:	f003 0303 	and.w	r3, r3, #3
 8002a9c:	4a65      	ldr	r2, [pc, #404]	; (8002c34 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8002a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002aa2:	607b      	str	r3, [r7, #4]
        pllvco = ( hsivalue / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aac:	ee07 3a90 	vmov	s15, r3
 8002ab0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ab4:	4b5e      	ldr	r3, [pc, #376]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002abc:	ee07 3a90 	vmov	s15, r3
 8002ac0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ac4:	ed97 6a00 	vldr	s12, [r7]
 8002ac8:	eddf 5a5d 	vldr	s11, [pc, #372]	; 8002c40 <HAL_RCC_GetSysClockFreq+0x2dc>
 8002acc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ad0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ad4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ad8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002adc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ae0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
      }
      break;
 8002ae4:	e083      	b.n	8002bee <HAL_RCC_GetSysClockFreq+0x28a>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8002ae6:	4a53      	ldr	r2, [pc, #332]	; (8002c34 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aee:	ee07 3a90 	vmov	s15, r3
 8002af2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002af6:	4b4e      	ldr	r3, [pc, #312]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002afe:	ee07 3a90 	vmov	s15, r3
 8002b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b06:	ed97 6a00 	vldr	s12, [r7]
 8002b0a:	eddf 5a4d 	vldr	s11, [pc, #308]	; 8002c40 <HAL_RCC_GetSysClockFreq+0x2dc>
 8002b0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8002b26:	e062      	b.n	8002bee <HAL_RCC_GetSysClockFreq+0x28a>

    case 0x01:  /* CSI used as PLL clock source */
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8002b28:	4a43      	ldr	r2, [pc, #268]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b30:	ee07 3a90 	vmov	s15, r3
 8002b34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b38:	4b3d      	ldr	r3, [pc, #244]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b40:	ee07 3a90 	vmov	s15, r3
 8002b44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b48:	ed97 6a00 	vldr	s12, [r7]
 8002b4c:	eddf 5a3c 	vldr	s11, [pc, #240]	; 8002c40 <HAL_RCC_GetSysClockFreq+0x2dc>
 8002b50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b64:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8002b68:	e041      	b.n	8002bee <HAL_RCC_GetSysClockFreq+0x28a>

    case 0x02:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8002b6a:	4a34      	ldr	r2, [pc, #208]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b72:	ee07 3a90 	vmov	s15, r3
 8002b76:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b7a:	4b2d      	ldr	r3, [pc, #180]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b82:	ee07 3a90 	vmov	s15, r3
 8002b86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b8a:	ed97 6a00 	vldr	s12, [r7]
 8002b8e:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8002c40 <HAL_RCC_GetSysClockFreq+0x2dc>
 8002b92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ba6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8002baa:	e020      	b.n	8002bee <HAL_RCC_GetSysClockFreq+0x28a>

    default:
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8002bac:	4a22      	ldr	r2, [pc, #136]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb4:	ee07 3a90 	vmov	s15, r3
 8002bb8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002bbc:	4b1c      	ldr	r3, [pc, #112]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bc4:	ee07 3a90 	vmov	s15, r3
 8002bc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bcc:	ed97 6a00 	vldr	s12, [r7]
 8002bd0:	eddf 5a1b 	vldr	s11, [pc, #108]	; 8002c40 <HAL_RCC_GetSysClockFreq+0x2dc>
 8002bd4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002bd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002bdc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002be0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002be4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002be8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8002bec:	bf00      	nop
    }
    pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1 ) ;
 8002bee:	4b10      	ldr	r3, [pc, #64]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	0a5b      	lsrs	r3, r3, #9
 8002bf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	617b      	str	r3, [r7, #20]
    sysclockfreq =  (uint32_t)(pllvco/pllp);
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	ee07 3a90 	vmov	s15, r3
 8002c02:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c06:	edd7 6a07 	vldr	s13, [r7, #28]
 8002c0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c12:	ee17 3a90 	vmov	r3, s15
 8002c16:	61bb      	str	r3, [r7, #24]
    break;
 8002c18:	e002      	b.n	8002c20 <HAL_RCC_GetSysClockFreq+0x2bc>

  default:
    sysclockfreq = CSI_VALUE;
 8002c1a:	4b07      	ldr	r3, [pc, #28]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c1c:	61bb      	str	r3, [r7, #24]
    break;
 8002c1e:	bf00      	nop
  }

  return sysclockfreq;
 8002c20:	69bb      	ldr	r3, [r7, #24]
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3724      	adds	r7, #36	; 0x24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	58024400 	.word	0x58024400
 8002c34:	03d09000 	.word	0x03d09000
 8002c38:	003d0900 	.word	0x003d0900
 8002c3c:	00f42400 	.word	0x00f42400
 8002c40:	46000000 	.word	0x46000000

08002c44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0;
 8002c50:	2300      	movs	r3, #0
 8002c52:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c54:	2300      	movs	r3, #0
 8002c56:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c58:	2300      	movs	r3, #0
 8002c5a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/
  
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d049      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0xb8>
  {
    
    switch(PeriphClkInit->SpdifrxClockSelection)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c70:	d013      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002c72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c76:	d802      	bhi.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d007      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x48>
 8002c7c:	e029      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
 8002c7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c82:	d018      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002c84:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002c88:	d026      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x94>
 8002c8a:	e022      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c8c:	4aa9      	ldr	r2, [pc, #676]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c8e:	4ba9      	ldr	r3, [pc, #676]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c96:	62d3      	str	r3, [r2, #44]	; 0x2c
      
      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002c98:	e01f      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x96>
      
    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/
      
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8002c9a:	4aa6      	ldr	r2, [pc, #664]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c9c:	4ba5      	ldr	r3, [pc, #660]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ca4:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	3304      	adds	r3, #4
 8002caa:	4618      	mov	r0, r3
 8002cac:	f001 fd10 	bl	80046d0 <RCCEx_PLL2_Config>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	75fb      	strb	r3, [r7, #23]
      
      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002cb4:	e011      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x96>
      
    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 8002cb6:	4a9f      	ldr	r2, [pc, #636]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002cb8:	4b9e      	ldr	r3, [pc, #632]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cbc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cc0:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	3324      	adds	r3, #36	; 0x24
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f001 fd82 	bl	80047d0 <RCCEx_PLL3_Config>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	75fb      	strb	r3, [r7, #23]
      
      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002cd0:	e003      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x96>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
      
    default:
      ret = HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	75fb      	strb	r3, [r7, #23]
      break;
 8002cd6:	e000      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x96>
      break;
 8002cd8:	bf00      	nop
    }
    
    if(ret == HAL_OK)
 8002cda:	7dfb      	ldrb	r3, [r7, #23]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d109      	bne.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002ce0:	4994      	ldr	r1, [pc, #592]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ce2:	4b94      	ldr	r3, [pc, #592]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ce6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	650b      	str	r3, [r1, #80]	; 0x50
 8002cf2:	e003      	b.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8002cf4:	7dba      	ldrb	r2, [r7, #22]
 8002cf6:	7dfb      	ldrb	r3, [r7, #23]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	75bb      	strb	r3, [r7, #22]
    }
  }
  
  /*---------------------------- SAI1 configuration -------------------------------*/
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d049      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d0c:	2b04      	cmp	r3, #4
 8002d0e:	d830      	bhi.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x12e>
 8002d10:	a201      	add	r2, pc, #4	; (adr r2, 8002d18 <HAL_RCCEx_PeriphCLKConfig+0xd4>)
 8002d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d16:	bf00      	nop
 8002d18:	08002d2d 	.word	0x08002d2d
 8002d1c:	08002d3b 	.word	0x08002d3b
 8002d20:	08002d57 	.word	0x08002d57
 8002d24:	08002d79 	.word	0x08002d79
 8002d28:	08002d79 	.word	0x08002d79
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d2c:	4a81      	ldr	r2, [pc, #516]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d2e:	4b81      	ldr	r3, [pc, #516]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d36:	62d3      	str	r3, [r2, #44]	; 0x2c
      
      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002d38:	e01f      	b.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x136>
      
    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/
      
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8002d3a:	4a7e      	ldr	r2, [pc, #504]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d3c:	4b7d      	ldr	r3, [pc, #500]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002d44:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	3304      	adds	r3, #4
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f001 fcc0 	bl	80046d0 <RCCEx_PLL2_Config>
 8002d50:	4603      	mov	r3, r0
 8002d52:	75fb      	strb	r3, [r7, #23]
      
      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002d54:	e011      	b.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x136>
      
    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);  
 8002d56:	4a77      	ldr	r2, [pc, #476]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d58:	4b76      	ldr	r3, [pc, #472]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d60:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	3324      	adds	r3, #36	; 0x24
 8002d66:	4618      	mov	r0, r3
 8002d68:	f001 fd32 	bl	80047d0 <RCCEx_PLL3_Config>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	75fb      	strb	r3, [r7, #23]
      
      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002d70:	e003      	b.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x136>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;
      
    default:
      ret = HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	75fb      	strb	r3, [r7, #23]
      break;
 8002d76:	e000      	b.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x136>
      break;
 8002d78:	bf00      	nop
    }
    
    if(ret == HAL_OK)
 8002d7a:	7dfb      	ldrb	r3, [r7, #23]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d109      	bne.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d80:	496c      	ldr	r1, [pc, #432]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d82:	4b6c      	ldr	r3, [pc, #432]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d86:	f023 0207 	bic.w	r2, r3, #7
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	650b      	str	r3, [r1, #80]	; 0x50
 8002d92:	e003      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x158>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8002d94:	7dba      	ldrb	r2, [r7, #22]
 8002d96:	7dfb      	ldrb	r3, [r7, #23]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	75bb      	strb	r3, [r7, #22]
    }
  }
  
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d04a      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dac:	2b80      	cmp	r3, #128	; 0x80
 8002dae:	d021      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
 8002db0:	2b80      	cmp	r3, #128	; 0x80
 8002db2:	d804      	bhi.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d008      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002db8:	2b40      	cmp	r3, #64	; 0x40
 8002dba:	d00d      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x194>
 8002dbc:	e028      	b.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002dbe:	2bc0      	cmp	r3, #192	; 0xc0
 8002dc0:	d029      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 8002dc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dc6:	d028      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 8002dc8:	e022      	b.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dca:	4a5a      	ldr	r2, [pc, #360]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002dcc:	4b59      	ldr	r3, [pc, #356]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dd4:	62d3      	str	r3, [r2, #44]	; 0x2c
      
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002dd6:	e021      	b.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      
    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */
      
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8002dd8:	4a56      	ldr	r2, [pc, #344]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002dda:	4b56      	ldr	r3, [pc, #344]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dde:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002de2:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	3304      	adds	r3, #4
 8002de8:	4618      	mov	r0, r3
 8002dea:	f001 fc71 	bl	80046d0 <RCCEx_PLL2_Config>
 8002dee:	4603      	mov	r3, r0
 8002df0:	75fb      	strb	r3, [r7, #23]
      
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002df2:	e013      	b.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      
    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);  
 8002df4:	4a4f      	ldr	r2, [pc, #316]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002df6:	4b4f      	ldr	r3, [pc, #316]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002dfe:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	3324      	adds	r3, #36	; 0x24
 8002e04:	4618      	mov	r0, r3
 8002e06:	f001 fce3 	bl	80047d0 <RCCEx_PLL3_Config>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	75fb      	strb	r3, [r7, #23]
      
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002e0e:	e005      	b.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
      
    default:
      ret = HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	75fb      	strb	r3, [r7, #23]
      break;
 8002e14:	e002      	b.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      break;
 8002e16:	bf00      	nop
 8002e18:	e000      	b.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      break;
 8002e1a:	bf00      	nop
    }
    
    if(ret == HAL_OK)
 8002e1c:	7dfb      	ldrb	r3, [r7, #23]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d109      	bne.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002e22:	4944      	ldr	r1, [pc, #272]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e24:	4b43      	ldr	r3, [pc, #268]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e28:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e30:	4313      	orrs	r3, r2
 8002e32:	650b      	str	r3, [r1, #80]	; 0x50
 8002e34:	e003      	b.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8002e36:	7dba      	ldrb	r2, [r7, #22]
 8002e38:	7dfb      	ldrb	r3, [r7, #23]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	75bb      	strb	r3, [r7, #22]
    }
  }
  
  /*---------------------------- SAI4A configuration -------------------------------*/
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d050      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002e50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e54:	d024      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x25c>
 8002e56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e5a:	d805      	bhi.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x224>
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00a      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8002e60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e64:	d00e      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8002e66:	e029      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x278>
 8002e68:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002e6c:	d029      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8002e6e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e72:	d028      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x282>
 8002e74:	e022      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x278>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e76:	4a2f      	ldr	r2, [pc, #188]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e78:	4b2e      	ldr	r3, [pc, #184]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e80:	62d3      	str	r3, [r2, #44]	; 0x2c
      
      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002e82:	e021      	b.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x284>
      
    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
      
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8002e84:	4a2b      	ldr	r2, [pc, #172]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e86:	4b2b      	ldr	r3, [pc, #172]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002e8e:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	3304      	adds	r3, #4
 8002e94:	4618      	mov	r0, r3
 8002e96:	f001 fc1b 	bl	80046d0 <RCCEx_PLL2_Config>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	75fb      	strb	r3, [r7, #23]
      
      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002e9e:	e013      	b.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x284>
      
    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);  
 8002ea0:	4a24      	ldr	r2, [pc, #144]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ea2:	4b24      	ldr	r3, [pc, #144]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002eaa:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	3324      	adds	r3, #36	; 0x24
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f001 fc8d 	bl	80047d0 <RCCEx_PLL3_Config>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	75fb      	strb	r3, [r7, #23]
      
      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002eba:	e005      	b.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x284>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;
      
    default:
      ret = HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	75fb      	strb	r3, [r7, #23]
      break;
 8002ec0:	e002      	b.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x284>
      break;
 8002ec2:	bf00      	nop
 8002ec4:	e000      	b.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x284>
      break;
 8002ec6:	bf00      	nop
    }
    
    if(ret == HAL_OK)
 8002ec8:	7dfb      	ldrb	r3, [r7, #23]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d10a      	bne.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002ece:	4919      	ldr	r1, [pc, #100]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ed0:	4b18      	ldr	r3, [pc, #96]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	658b      	str	r3, [r1, #88]	; 0x58
 8002ee2:	e003      	b.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8002ee4:	7dba      	ldrb	r2, [r7, #22]
 8002ee6:	7dfb      	ldrb	r3, [r7, #23]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d053      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002efe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f02:	d027      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002f04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f08:	d805      	bhi.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00a      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
 8002f0e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f12:	d011      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8002f14:	e02c      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 8002f16:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f1a:	d02c      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8002f1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f20:	d02b      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x336>
 8002f22:	e025      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f24:	4a03      	ldr	r2, [pc, #12]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002f26:	4b03      	ldr	r3, [pc, #12]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f2e:	62d3      	str	r3, [r2, #44]	; 0x2c
      
      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002f30:	e024      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x338>
 8002f32:	bf00      	nop
 8002f34:	58024400 	.word	0x58024400
      
    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
      
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8002f38:	4aac      	ldr	r2, [pc, #688]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8002f3a:	4bac      	ldr	r3, [pc, #688]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8002f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002f42:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	3304      	adds	r3, #4
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f001 fbc1 	bl	80046d0 <RCCEx_PLL2_Config>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	75fb      	strb	r3, [r7, #23]
      
      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002f52:	e013      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x338>
      
    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);  
 8002f54:	4aa5      	ldr	r2, [pc, #660]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8002f56:	4ba5      	ldr	r3, [pc, #660]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8002f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f5e:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	3324      	adds	r3, #36	; 0x24
 8002f64:	4618      	mov	r0, r3
 8002f66:	f001 fc33 	bl	80047d0 <RCCEx_PLL3_Config>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	75fb      	strb	r3, [r7, #23]
      
      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002f6e:	e005      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x338>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;
      
    default:
      ret = HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	75fb      	strb	r3, [r7, #23]
      break;
 8002f74:	e002      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x338>
      break;
 8002f76:	bf00      	nop
 8002f78:	e000      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x338>
      break;
 8002f7a:	bf00      	nop
    }
    
    if(ret == HAL_OK)
 8002f7c:	7dfb      	ldrb	r3, [r7, #23]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d10a      	bne.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x354>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002f82:	499a      	ldr	r1, [pc, #616]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8002f84:	4b99      	ldr	r3, [pc, #612]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8002f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f88:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002f92:	4313      	orrs	r3, r2
 8002f94:	658b      	str	r3, [r1, #88]	; 0x58
 8002f96:	e003      	b.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8002f98:	7dba      	ldrb	r2, [r7, #22]
 8002f9a:	7dfb      	ldrb	r3, [r7, #23]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- QSPI configuration -------------------------------*/
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d039      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fb0:	2b10      	cmp	r3, #16
 8002fb2:	d009      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8002fb4:	2b10      	cmp	r3, #16
 8002fb6:	d802      	bhi.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d01d      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 8002fbc:	e019      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8002fbe:	2b20      	cmp	r3, #32
 8002fc0:	d009      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8002fc2:	2b30      	cmp	r3, #48	; 0x30
 8002fc4:	d01a      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 8002fc6:	e014      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fc8:	4a88      	ldr	r2, [pc, #544]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8002fca:	4b88      	ldr	r3, [pc, #544]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8002fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fd2:	62d3      	str	r3, [r2, #44]	; 0x2c
      
      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002fd4:	e013      	b.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      
    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/
      
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8002fd6:	4a85      	ldr	r2, [pc, #532]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8002fd8:	4b84      	ldr	r3, [pc, #528]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8002fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fdc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002fe0:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	3304      	adds	r3, #4
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f001 fb72 	bl	80046d0 <RCCEx_PLL2_Config>
 8002fec:	4603      	mov	r3, r0
 8002fee:	75fb      	strb	r3, [r7, #23]
      
      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002ff0:	e005      	b.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;
      
    default:
      ret = HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	75fb      	strb	r3, [r7, #23]
      break;
 8002ff6:	e002      	b.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      break;
 8002ff8:	bf00      	nop
 8002ffa:	e000      	b.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      break;
 8002ffc:	bf00      	nop
    }
    
    if(ret == HAL_OK)
 8002ffe:	7dfb      	ldrb	r3, [r7, #23]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d109      	bne.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003004:	4979      	ldr	r1, [pc, #484]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8003006:	4b79      	ldr	r3, [pc, #484]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8003008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800300a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003012:	4313      	orrs	r3, r2
 8003014:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003016:	e003      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8003018:	7dba      	ldrb	r2, [r7, #22]
 800301a:	7dfb      	ldrb	r3, [r7, #23]
 800301c:	4313      	orrs	r3, r2
 800301e:	75bb      	strb	r3, [r7, #22]
    }
  }
  
  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d04e      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x486>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003030:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003034:	d024      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x43c>
 8003036:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800303a:	d805      	bhi.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800303c:	2b00      	cmp	r3, #0
 800303e:	d00a      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x412>
 8003040:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003044:	d00e      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8003046:	e029      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x458>
 8003048:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800304c:	d029      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800304e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003052:	d028      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x462>
 8003054:	e022      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003056:	4a65      	ldr	r2, [pc, #404]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8003058:	4b64      	ldr	r3, [pc, #400]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 800305a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003060:	62d3      	str	r3, [r2, #44]	; 0x2c
      
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003062:	e021      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x464>
      
    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003064:	4a61      	ldr	r2, [pc, #388]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8003066:	4b61      	ldr	r3, [pc, #388]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8003068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800306e:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	3304      	adds	r3, #4
 8003074:	4618      	mov	r0, r3
 8003076:	f001 fb2b 	bl	80046d0 <RCCEx_PLL2_Config>
 800307a:	4603      	mov	r3, r0
 800307c:	75fb      	strb	r3, [r7, #23]
      
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800307e:	e013      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x464>
      
    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);  
 8003080:	4a5a      	ldr	r2, [pc, #360]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8003082:	4b5a      	ldr	r3, [pc, #360]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8003084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003086:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800308a:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	3324      	adds	r3, #36	; 0x24
 8003090:	4618      	mov	r0, r3
 8003092:	f001 fb9d 	bl	80047d0 <RCCEx_PLL3_Config>
 8003096:	4603      	mov	r3, r0
 8003098:	75fb      	strb	r3, [r7, #23]
      
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800309a:	e005      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x464>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
      
    default:
      ret = HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	75fb      	strb	r3, [r7, #23]
      break;
 80030a0:	e002      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x464>
      break;
 80030a2:	bf00      	nop
 80030a4:	e000      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x464>
      break;
 80030a6:	bf00      	nop
    }
    
    if(ret == HAL_OK)
 80030a8:	7dfb      	ldrb	r3, [r7, #23]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d109      	bne.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x47e>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80030ae:	494f      	ldr	r1, [pc, #316]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 80030b0:	4b4e      	ldr	r3, [pc, #312]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 80030b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030b4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030bc:	4313      	orrs	r3, r2
 80030be:	650b      	str	r3, [r1, #80]	; 0x50
 80030c0:	e003      	b.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x486>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 80030c2:	7dba      	ldrb	r2, [r7, #22]
 80030c4:	7dfb      	ldrb	r3, [r7, #23]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d04e      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x530>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030de:	d020      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80030e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030e4:	d805      	bhi.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d02c      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x500>
 80030ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ee:	d00a      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80030f0:	e025      	b.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 80030f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80030f6:	d027      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80030f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030fc:	d026      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x508>
 80030fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003102:	d025      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003104:	e01b      	b.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
      
    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */
      
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003106:	4a39      	ldr	r2, [pc, #228]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8003108:	4b38      	ldr	r3, [pc, #224]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 800310a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003110:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	3304      	adds	r3, #4
 8003116:	4618      	mov	r0, r3
 8003118:	f001 fada 	bl	80046d0 <RCCEx_PLL2_Config>
 800311c:	4603      	mov	r3, r0
 800311e:	75fb      	strb	r3, [r7, #23]
      
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003120:	e017      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x50e>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);  
 8003122:	4a32      	ldr	r2, [pc, #200]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8003124:	4b31      	ldr	r3, [pc, #196]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8003126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003128:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800312c:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	3324      	adds	r3, #36	; 0x24
 8003132:	4618      	mov	r0, r3
 8003134:	f001 fb4c 	bl	80047d0 <RCCEx_PLL3_Config>
 8003138:	4603      	mov	r3, r0
 800313a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800313c:	e009      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x50e>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
      
    default:
      ret = HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	75fb      	strb	r3, [r7, #23]
      break;
 8003142:	e006      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x50e>
      break;
 8003144:	bf00      	nop
 8003146:	e004      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x50e>
      break;
 8003148:	bf00      	nop
 800314a:	e002      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x50e>
      break;
 800314c:	bf00      	nop
 800314e:	e000      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x50e>
      break;
 8003150:	bf00      	nop
    }
    
    if(ret == HAL_OK)
 8003152:	7dfb      	ldrb	r3, [r7, #23]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d109      	bne.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x528>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003158:	4924      	ldr	r1, [pc, #144]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 800315a:	4b24      	ldr	r3, [pc, #144]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 800315c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800315e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003166:	4313      	orrs	r3, r2
 8003168:	650b      	str	r3, [r1, #80]	; 0x50
 800316a:	e003      	b.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x530>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 800316c:	7dba      	ldrb	r2, [r7, #22]
 800316e:	7dfb      	ldrb	r3, [r7, #23]
 8003170:	4313      	orrs	r3, r2
 8003172:	75bb      	strb	r3, [r7, #22]
    }
  }
  
  /*---------------------------- SPI6 configuration -------------------------------*/
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d053      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003186:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800318a:	d020      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800318c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003190:	d805      	bhi.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x55a>
 8003192:	2b00      	cmp	r3, #0
 8003194:	d02f      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 8003196:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800319a:	d00a      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x56e>
 800319c:	e028      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800319e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031a2:	d02a      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x5b6>
 80031a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031a8:	d029      	beq.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 80031aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80031ae:	d028      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x5be>
 80031b0:	e01e      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
      
    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/
      
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80031b2:	4a0e      	ldr	r2, [pc, #56]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 80031b4:	4b0d      	ldr	r3, [pc, #52]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 80031b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031bc:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	3304      	adds	r3, #4
 80031c2:	4618      	mov	r0, r3
 80031c4:	f001 fa84 	bl	80046d0 <RCCEx_PLL2_Config>
 80031c8:	4603      	mov	r3, r0
 80031ca:	75fb      	strb	r3, [r7, #23]
      
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80031cc:	e01a      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);  
 80031ce:	4a07      	ldr	r2, [pc, #28]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 80031d0:	4b06      	ldr	r3, [pc, #24]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 80031d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80031d8:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	3324      	adds	r3, #36	; 0x24
 80031de:	4618      	mov	r0, r3
 80031e0:	f001 faf6 	bl	80047d0 <RCCEx_PLL3_Config>
 80031e4:	4603      	mov	r3, r0
 80031e6:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80031e8:	e00c      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80031ea:	bf00      	nop
 80031ec:	58024400 	.word	0x58024400
      /* HSE,  oscillator is used as source of SPI6 clock */
      /* SPI6 clock source configuration done later after clock selection check */
      break;
      
    default:
      ret = HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	75fb      	strb	r3, [r7, #23]
      break;
 80031f4:	e006      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
      break;
 80031f6:	bf00      	nop
 80031f8:	e004      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
      break;
 80031fa:	bf00      	nop
 80031fc:	e002      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
      break;
 80031fe:	bf00      	nop
 8003200:	e000      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
      break;
 8003202:	bf00      	nop
    }
    
    if(ret == HAL_OK)
 8003204:	7dfb      	ldrb	r3, [r7, #23]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10a      	bne.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800320a:	498b      	ldr	r1, [pc, #556]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x7f4>)
 800320c:	4b8a      	ldr	r3, [pc, #552]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x7f4>)
 800320e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003210:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800321a:	4313      	orrs	r3, r2
 800321c:	658b      	str	r3, [r1, #88]	; 0x58
 800321e:	e003      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8003220:	7dba      	ldrb	r2, [r7, #22]
 8003222:	7dfb      	ldrb	r3, [r7, #23]
 8003224:	4313      	orrs	r3, r2
 8003226:	75bb      	strb	r3, [r7, #22]
  }
  
  
#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d034      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x65a>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003238:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800323c:	d005      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x606>
 800323e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003242:	d009      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8003244:	2b00      	cmp	r3, #0
 8003246:	d018      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x636>
 8003248:	e014      	b.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x630>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);        
 800324a:	4a7b      	ldr	r2, [pc, #492]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x7f4>)
 800324c:	4b7a      	ldr	r3, [pc, #488]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x7f4>)
 800324e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003250:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003254:	62d3      	str	r3, [r2, #44]	; 0x2c
      
      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003256:	e011      	b.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x638>
      
    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/
      
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003258:	4a77      	ldr	r2, [pc, #476]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x7f4>)
 800325a:	4b77      	ldr	r3, [pc, #476]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x7f4>)
 800325c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003262:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	3304      	adds	r3, #4
 8003268:	4618      	mov	r0, r3
 800326a:	f001 fa31 	bl	80046d0 <RCCEx_PLL2_Config>
 800326e:	4603      	mov	r3, r0
 8003270:	75fb      	strb	r3, [r7, #23]
      
      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003272:	e003      	b.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x638>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;
      
    default:
      ret = HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	75fb      	strb	r3, [r7, #23]
      break;
 8003278:	e000      	b.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x638>
      break;
 800327a:	bf00      	nop
    }
    
    if(ret == HAL_OK)
 800327c:	7dfb      	ldrb	r3, [r7, #23]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d109      	bne.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003282:	496d      	ldr	r1, [pc, #436]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x7f4>)
 8003284:	4b6c      	ldr	r3, [pc, #432]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x7f4>)
 8003286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003288:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003290:	4313      	orrs	r3, r2
 8003292:	650b      	str	r3, [r1, #80]	; 0x50
 8003294:	e003      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x65a>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8003296:	7dba      	ldrb	r2, [r7, #22]
 8003298:	7dfb      	ldrb	r3, [r7, #23]
 800329a:	4313      	orrs	r3, r2
 800329c:	75bb      	strb	r3, [r7, #22]
    }
  }
  
#endif /*FDCAN1 || FDCAN2*/
  /*---------------------------- FMC configuration -------------------------------*/
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d038      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ae:	2b03      	cmp	r3, #3
 80032b0:	d81f      	bhi.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 80032b2:	a201      	add	r2, pc, #4	; (adr r2, 80032b8 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80032b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b8:	080032f9 	.word	0x080032f9
 80032bc:	080032c9 	.word	0x080032c9
 80032c0:	080032d7 	.word	0x080032d7
 80032c4:	080032f9 	.word	0x080032f9
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032c8:	4a5b      	ldr	r2, [pc, #364]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x7f4>)
 80032ca:	4b5b      	ldr	r3, [pc, #364]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x7f4>)
 80032cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032d2:	62d3      	str	r3, [r2, #44]	; 0x2c
      
      /* FMC clock source configuration done later after clock selection check */
      break;
 80032d4:	e011      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x6b6>
      
    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/
      
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80032d6:	4a58      	ldr	r2, [pc, #352]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x7f4>)
 80032d8:	4b57      	ldr	r3, [pc, #348]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x7f4>)
 80032da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80032e0:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	3304      	adds	r3, #4
 80032e6:	4618      	mov	r0, r3
 80032e8:	f001 f9f2 	bl	80046d0 <RCCEx_PLL2_Config>
 80032ec:	4603      	mov	r3, r0
 80032ee:	75fb      	strb	r3, [r7, #23]
      
      /* FMC clock source configuration done later after clock selection check */
      break;
 80032f0:	e003      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x6b6>
    case RCC_FMCCLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;
      
    default:
      ret = HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	75fb      	strb	r3, [r7, #23]
      break;
 80032f6:	e000      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x6b6>
      break;
 80032f8:	bf00      	nop
    }
    
    if(ret == HAL_OK)
 80032fa:	7dfb      	ldrb	r3, [r7, #23]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d109      	bne.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003300:	494d      	ldr	r1, [pc, #308]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x7f4>)
 8003302:	4b4d      	ldr	r3, [pc, #308]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x7f4>)
 8003304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003306:	f023 0203 	bic.w	r2, r3, #3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330e:	4313      	orrs	r3, r2
 8003310:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003312:	e003      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8003314:	7dba      	ldrb	r2, [r7, #22]
 8003316:	7dfb      	ldrb	r3, [r7, #23]
 8003318:	4313      	orrs	r3, r2
 800331a:	75bb      	strb	r3, [r7, #22]
    }
  }
  
  /*---------------------------- RTC configuration -------------------------------*/
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003324:	2b00      	cmp	r3, #0
 8003326:	f000 8091 	beq.w	800344c <HAL_RCCEx_PeriphCLKConfig+0x808>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800332a:	4a44      	ldr	r2, [pc, #272]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x7f8>)
 800332c:	4b43      	ldr	r3, [pc, #268]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x7f8>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003334:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003336:	f7fd f825 	bl	8000384 <HAL_GetTick>
 800333a:	60f8      	str	r0, [r7, #12]
    
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800333c:	e009      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800333e:	f7fd f821 	bl	8000384 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b64      	cmp	r3, #100	; 0x64
 800334a:	d902      	bls.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x70e>
      {
        ret = HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	75fb      	strb	r3, [r7, #23]
        break;
 8003350:	e005      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x71a>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003352:	4b3a      	ldr	r3, [pc, #232]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x7f8>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0ef      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x6fa>
      }
    }
    
    if(ret == HAL_OK)
 800335e:	7dfb      	ldrb	r3, [r7, #23]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d16f      	bne.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x800>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003364:	4b34      	ldr	r3, [pc, #208]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x7f4>)
 8003366:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800336e:	4053      	eors	r3, r2
 8003370:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003374:	2b00      	cmp	r3, #0
 8003376:	d013      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003378:	4b2f      	ldr	r3, [pc, #188]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x7f4>)
 800337a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003380:	613b      	str	r3, [r7, #16]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003382:	4a2d      	ldr	r2, [pc, #180]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x7f4>)
 8003384:	4b2c      	ldr	r3, [pc, #176]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x7f4>)
 8003386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003388:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800338c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800338e:	4a2a      	ldr	r2, [pc, #168]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x7f4>)
 8003390:	4b29      	ldr	r3, [pc, #164]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x7f4>)
 8003392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003394:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003398:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800339a:	4a27      	ldr	r2, [pc, #156]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x7f4>)
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	6713      	str	r3, [r2, #112]	; 0x70
      }
      
      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80033a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033aa:	d115      	bne.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x794>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ac:	f7fc ffea 	bl	8000384 <HAL_GetTick>
 80033b0:	60f8      	str	r0, [r7, #12]
        
        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033b2:	e00b      	b.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033b4:	f7fc ffe6 	bl	8000384 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	f241 3288 	movw	r2, #5000	; 0x1388
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d902      	bls.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x788>
          {
            ret = HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	75fb      	strb	r3, [r7, #23]
            break;
 80033ca:	e005      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x794>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033cc:	4b1a      	ldr	r3, [pc, #104]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x7f4>)
 80033ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d0:	f003 0302 	and.w	r3, r3, #2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d0ed      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x770>
          }
        }
      }
      
      if(ret == HAL_OK)
 80033d8:	7dfb      	ldrb	r3, [r7, #23]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d126      	bne.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x7e8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80033e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033ec:	d10d      	bne.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 80033ee:	4812      	ldr	r0, [pc, #72]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x7f4>)
 80033f0:	4b11      	ldr	r3, [pc, #68]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x7f4>)
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80033fe:	0919      	lsrs	r1, r3, #4
 8003400:	4b0f      	ldr	r3, [pc, #60]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8003402:	400b      	ands	r3, r1
 8003404:	4313      	orrs	r3, r2
 8003406:	6103      	str	r3, [r0, #16]
 8003408:	e005      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800340a:	4a0b      	ldr	r2, [pc, #44]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x7f4>)
 800340c:	4b0a      	ldr	r3, [pc, #40]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x7f4>)
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003414:	6113      	str	r3, [r2, #16]
 8003416:	4908      	ldr	r1, [pc, #32]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x7f4>)
 8003418:	4b07      	ldr	r3, [pc, #28]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x7f4>)
 800341a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003422:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003426:	4313      	orrs	r3, r2
 8003428:	670b      	str	r3, [r1, #112]	; 0x70
 800342a:	e00f      	b.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x808>
      }
      else
      {
        /* set overall return value */
        status |= ret;
 800342c:	7dba      	ldrb	r2, [r7, #22]
 800342e:	7dfb      	ldrb	r3, [r7, #23]
 8003430:	4313      	orrs	r3, r2
 8003432:	75bb      	strb	r3, [r7, #22]
 8003434:	e00a      	b.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x808>
 8003436:	bf00      	nop
 8003438:	58024400 	.word	0x58024400
 800343c:	58024800 	.word	0x58024800
 8003440:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8003444:	7dba      	ldrb	r2, [r7, #22]
 8003446:	7dfb      	ldrb	r3, [r7, #23]
 8003448:	4313      	orrs	r3, r2
 800344a:	75bb      	strb	r3, [r7, #22]
    }
  }
  
  
  /*-------------------------- USART1/6 configuration --------------------------*/
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0301 	and.w	r3, r3, #1
 8003454:	2b00      	cmp	r3, #0
 8003456:	f000 808a 	beq.w	800356e <HAL_RCCEx_PeriphCLKConfig+0x92a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800345e:	2b28      	cmp	r3, #40	; 0x28
 8003460:	d870      	bhi.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x900>
 8003462:	a201      	add	r2, pc, #4	; (adr r2, 8003468 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8003464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003468:	0800354b 	.word	0x0800354b
 800346c:	08003545 	.word	0x08003545
 8003470:	08003545 	.word	0x08003545
 8003474:	08003545 	.word	0x08003545
 8003478:	08003545 	.word	0x08003545
 800347c:	08003545 	.word	0x08003545
 8003480:	08003545 	.word	0x08003545
 8003484:	08003545 	.word	0x08003545
 8003488:	0800350d 	.word	0x0800350d
 800348c:	08003545 	.word	0x08003545
 8003490:	08003545 	.word	0x08003545
 8003494:	08003545 	.word	0x08003545
 8003498:	08003545 	.word	0x08003545
 800349c:	08003545 	.word	0x08003545
 80034a0:	08003545 	.word	0x08003545
 80034a4:	08003545 	.word	0x08003545
 80034a8:	08003529 	.word	0x08003529
 80034ac:	08003545 	.word	0x08003545
 80034b0:	08003545 	.word	0x08003545
 80034b4:	08003545 	.word	0x08003545
 80034b8:	08003545 	.word	0x08003545
 80034bc:	08003545 	.word	0x08003545
 80034c0:	08003545 	.word	0x08003545
 80034c4:	08003545 	.word	0x08003545
 80034c8:	0800354b 	.word	0x0800354b
 80034cc:	08003545 	.word	0x08003545
 80034d0:	08003545 	.word	0x08003545
 80034d4:	08003545 	.word	0x08003545
 80034d8:	08003545 	.word	0x08003545
 80034dc:	08003545 	.word	0x08003545
 80034e0:	08003545 	.word	0x08003545
 80034e4:	08003545 	.word	0x08003545
 80034e8:	0800354b 	.word	0x0800354b
 80034ec:	08003545 	.word	0x08003545
 80034f0:	08003545 	.word	0x08003545
 80034f4:	08003545 	.word	0x08003545
 80034f8:	08003545 	.word	0x08003545
 80034fc:	08003545 	.word	0x08003545
 8003500:	08003545 	.word	0x08003545
 8003504:	08003545 	.word	0x08003545
 8003508:	0800354b 	.word	0x0800354b
    case RCC_USART16CLKSOURCE_D2PCLK2: /* D2PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
      
    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800350c:	4ab1      	ldr	r2, [pc, #708]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
 800350e:	4bb1      	ldr	r3, [pc, #708]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
 8003510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003512:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003516:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	3304      	adds	r3, #4
 800351c:	4618      	mov	r0, r3
 800351e:	f001 f8d7 	bl	80046d0 <RCCEx_PLL2_Config>
 8003522:	4603      	mov	r3, r0
 8003524:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003526:	e011      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x908>
      
    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);  
 8003528:	4aaa      	ldr	r2, [pc, #680]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
 800352a:	4baa      	ldr	r3, [pc, #680]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
 800352c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003532:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	3324      	adds	r3, #36	; 0x24
 8003538:	4618      	mov	r0, r3
 800353a:	f001 f949 	bl	80047d0 <RCCEx_PLL3_Config>
 800353e:	4603      	mov	r3, r0
 8003540:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003542:	e003      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x908>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
      
    default:
      ret = HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	75fb      	strb	r3, [r7, #23]
      break;
 8003548:	e000      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x908>
      break;
 800354a:	bf00      	nop
    }
    
    if(ret == HAL_OK)
 800354c:	7dfb      	ldrb	r3, [r7, #23]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d109      	bne.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x922>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003552:	49a0      	ldr	r1, [pc, #640]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
 8003554:	4b9f      	ldr	r3, [pc, #636]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
 8003556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003558:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003560:	4313      	orrs	r3, r2
 8003562:	654b      	str	r3, [r1, #84]	; 0x54
 8003564:	e003      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x92a>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8003566:	7dba      	ldrb	r2, [r7, #22]
 8003568:	7dfb      	ldrb	r3, [r7, #23]
 800356a:	4313      	orrs	r3, r2
 800356c:	75bb      	strb	r3, [r7, #22]
    }
  }
  
  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d043      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800357e:	2b05      	cmp	r3, #5
 8003580:	d82a      	bhi.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x994>
 8003582:	a201      	add	r2, pc, #4	; (adr r2, 8003588 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 8003584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003588:	080035df 	.word	0x080035df
 800358c:	080035a1 	.word	0x080035a1
 8003590:	080035bd 	.word	0x080035bd
 8003594:	080035df 	.word	0x080035df
 8003598:	080035df 	.word	0x080035df
 800359c:	080035df 	.word	0x080035df
    case RCC_USART234578CLKSOURCE_D2PCLK1: /* D2PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
      
    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80035a0:	4a8c      	ldr	r2, [pc, #560]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
 80035a2:	4b8c      	ldr	r3, [pc, #560]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
 80035a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035aa:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	3304      	adds	r3, #4
 80035b0:	4618      	mov	r0, r3
 80035b2:	f001 f88d 	bl	80046d0 <RCCEx_PLL2_Config>
 80035b6:	4603      	mov	r3, r0
 80035b8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80035ba:	e011      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x99c>
      
    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);  
 80035bc:	4a85      	ldr	r2, [pc, #532]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
 80035be:	4b85      	ldr	r3, [pc, #532]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
 80035c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80035c6:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	3324      	adds	r3, #36	; 0x24
 80035cc:	4618      	mov	r0, r3
 80035ce:	f001 f8ff 	bl	80047d0 <RCCEx_PLL3_Config>
 80035d2:	4603      	mov	r3, r0
 80035d4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80035d6:	e003      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x99c>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
      
    default:
      ret = HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	75fb      	strb	r3, [r7, #23]
      break;
 80035dc:	e000      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x99c>
      break;
 80035de:	bf00      	nop
    }
    
    if(ret == HAL_OK)
 80035e0:	7dfb      	ldrb	r3, [r7, #23]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d109      	bne.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80035e6:	497b      	ldr	r1, [pc, #492]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
 80035e8:	4b7a      	ldr	r3, [pc, #488]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
 80035ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ec:	f023 0207 	bic.w	r2, r3, #7
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035f4:	4313      	orrs	r3, r2
 80035f6:	654b      	str	r3, [r1, #84]	; 0x54
 80035f8:	e003      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 80035fa:	7dba      	ldrb	r2, [r7, #22]
 80035fc:	7dfb      	ldrb	r3, [r7, #23]
 80035fe:	4313      	orrs	r3, r2
 8003600:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0304 	and.w	r3, r3, #4
 800360a:	2b00      	cmp	r3, #0
 800360c:	d046      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003614:	2b05      	cmp	r3, #5
 8003616:	d82b      	bhi.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8003618:	a201      	add	r2, pc, #4	; (adr r2, 8003620 <HAL_RCCEx_PeriphCLKConfig+0x9dc>)
 800361a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800361e:	bf00      	nop
 8003620:	08003677 	.word	0x08003677
 8003624:	08003639 	.word	0x08003639
 8003628:	08003655 	.word	0x08003655
 800362c:	08003677 	.word	0x08003677
 8003630:	08003677 	.word	0x08003677
 8003634:	08003677 	.word	0x08003677
    case RCC_LPUART1CLKSOURCE_D3PCLK1: /* D3PCLK1 as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
      
    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003638:	4a66      	ldr	r2, [pc, #408]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
 800363a:	4b66      	ldr	r3, [pc, #408]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
 800363c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003642:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	3304      	adds	r3, #4
 8003648:	4618      	mov	r0, r3
 800364a:	f001 f841 	bl	80046d0 <RCCEx_PLL2_Config>
 800364e:	4603      	mov	r3, r0
 8003650:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003652:	e011      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      
    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);  
 8003654:	4a5f      	ldr	r2, [pc, #380]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
 8003656:	4b5f      	ldr	r3, [pc, #380]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
 8003658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800365e:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	3324      	adds	r3, #36	; 0x24
 8003664:	4618      	mov	r0, r3
 8003666:	f001 f8b3 	bl	80047d0 <RCCEx_PLL3_Config>
 800366a:	4603      	mov	r3, r0
 800366c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800366e:	e003      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
      
    default:
      ret = HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	75fb      	strb	r3, [r7, #23]
      break;
 8003674:	e000      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8003676:	bf00      	nop
    }
    
    if(ret == HAL_OK)
 8003678:	7dfb      	ldrb	r3, [r7, #23]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d10a      	bne.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800367e:	4955      	ldr	r1, [pc, #340]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
 8003680:	4b54      	ldr	r3, [pc, #336]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
 8003682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003684:	f023 0207 	bic.w	r2, r3, #7
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800368e:	4313      	orrs	r3, r2
 8003690:	658b      	str	r3, [r1, #88]	; 0x58
 8003692:	e003      	b.n	800369c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8003694:	7dba      	ldrb	r2, [r7, #22]
 8003696:	7dfb      	ldrb	r3, [r7, #23]
 8003698:	4313      	orrs	r3, r2
 800369a:	75bb      	strb	r3, [r7, #22]
    }
  }
  
  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0320 	and.w	r3, r3, #32
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d050      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0xb06>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036b2:	d020      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80036b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036b8:	d805      	bhi.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d02c      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0xad4>
 80036be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036c2:	d00a      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0xa96>
 80036c4:	e025      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0xace>
 80036c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ca:	d027      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80036cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036d0:	d026      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80036d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80036d6:	d025      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 80036d8:	e01b      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0xace>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
      
    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/
      
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80036da:	4a3e      	ldr	r2, [pc, #248]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
 80036dc:	4b3d      	ldr	r3, [pc, #244]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
 80036de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80036e4:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	3304      	adds	r3, #4
 80036ea:	4618      	mov	r0, r3
 80036ec:	f000 fff0 	bl	80046d0 <RCCEx_PLL2_Config>
 80036f0:	4603      	mov	r3, r0
 80036f2:	75fb      	strb	r3, [r7, #23]
      
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80036f4:	e017      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0xae2>
      
    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 80036f6:	4a37      	ldr	r2, [pc, #220]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
 80036f8:	4b36      	ldr	r3, [pc, #216]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
 80036fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003700:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	3324      	adds	r3, #36	; 0x24
 8003706:	4618      	mov	r0, r3
 8003708:	f001 f862 	bl	80047d0 <RCCEx_PLL3_Config>
 800370c:	4603      	mov	r3, r0
 800370e:	75fb      	strb	r3, [r7, #23]
      
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003710:	e009      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0xae2>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
      
    default:
      ret = HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	75fb      	strb	r3, [r7, #23]
      break;
 8003716:	e006      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0xae2>
      break;
 8003718:	bf00      	nop
 800371a:	e004      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0xae2>
      break;
 800371c:	bf00      	nop
 800371e:	e002      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0xae2>
      break;
 8003720:	bf00      	nop
 8003722:	e000      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0xae2>
      break;
 8003724:	bf00      	nop
    }
    
    if(ret == HAL_OK)
 8003726:	7dfb      	ldrb	r3, [r7, #23]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d10a      	bne.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0xafe>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800372c:	4929      	ldr	r1, [pc, #164]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
 800372e:	4b29      	ldr	r3, [pc, #164]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
 8003730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003732:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800373c:	4313      	orrs	r3, r2
 800373e:	654b      	str	r3, [r1, #84]	; 0x54
 8003740:	e003      	b.n	800374a <HAL_RCCEx_PeriphCLKConfig+0xb06>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8003742:	7dba      	ldrb	r2, [r7, #22]
 8003744:	7dfb      	ldrb	r3, [r7, #23]
 8003746:	4313      	orrs	r3, r2
 8003748:	75bb      	strb	r3, [r7, #22]
    }
  }
  
  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003752:	2b00      	cmp	r3, #0
 8003754:	d053      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800375c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003760:	d020      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0xb60>
 8003762:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003766:	d805      	bhi.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0xb30>
 8003768:	2b00      	cmp	r3, #0
 800376a:	d02c      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800376c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003770:	d00a      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0xb44>
 8003772:	e025      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8003774:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003778:	d027      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800377a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800377e:	d026      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8003780:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003784:	d028      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0xb94>
 8003786:	e01b      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
      
    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/
      
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003788:	4a12      	ldr	r2, [pc, #72]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
 800378a:	4b12      	ldr	r3, [pc, #72]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
 800378c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003792:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	3304      	adds	r3, #4
 8003798:	4618      	mov	r0, r3
 800379a:	f000 ff99 	bl	80046d0 <RCCEx_PLL2_Config>
 800379e:	4603      	mov	r3, r0
 80037a0:	75fb      	strb	r3, [r7, #23]
      
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80037a2:	e01a      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0xb96>
      
    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 80037a4:	4a0b      	ldr	r2, [pc, #44]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
 80037a6:	4b0b      	ldr	r3, [pc, #44]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
 80037a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037ae:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	3324      	adds	r3, #36	; 0x24
 80037b4:	4618      	mov	r0, r3
 80037b6:	f001 f80b 	bl	80047d0 <RCCEx_PLL3_Config>
 80037ba:	4603      	mov	r3, r0
 80037bc:	75fb      	strb	r3, [r7, #23]
      
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80037be:	e00c      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0xb96>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
      
    default:
      ret = HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	75fb      	strb	r3, [r7, #23]
      break;
 80037c4:	e009      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0xb96>
      break;
 80037c6:	bf00      	nop
 80037c8:	e007      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0xb96>
      break;
 80037ca:	bf00      	nop
 80037cc:	e005      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0xb96>
      break;
 80037ce:	bf00      	nop
 80037d0:	e003      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0xb96>
 80037d2:	bf00      	nop
 80037d4:	58024400 	.word	0x58024400
      break;
 80037d8:	bf00      	nop
    }
    
    if(ret == HAL_OK)
 80037da:	7dfb      	ldrb	r3, [r7, #23]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d10a      	bne.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80037e0:	49ae      	ldr	r1, [pc, #696]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 80037e2:	4bae      	ldr	r3, [pc, #696]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 80037e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037f0:	4313      	orrs	r3, r2
 80037f2:	658b      	str	r3, [r1, #88]	; 0x58
 80037f4:	e003      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 80037f6:	7dba      	ldrb	r2, [r7, #22]
 80037f8:	7dfb      	ldrb	r3, [r7, #23]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	75bb      	strb	r3, [r7, #22]
    }
  }
  
  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003806:	2b00      	cmp	r3, #0
 8003808:	d050      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0xc68>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003810:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003814:	d020      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0xc14>
 8003816:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800381a:	d805      	bhi.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0xbe4>
 800381c:	2b00      	cmp	r3, #0
 800381e:	d02c      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0xc36>
 8003820:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003824:	d00a      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0xbf8>
 8003826:	e025      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0xc30>
 8003828:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800382c:	d027      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0xc3a>
 800382e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003832:	d026      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0xc3e>
 8003834:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003838:	d025      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0xc42>
 800383a:	e01b      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0xc30>
    case RCC_LPTIM345CLKSOURCE_D3PCLK1:      /* D3PCLK1 as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
      
    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800383c:	4a97      	ldr	r2, [pc, #604]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 800383e:	4b97      	ldr	r3, [pc, #604]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 8003840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003842:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003846:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	3304      	adds	r3, #4
 800384c:	4618      	mov	r0, r3
 800384e:	f000 ff3f 	bl	80046d0 <RCCEx_PLL2_Config>
 8003852:	4603      	mov	r3, r0
 8003854:	75fb      	strb	r3, [r7, #23]
      
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003856:	e017      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0xc44>
      
    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 8003858:	4a90      	ldr	r2, [pc, #576]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 800385a:	4b90      	ldr	r3, [pc, #576]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 800385c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003862:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	3324      	adds	r3, #36	; 0x24
 8003868:	4618      	mov	r0, r3
 800386a:	f000 ffb1 	bl	80047d0 <RCCEx_PLL3_Config>
 800386e:	4603      	mov	r3, r0
 8003870:	75fb      	strb	r3, [r7, #23]
      
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003872:	e009      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0xc44>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
      
    default:
      ret = HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	75fb      	strb	r3, [r7, #23]
      break;
 8003878:	e006      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0xc44>
      break;
 800387a:	bf00      	nop
 800387c:	e004      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0xc44>
      break;
 800387e:	bf00      	nop
 8003880:	e002      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0xc44>
      break;
 8003882:	bf00      	nop
 8003884:	e000      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0xc44>
      break;
 8003886:	bf00      	nop
    }
    
    if(ret == HAL_OK)
 8003888:	7dfb      	ldrb	r3, [r7, #23]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d10a      	bne.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0xc60>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800388e:	4983      	ldr	r1, [pc, #524]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 8003890:	4b82      	ldr	r3, [pc, #520]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 8003892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003894:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800389e:	4313      	orrs	r3, r2
 80038a0:	658b      	str	r3, [r1, #88]	; 0x58
 80038a2:	e003      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0xc68>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 80038a4:	7dba      	ldrb	r2, [r7, #22]
 80038a6:	7dfb      	ldrb	r3, [r7, #23]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0308 	and.w	r3, r3, #8
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d01b      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));
    
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038c2:	d10b      	bne.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0xc98>
    {
      RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	3324      	adds	r3, #36	; 0x24
 80038c8:	4618      	mov	r0, r3
 80038ca:	f000 ff81 	bl	80047d0 <RCCEx_PLL3_Config>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80038ce:	4a73      	ldr	r2, [pc, #460]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 80038d0:	4b72      	ldr	r3, [pc, #456]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 80038d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038d8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80038da:	e009      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    
    else
    {
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80038dc:	496f      	ldr	r1, [pc, #444]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 80038de:	4b6f      	ldr	r3, [pc, #444]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 80038e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038ec:	4313      	orrs	r3, r2
 80038ee:	654b      	str	r3, [r1, #84]	; 0x54
    }
    
  }
  
  /*------------------------------ I2C4 Configuration ------------------------*/
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0310 	and.w	r3, r3, #16
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d01b      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003902:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003906:	d10b      	bne.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
    {
      RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	3324      	adds	r3, #36	; 0x24
 800390c:	4618      	mov	r0, r3
 800390e:	f000 ff5f 	bl	80047d0 <RCCEx_PLL3_Config>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003912:	4a62      	ldr	r2, [pc, #392]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 8003914:	4b61      	ldr	r3, [pc, #388]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 8003916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003918:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800391c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800391e:	e009      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    }
    
    else
    {
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003920:	495e      	ldr	r1, [pc, #376]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 8003922:	4b5e      	ldr	r3, [pc, #376]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 8003924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003926:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003930:	4313      	orrs	r3, r2
 8003932:	658b      	str	r3, [r1, #88]	; 0x58
    }
  }
  
  /*---------------------------- ADC configuration -------------------------------*/
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d03c      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0xd76>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003946:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800394a:	d012      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 800394c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003950:	d020      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0xd50>
 8003952:	2b00      	cmp	r3, #0
 8003954:	d11b      	bne.n	800398e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
    {
      
    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/
      
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003956:	4a51      	ldr	r2, [pc, #324]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 8003958:	4b50      	ldr	r3, [pc, #320]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 800395a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003960:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	3304      	adds	r3, #4
 8003966:	4618      	mov	r0, r3
 8003968:	f000 feb2 	bl	80046d0 <RCCEx_PLL2_Config>
 800396c:	4603      	mov	r3, r0
 800396e:	75fb      	strb	r3, [r7, #23]
      
      /* ADC clock source configuration done later after clock selection check */
      break;
 8003970:	e011      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0xd52>
      
    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 8003972:	4a4a      	ldr	r2, [pc, #296]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 8003974:	4b49      	ldr	r3, [pc, #292]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 8003976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003978:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800397c:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	3324      	adds	r3, #36	; 0x24
 8003982:	4618      	mov	r0, r3
 8003984:	f000 ff24 	bl	80047d0 <RCCEx_PLL3_Config>
 8003988:	4603      	mov	r3, r0
 800398a:	75fb      	strb	r3, [r7, #23]
      
      /* ADC clock source configuration done later after clock selection check */
      break;
 800398c:	e003      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0xd52>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;
      
    default:
      ret = HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	75fb      	strb	r3, [r7, #23]
      break;
 8003992:	e000      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0xd52>
      break;
 8003994:	bf00      	nop
    }
    
    if(ret == HAL_OK)
 8003996:	7dfb      	ldrb	r3, [r7, #23]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d10a      	bne.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800399c:	493f      	ldr	r1, [pc, #252]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 800399e:	4b3f      	ldr	r3, [pc, #252]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 80039a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80039ac:	4313      	orrs	r3, r2
 80039ae:	658b      	str	r3, [r1, #88]	; 0x58
 80039b0:	e003      	b.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0xd76>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 80039b2:	7dba      	ldrb	r2, [r7, #22]
 80039b4:	7dfb      	ldrb	r3, [r7, #23]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	75bb      	strb	r3, [r7, #22]
    }
  }
  
  /*------------------------------ USB Configuration -------------------------*/
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d036      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0xdf0>
  {
    
    switch(PeriphClkInit->UsbClockSelection)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039d0:	d00c      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0xda8>
 80039d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80039d6:	d01a      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0xdca>
 80039d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039dc:	d114      	bne.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039de:	4a2f      	ldr	r2, [pc, #188]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 80039e0:	4b2e      	ldr	r3, [pc, #184]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 80039e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039e8:	62d3      	str	r3, [r2, #44]	; 0x2c
      
      /* USB clock source configuration done later after clock selection check */
      break;
 80039ea:	e011      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0xdcc>
      
    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/
      
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80039ec:	4a2b      	ldr	r2, [pc, #172]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 80039ee:	4b2b      	ldr	r3, [pc, #172]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 80039f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80039f6:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	3324      	adds	r3, #36	; 0x24
 80039fc:	4618      	mov	r0, r3
 80039fe:	f000 fee7 	bl	80047d0 <RCCEx_PLL3_Config>
 8003a02:	4603      	mov	r3, r0
 8003a04:	75fb      	strb	r3, [r7, #23]
      
      /* USB clock source configuration done later after clock selection check */
      break;
 8003a06:	e003      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0xdcc>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;
      
    default:
      ret = HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	75fb      	strb	r3, [r7, #23]
      break;
 8003a0c:	e000      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0xdcc>
      break;
 8003a0e:	bf00      	nop
    }
    
    if(ret == HAL_OK)
 8003a10:	7dfb      	ldrb	r3, [r7, #23]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d10a      	bne.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0xde8>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a16:	4921      	ldr	r1, [pc, #132]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 8003a18:	4b20      	ldr	r3, [pc, #128]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 8003a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a26:	4313      	orrs	r3, r2
 8003a28:	654b      	str	r3, [r1, #84]	; 0x54
 8003a2a:	e003      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0xdf0>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8003a2c:	7dba      	ldrb	r2, [r7, #22]
 8003a2e:	7dfb      	ldrb	r3, [r7, #23]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	75bb      	strb	r3, [r7, #22]
    }
    
  }
  
  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d033      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xe64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));
    
    switch(PeriphClkInit->SdmmcClockSelection)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d003      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
 8003a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a4c:	d007      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
 8003a4e:	e014      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0xe36>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);        
 8003a50:	4a12      	ldr	r2, [pc, #72]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 8003a52:	4b12      	ldr	r3, [pc, #72]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 8003a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a5a:	62d3      	str	r3, [r2, #44]	; 0x2c
      
      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003a5c:	e010      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0xe3c>
      
    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/
      
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003a5e:	4a0f      	ldr	r2, [pc, #60]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 8003a60:	4b0e      	ldr	r3, [pc, #56]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 8003a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003a68:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	3304      	adds	r3, #4
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f000 fe2e 	bl	80046d0 <RCCEx_PLL2_Config>
 8003a74:	4603      	mov	r3, r0
 8003a76:	75fb      	strb	r3, [r7, #23]
      
      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003a78:	e002      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0xe3c>
      
    default:
      ret = HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	75fb      	strb	r3, [r7, #23]
      break;
 8003a7e:	bf00      	nop
    }
    
    if(ret == HAL_OK)
 8003a80:	7dfb      	ldrb	r3, [r7, #23]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10c      	bne.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003a86:	4905      	ldr	r1, [pc, #20]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 8003a88:	4b04      	ldr	r3, [pc, #16]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 8003a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a94:	4313      	orrs	r3, r2
 8003a96:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003a98:	e006      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8003a9a:	bf00      	nop
 8003a9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8003aa0:	7dba      	ldrb	r2, [r7, #22]
 8003aa2:	7dfb      	ldrb	r3, [r7, #23]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00f      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xe90>
  {
    __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 8003ab4:	4a50      	ldr	r2, [pc, #320]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xfb4>)
 8003ab6:	4b50      	ldr	r3, [pc, #320]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xfb4>)
 8003ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003abe:	62d3      	str	r3, [r2, #44]	; 0x2c
    status |= RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	3324      	adds	r3, #36	; 0x24
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f000 fe83 	bl	80047d0 <RCCEx_PLL3_Config>
 8003aca:	4603      	mov	r3, r0
 8003acc:	461a      	mov	r2, r3
 8003ace:	7dbb      	ldrb	r3, [r7, #22]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	75bb      	strb	r3, [r7, #22]
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d031      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0xf00>
  {
    
    switch(PeriphClkInit->RngClockSelection)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ae4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ae8:	d00c      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0xec0>
 8003aea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aee:	d802      	bhi.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0xeb2>
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d011      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0xed4>
 8003af4:	e00d      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0xece>
 8003af6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003afa:	d00f      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0xed8>
 8003afc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b00:	d00e      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xedc>
 8003b02:	e006      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0xece>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b04:	4a3c      	ldr	r2, [pc, #240]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xfb4>)
 8003b06:	4b3c      	ldr	r3, [pc, #240]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xfb4>)
 8003b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b0e:	62d3      	str	r3, [r2, #44]	; 0x2c
      
      /* RNG clock source configuration done later after clock selection check */
      break;
 8003b10:	e007      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0xede>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;
      
    default:
      ret = HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	75fb      	strb	r3, [r7, #23]
      break;
 8003b16:	e004      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0xede>
      break;
 8003b18:	bf00      	nop
 8003b1a:	e002      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0xede>
      break;
 8003b1c:	bf00      	nop
 8003b1e:	e000      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0xede>
      break;
 8003b20:	bf00      	nop
    }
    
    if(ret == HAL_OK)
 8003b22:	7dfb      	ldrb	r3, [r7, #23]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d109      	bne.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0xef8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b28:	4933      	ldr	r1, [pc, #204]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xfb4>)
 8003b2a:	4b33      	ldr	r3, [pc, #204]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xfb4>)
 8003b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b2e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b36:	4313      	orrs	r3, r2
 8003b38:	654b      	str	r3, [r1, #84]	; 0x54
 8003b3a:	e003      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0xf00>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8003b3c:	7dba      	ldrb	r2, [r7, #22]
 8003b3e:	7dfb      	ldrb	r3, [r7, #23]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	75bb      	strb	r3, [r7, #22]
    }
    
  }
  
  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d008      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
    
    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b50:	4929      	ldr	r1, [pc, #164]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xfb4>)
 8003b52:	4b29      	ldr	r3, [pc, #164]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xfb4>)
 8003b54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b56:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	650b      	str	r3, [r1, #80]	; 0x50
  }
  
  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d009      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003b6e:	4922      	ldr	r1, [pc, #136]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xfb4>)
 8003b70:	4b21      	ldr	r3, [pc, #132]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xfb4>)
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	610b      	str	r3, [r1, #16]
  }
  
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d008      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0xf5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
    
    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b8e:	491a      	ldr	r1, [pc, #104]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xfb4>)
 8003b90:	4b19      	ldr	r3, [pc, #100]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xfb4>)
 8003b92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b94:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	650b      	str	r3, [r1, #80]	; 0x50
  }
  
  /*------------------------------------ TIM configuration --------------------------------------*/
  if((PeriphClkInit->PeriphClockSelection) & (RCC_PERIPHCLK_TIM))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00d      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0xf84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003bac:	4a12      	ldr	r2, [pc, #72]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xfb4>)
 8003bae:	4b12      	ldr	r3, [pc, #72]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xfb4>)
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003bb6:	6113      	str	r3, [r2, #16]
 8003bb8:	490f      	ldr	r1, [pc, #60]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xfb4>)
 8003bba:	4b0f      	ldr	r3, [pc, #60]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xfb4>)
 8003bbc:	691a      	ldr	r2, [r3, #16]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if((PeriphClkInit->PeriphClockSelection) & (RCC_PERIPHCLK_CKPER))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	da08      	bge.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0xf9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));
    
    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003bd0:	4909      	ldr	r1, [pc, #36]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xfb4>)
 8003bd2:	4b09      	ldr	r3, [pc, #36]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xfb4>)
 8003bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bd6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bde:	4313      	orrs	r3, r2
 8003be0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8003be2:	7dbb      	ldrb	r3, [r7, #22]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d101      	bne.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0xfa8>
    return HAL_OK;
 8003be8:	2300      	movs	r3, #0
 8003bea:	e000      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0xfaa>
  return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3718      	adds	r7, #24
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	58024400 	.word	0x58024400

08003bfc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI4B : SAI4B peripheral clock
  *            @arg RCC_PERIPHCLK_SPI123: SPI1/2/3 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b090      	sub	sp, #64	; 0x40
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  PLL1_ClocksTypeDef pll1_clocks;
  PLL2_ClocksTypeDef pll2_clocks;
  PLL3_ClocksTypeDef pll3_clocks;
  
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8003c04:	2300      	movs	r3, #0
 8003c06:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource = 0;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t ckpclocksource = 0;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t srcclk = 0U;
 8003c10:	2300      	movs	r3, #0
 8003c12:	633b      	str	r3, [r7, #48]	; 0x30
  switch (PeriphClk)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c1a:	f000 80ac 	beq.w	8003d76 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8003c1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c22:	d806      	bhi.n	8003c32 <HAL_RCCEx_GetPeriphCLKFreq+0x36>
 8003c24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c28:	d00c      	beq.n	8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0x48>
 8003c2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c2e:	d057      	beq.n	8003ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8003c30:	e199      	b.n	8003f66 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 8003c32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c36:	f000 80ed 	beq.w	8003e14 <HAL_RCCEx_GetPeriphCLKFreq+0x218>
 8003c3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c3e:	f000 8138 	beq.w	8003eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2b6>
 8003c42:	e190      	b.n	8003f66 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
  {
  case RCC_PERIPHCLK_SAI1:
    {
      
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8003c44:	4ba4      	ldr	r3, [pc, #656]	; (8003ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c48:	f003 0307 	and.w	r3, r3, #7
 8003c4c:	63bb      	str	r3, [r7, #56]	; 0x38
      
      switch (saiclocksource)
 8003c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c50:	2b04      	cmp	r3, #4
 8003c52:	d841      	bhi.n	8003cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8003c54:	a201      	add	r2, pc, #4	; (adr r2, 8003c5c <HAL_RCCEx_GetPeriphCLKFreq+0x60>)
 8003c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c5a:	bf00      	nop
 8003c5c:	08003c71 	.word	0x08003c71
 8003c60:	08003c81 	.word	0x08003c81
 8003c64:	08003c91 	.word	0x08003c91
 8003c68:	08003cd3 	.word	0x08003cd3
 8003c6c:	08003ca1 	.word	0x08003ca1
      {
      case 0: /* PLL1 is the clock source for SAI1 */ 
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003c70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c74:	4618      	mov	r0, r3
 8003c76:	f000 fbf5 	bl	8004464 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;       
 8003c7e:	e02e      	b.n	8003cde <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        }
      case RCC_D2CCIP1R_SAI1SEL_0: /* PLLI2 is the clock source for SAI1 */
        {  
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003c80:	f107 0318 	add.w	r3, r7, #24
 8003c84:	4618      	mov	r0, r3
 8003c86:	f000 f97d 	bl	8003f84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003c8e:	e026      	b.n	8003cde <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        }
        
      case RCC_D2CCIP1R_SAI1SEL_1: /* PLLI3 is the clock source for SAI1 */
        {  
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003c90:	f107 030c 	add.w	r3, r7, #12
 8003c94:	4618      	mov	r0, r3
 8003c96:	f000 faad 	bl	80041f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003c9e:	e01e      	b.n	8003cde <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        }
        
      case RCC_D2CCIP1R_SAI1SEL_2: /* CKPER is the clock source for SAI1*/
        {
          
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003ca0:	4b8d      	ldr	r3, [pc, #564]	; (8003ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ca4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ca8:	637b      	str	r3, [r7, #52]	; 0x34
          
          if(ckpclocksource== 0)
 8003caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d102      	bne.n	8003cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
          {
            /* In Case the main PLL Source is HSI */
            frequency = HSI_VALUE;
 8003cb0:	4b8a      	ldr	r3, [pc, #552]	; (8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the main PLL Source is HSE */
            frequency = HSE_VALUE;
          }
          
          break;
 8003cb4:	e012      	b.n	8003cdc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 8003cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cbc:	d102      	bne.n	8003cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
            frequency = CSI_VALUE;
 8003cbe:	4b88      	ldr	r3, [pc, #544]	; (8003ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8003cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003cc2:	e00b      	b.n	8003cdc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 8003cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cca:	d107      	bne.n	8003cdc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
            frequency = HSE_VALUE;
 8003ccc:	4b85      	ldr	r3, [pc, #532]	; (8003ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8003cce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003cd0:	e004      	b.n	8003cdc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        }
        
      case (RCC_D2CCIP1R_SAI1SEL_0 | RCC_D2CCIP1R_SAI1SEL_1 ): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8003cd2:	4b85      	ldr	r3, [pc, #532]	; (8003ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8003cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;       
 8003cd6:	e002      	b.n	8003cde <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        }     
      default :
        {
          break;
 8003cd8:	bf00      	nop
 8003cda:	e144      	b.n	8003f66 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
          break;
 8003cdc:	bf00      	nop
        }
      }
      break;
 8003cde:	e142      	b.n	8003f66 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
    }
    
  case RCC_PERIPHCLK_SAI23:
    {
      
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8003ce0:	4b7d      	ldr	r3, [pc, #500]	; (8003ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ce4:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8003ce8:	63bb      	str	r3, [r7, #56]	; 0x38
      
      switch (saiclocksource)
 8003cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cec:	2b80      	cmp	r3, #128	; 0x80
 8003cee:	d01c      	beq.n	8003d2a <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
 8003cf0:	2b80      	cmp	r3, #128	; 0x80
 8003cf2:	d804      	bhi.n	8003cfe <HAL_RCCEx_GetPeriphCLKFreq+0x102>
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d008      	beq.n	8003d0a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8003cf8:	2b40      	cmp	r3, #64	; 0x40
 8003cfa:	d00e      	beq.n	8003d1a <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
          frequency = EXTERNAL_CLOCK_VALUE;
          break;       
        }     
      default :
        {
          break;
 8003cfc:	e03a      	b.n	8003d74 <HAL_RCCEx_GetPeriphCLKFreq+0x178>
      switch (saiclocksource)
 8003cfe:	2bc0      	cmp	r3, #192	; 0xc0
 8003d00:	d034      	beq.n	8003d6c <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8003d02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d06:	d018      	beq.n	8003d3a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
          break;
 8003d08:	e034      	b.n	8003d74 <HAL_RCCEx_GetPeriphCLKFreq+0x178>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003d0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f000 fba8 	bl	8004464 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d16:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;       
 8003d18:	e02c      	b.n	8003d74 <HAL_RCCEx_GetPeriphCLKFreq+0x178>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003d1a:	f107 0318 	add.w	r3, r7, #24
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 f930 	bl	8003f84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003d28:	e024      	b.n	8003d74 <HAL_RCCEx_GetPeriphCLKFreq+0x178>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003d2a:	f107 030c 	add.w	r3, r7, #12
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f000 fa60 	bl	80041f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003d38:	e01c      	b.n	8003d74 <HAL_RCCEx_GetPeriphCLKFreq+0x178>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003d3a:	4b67      	ldr	r3, [pc, #412]	; (8003ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d3e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003d42:	637b      	str	r3, [r7, #52]	; 0x34
          if(ckpclocksource== 0)
 8003d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d102      	bne.n	8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
            frequency = HSI_VALUE;
 8003d4a:	4b64      	ldr	r3, [pc, #400]	; (8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break; 
 8003d4e:	e010      	b.n	8003d72 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 8003d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d56:	d102      	bne.n	8003d5e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
            frequency = CSI_VALUE;
 8003d58:	4b61      	ldr	r3, [pc, #388]	; (8003ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8003d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break; 
 8003d5c:	e009      	b.n	8003d72 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 8003d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d64:	d105      	bne.n	8003d72 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
            frequency = HSE_VALUE;
 8003d66:	4b5f      	ldr	r3, [pc, #380]	; (8003ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8003d68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break; 
 8003d6a:	e002      	b.n	8003d72 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
          frequency = EXTERNAL_CLOCK_VALUE;
 8003d6c:	4b5e      	ldr	r3, [pc, #376]	; (8003ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8003d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;       
 8003d70:	e000      	b.n	8003d74 <HAL_RCCEx_GetPeriphCLKFreq+0x178>
          break; 
 8003d72:	bf00      	nop
        }
      }
      break;
 8003d74:	e0f7      	b.n	8003f66 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
    }
        
  case RCC_PERIPHCLK_SAI4A:
    {
      
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8003d76:	4b58      	ldr	r3, [pc, #352]	; (8003ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d7a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8003d7e:	63bb      	str	r3, [r7, #56]	; 0x38
      
      switch (saiclocksource)
 8003d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d86:	d01f      	beq.n	8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>
 8003d88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d8c:	d805      	bhi.n	8003d9a <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00a      	beq.n	8003da8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8003d92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d96:	d00f      	beq.n	8003db8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
          break;       
        }
        
      default :
        {
          break;
 8003d98:	e03b      	b.n	8003e12 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
      switch (saiclocksource)
 8003d9a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003d9e:	d034      	beq.n	8003e0a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8003da0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003da4:	d018      	beq.n	8003dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
          break;
 8003da6:	e034      	b.n	8003e12 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003da8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003dac:	4618      	mov	r0, r3
 8003dae:	f000 fb59 	bl	8004464 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;       
 8003db6:	e02c      	b.n	8003e12 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003db8:	f107 0318 	add.w	r3, r7, #24
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f000 f8e1 	bl	8003f84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003dc6:	e024      	b.n	8003e12 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003dc8:	f107 030c 	add.w	r3, r7, #12
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f000 fa11 	bl	80041f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003dd6:	e01c      	b.n	8003e12 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003dd8:	4b3f      	ldr	r3, [pc, #252]	; (8003ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ddc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003de0:	637b      	str	r3, [r7, #52]	; 0x34
          if(ckpclocksource== 0)
 8003de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d102      	bne.n	8003dee <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
            frequency = HSI_VALUE;
 8003de8:	4b3c      	ldr	r3, [pc, #240]	; (8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003dea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003dec:	e010      	b.n	8003e10 <HAL_RCCEx_GetPeriphCLKFreq+0x214>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 8003dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003df0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003df4:	d102      	bne.n	8003dfc <HAL_RCCEx_GetPeriphCLKFreq+0x200>
            frequency = CSI_VALUE;
 8003df6:	4b3a      	ldr	r3, [pc, #232]	; (8003ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8003df8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003dfa:	e009      	b.n	8003e10 <HAL_RCCEx_GetPeriphCLKFreq+0x214>
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 8003dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e02:	d105      	bne.n	8003e10 <HAL_RCCEx_GetPeriphCLKFreq+0x214>
            frequency = HSE_VALUE;
 8003e04:	4b37      	ldr	r3, [pc, #220]	; (8003ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8003e06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003e08:	e002      	b.n	8003e10 <HAL_RCCEx_GetPeriphCLKFreq+0x214>
          frequency = EXTERNAL_CLOCK_VALUE;
 8003e0a:	4b37      	ldr	r3, [pc, #220]	; (8003ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8003e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;       
 8003e0e:	e000      	b.n	8003e12 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          break;
 8003e10:	bf00      	nop
        }
      }
      break;
 8003e12:	e0a8      	b.n	8003f66 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
    }
    
  case RCC_PERIPHCLK_SAI4B:
    {
      
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8003e14:	4b30      	ldr	r3, [pc, #192]	; (8003ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e18:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8003e1c:	63bb      	str	r3, [r7, #56]	; 0x38
      
      switch (saiclocksource)
 8003e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e24:	d01f      	beq.n	8003e66 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8003e26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e2a:	d805      	bhi.n	8003e38 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00a      	beq.n	8003e46 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
 8003e30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e34:	d00f      	beq.n	8003e56 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
          break;       
        }
        
      default :
        {
          break;
 8003e36:	e03b      	b.n	8003eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
      switch (saiclocksource)
 8003e38:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003e3c:	d034      	beq.n	8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
 8003e3e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e42:	d018      	beq.n	8003e76 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
          break;
 8003e44:	e034      	b.n	8003eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003e46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 fb0a 	bl	8004464 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e52:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;       
 8003e54:	e02c      	b.n	8003eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003e56:	f107 0318 	add.w	r3, r7, #24
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f000 f892 	bl	8003f84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003e64:	e024      	b.n	8003eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003e66:	f107 030c 	add.w	r3, r7, #12
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f000 f9c2 	bl	80041f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003e74:	e01c      	b.n	8003eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003e76:	4b18      	ldr	r3, [pc, #96]	; (8003ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e7a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e7e:	637b      	str	r3, [r7, #52]	; 0x34
          if(ckpclocksource== 0)
 8003e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d102      	bne.n	8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x290>
            frequency = HSI_VALUE;
 8003e86:	4b15      	ldr	r3, [pc, #84]	; (8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003e88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003e8a:	e010      	b.n	8003eae <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 8003e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e92:	d102      	bne.n	8003e9a <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
            frequency = CSI_VALUE;
 8003e94:	4b12      	ldr	r3, [pc, #72]	; (8003ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8003e96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003e98:	e009      	b.n	8003eae <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 8003e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ea0:	d105      	bne.n	8003eae <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
            frequency = HSE_VALUE;
 8003ea2:	4b10      	ldr	r3, [pc, #64]	; (8003ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8003ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003ea6:	e002      	b.n	8003eae <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
          frequency = EXTERNAL_CLOCK_VALUE;
 8003ea8:	4b0f      	ldr	r3, [pc, #60]	; (8003ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8003eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;       
 8003eac:	e000      	b.n	8003eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
          break;
 8003eae:	bf00      	nop
        }
      }
      break;
 8003eb0:	e059      	b.n	8003f66 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
    }
  case RCC_PERIPHCLK_SPI123:			
    {
      /* Get SPI1/2/3 clock source */			
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8003eb2:	4b09      	ldr	r3, [pc, #36]	; (8003ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003eb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eb6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8003eba:	633b      	str	r3, [r7, #48]	; 0x30
      
      switch (srcclk)
 8003ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ebe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ec2:	d02a      	beq.n	8003f1a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8003ec4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ec8:	d810      	bhi.n	8003eec <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d015      	beq.n	8003efa <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
 8003ece:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ed2:	d01a      	beq.n	8003f0a <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
          frequency = EXTERNAL_CLOCK_VALUE;
          break;       
        }     
      default :
        {
          break;
 8003ed4:	e046      	b.n	8003f64 <HAL_RCCEx_GetPeriphCLKFreq+0x368>
 8003ed6:	bf00      	nop
 8003ed8:	58024400 	.word	0x58024400
 8003edc:	03d09000 	.word	0x03d09000
 8003ee0:	003d0900 	.word	0x003d0900
 8003ee4:	00f42400 	.word	0x00f42400
 8003ee8:	00bb8000 	.word	0x00bb8000
      switch (srcclk)
 8003eec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ef0:	d034      	beq.n	8003f5c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
 8003ef2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ef6:	d018      	beq.n	8003f2a <HAL_RCCEx_GetPeriphCLKFreq+0x32e>
          break;
 8003ef8:	e034      	b.n	8003f64 <HAL_RCCEx_GetPeriphCLKFreq+0x368>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003efa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003efe:	4618      	mov	r0, r3
 8003f00:	f000 fab0 	bl	8004464 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;       
 8003f08:	e02c      	b.n	8003f64 <HAL_RCCEx_GetPeriphCLKFreq+0x368>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003f0a:	f107 0318 	add.w	r3, r7, #24
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f000 f838 	bl	8003f84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003f18:	e024      	b.n	8003f64 <HAL_RCCEx_GetPeriphCLKFreq+0x368>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003f1a:	f107 030c 	add.w	r3, r7, #12
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f000 f968 	bl	80041f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003f28:	e01c      	b.n	8003f64 <HAL_RCCEx_GetPeriphCLKFreq+0x368>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003f2a:	4b11      	ldr	r3, [pc, #68]	; (8003f70 <HAL_RCCEx_GetPeriphCLKFreq+0x374>)
 8003f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f2e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f32:	637b      	str	r3, [r7, #52]	; 0x34
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8003f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d102      	bne.n	8003f40 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
            frequency = HSI_VALUE;
 8003f3a:	4b0e      	ldr	r3, [pc, #56]	; (8003f74 <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 8003f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break; 
 8003f3e:	e010      	b.n	8003f62 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8003f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f46:	d102      	bne.n	8003f4e <HAL_RCCEx_GetPeriphCLKFreq+0x352>
            frequency = CSI_VALUE;
 8003f48:	4b0b      	ldr	r3, [pc, #44]	; (8003f78 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>)
 8003f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break; 
 8003f4c:	e009      	b.n	8003f62 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8003f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f54:	d105      	bne.n	8003f62 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
            frequency = HSE_VALUE;
 8003f56:	4b09      	ldr	r3, [pc, #36]	; (8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0x380>)
 8003f58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break; 
 8003f5a:	e002      	b.n	8003f62 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
          frequency = EXTERNAL_CLOCK_VALUE;
 8003f5c:	4b08      	ldr	r3, [pc, #32]	; (8003f80 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 8003f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;       
 8003f60:	e000      	b.n	8003f64 <HAL_RCCEx_GetPeriphCLKFreq+0x368>
          break; 
 8003f62:	bf00      	nop
        }
      }
      break;
 8003f64:	bf00      	nop
    }    
    
  }
  return frequency;
 8003f66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3740      	adds	r7, #64	; 0x40
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	58024400 	.word	0x58024400
 8003f74:	03d09000 	.word	0x03d09000
 8003f78:	003d0900 	.word	0x003d0900
 8003f7c:	00f42400 	.word	0x00f42400
 8003f80:	00bb8000 	.word	0x00bb8000

08003f84 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b089      	sub	sp, #36	; 0x24
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  uint32_t  pllsource = 0, pll2m = 1 ,  pll2fracen = 0, hsivalue = 0;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	61bb      	str	r3, [r7, #24]
 8003f90:	2301      	movs	r3, #1
 8003f92:	617b      	str	r3, [r7, #20]
 8003f94:	2300      	movs	r3, #0
 8003f96:	613b      	str	r3, [r7, #16]
 8003f98:	2300      	movs	r3, #0
 8003f9a:	60fb      	str	r3, [r7, #12]
  float fracn2 =0 ,pll2vco = 0;
 8003f9c:	f04f 0300 	mov.w	r3, #0
 8003fa0:	60bb      	str	r3, [r7, #8]
 8003fa2:	f04f 0300 	mov.w	r3, #0
 8003fa6:	61fb      	str	r3, [r7, #28]
  
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003fa8:	4b8d      	ldr	r3, [pc, #564]	; (80041e0 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 8003faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fac:	f003 0303 	and.w	r3, r3, #3
 8003fb0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 8003fb2:	4b8b      	ldr	r3, [pc, #556]	; (80041e0 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 8003fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb6:	0b1b      	lsrs	r3, r3, #12
 8003fb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fbc:	617b      	str	r3, [r7, #20]
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 8003fbe:	4b88      	ldr	r3, [pc, #544]	; (80041e0 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 8003fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc2:	f003 0310 	and.w	r3, r3, #16
 8003fc6:	613b      	str	r3, [r7, #16]
  fracn2 =(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003fc8:	4b85      	ldr	r3, [pc, #532]	; (80041e0 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 8003fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fcc:	08db      	lsrs	r3, r3, #3
 8003fce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	fb02 f303 	mul.w	r3, r2, r3
 8003fd8:	ee07 3a90 	vmov	s15, r3
 8003fdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fe0:	edc7 7a02 	vstr	s15, [r7, #8]
  
  switch (pllsource)
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d055      	beq.n	8004096 <HAL_RCCEx_GetPLL2ClockFreq+0x112>
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d302      	bcc.n	8003ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d072      	beq.n	80040d8 <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 8003ff2:	e092      	b.n	800411a <HAL_RCCEx_GetPLL2ClockFreq+0x196>
  {
    
  case 0x00:  /* HSI used as PLL clock source */
    
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ff4:	4b7a      	ldr	r3, [pc, #488]	; (80041e0 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0320 	and.w	r3, r3, #32
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d029      	beq.n	8004054 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
    {
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004000:	4b77      	ldr	r3, [pc, #476]	; (80041e0 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	08db      	lsrs	r3, r3, #3
 8004006:	f003 0303 	and.w	r3, r3, #3
 800400a:	4a76      	ldr	r2, [pc, #472]	; (80041e4 <HAL_RCCEx_GetPLL2ClockFreq+0x260>)
 800400c:	fa22 f303 	lsr.w	r3, r2, r3
 8004010:	60fb      	str	r3, [r7, #12]
      pll2vco = ( hsivalue / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	fbb2 f3f3 	udiv	r3, r2, r3
 800401a:	ee07 3a90 	vmov	s15, r3
 800401e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004022:	4b6f      	ldr	r3, [pc, #444]	; (80041e0 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 8004024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800402a:	ee07 3a90 	vmov	s15, r3
 800402e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004032:	ed97 6a02 	vldr	s12, [r7, #8]
 8004036:	eddf 5a6c 	vldr	s11, [pc, #432]	; 80041e8 <HAL_RCCEx_GetPLL2ClockFreq+0x264>
 800403a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800403e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004042:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004046:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800404a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800404e:	edc7 7a07 	vstr	s15, [r7, #28]
    }
    else
    {
      pll2vco = (HSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
    }
    break;  
 8004052:	e083      	b.n	800415c <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>
      pll2vco = (HSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8004054:	4a63      	ldr	r2, [pc, #396]	; (80041e4 <HAL_RCCEx_GetPLL2ClockFreq+0x260>)
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	fbb2 f3f3 	udiv	r3, r2, r3
 800405c:	ee07 3a90 	vmov	s15, r3
 8004060:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004064:	4b5e      	ldr	r3, [pc, #376]	; (80041e0 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 8004066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004068:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800406c:	ee07 3a90 	vmov	s15, r3
 8004070:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004074:	ed97 6a02 	vldr	s12, [r7, #8]
 8004078:	eddf 5a5b 	vldr	s11, [pc, #364]	; 80041e8 <HAL_RCCEx_GetPLL2ClockFreq+0x264>
 800407c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004080:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004084:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004088:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800408c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004090:	edc7 7a07 	vstr	s15, [r7, #28]
    break;  
 8004094:	e062      	b.n	800415c <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>
    
  case 0x01:  /* HSI used as PLL clock source */
    pll2vco = (CSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8004096:	4a55      	ldr	r2, [pc, #340]	; (80041ec <HAL_RCCEx_GetPLL2ClockFreq+0x268>)
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	fbb2 f3f3 	udiv	r3, r2, r3
 800409e:	ee07 3a90 	vmov	s15, r3
 80040a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80040a6:	4b4e      	ldr	r3, [pc, #312]	; (80041e0 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 80040a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040ae:	ee07 3a90 	vmov	s15, r3
 80040b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80040ba:	eddf 5a4b 	vldr	s11, [pc, #300]	; 80041e8 <HAL_RCCEx_GetPLL2ClockFreq+0x264>
 80040be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040d2:	edc7 7a07 	vstr	s15, [r7, #28]
    break;
 80040d6:	e041      	b.n	800415c <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>
    
  case 0x02:  /* HSE used as PLL clock source */
    pll2vco = (HSE_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 80040d8:	4a45      	ldr	r2, [pc, #276]	; (80041f0 <HAL_RCCEx_GetPLL2ClockFreq+0x26c>)
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e0:	ee07 3a90 	vmov	s15, r3
 80040e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80040e8:	4b3d      	ldr	r3, [pc, #244]	; (80041e0 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 80040ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040f0:	ee07 3a90 	vmov	s15, r3
 80040f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040f8:	ed97 6a02 	vldr	s12, [r7, #8]
 80040fc:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80041e8 <HAL_RCCEx_GetPLL2ClockFreq+0x264>
 8004100:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004104:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004108:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800410c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004110:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004114:	edc7 7a07 	vstr	s15, [r7, #28]
    break;
 8004118:	e020      	b.n	800415c <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>
    
  default:
    pll2vco = (CSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 800411a:	4a34      	ldr	r2, [pc, #208]	; (80041ec <HAL_RCCEx_GetPLL2ClockFreq+0x268>)
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004122:	ee07 3a90 	vmov	s15, r3
 8004126:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800412a:	4b2d      	ldr	r3, [pc, #180]	; (80041e0 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 800412c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004132:	ee07 3a90 	vmov	s15, r3
 8004136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800413a:	ed97 6a02 	vldr	s12, [r7, #8]
 800413e:	eddf 5a2a 	vldr	s11, [pc, #168]	; 80041e8 <HAL_RCCEx_GetPLL2ClockFreq+0x264>
 8004142:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004146:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800414a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800414e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004156:	edc7 7a07 	vstr	s15, [r7, #28]
    break;
 800415a:	bf00      	nop
  }
  PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9) + 1  )) ;
 800415c:	4b20      	ldr	r3, [pc, #128]	; (80041e0 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 800415e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004160:	0a5b      	lsrs	r3, r3, #9
 8004162:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004166:	3301      	adds	r3, #1
 8004168:	ee07 3a90 	vmov	s15, r3
 800416c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004170:	edd7 6a07 	vldr	s13, [r7, #28]
 8004174:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004178:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800417c:	ee17 2a90 	vmov	r2, s15
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	601a      	str	r2, [r3, #0]
  PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + 1 )) ;
 8004184:	4b16      	ldr	r3, [pc, #88]	; (80041e0 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 8004186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004188:	0c1b      	lsrs	r3, r3, #16
 800418a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800418e:	3301      	adds	r3, #1
 8004190:	ee07 3a90 	vmov	s15, r3
 8004194:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004198:	edd7 6a07 	vldr	s13, [r7, #28]
 800419c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041a4:	ee17 2a90 	vmov	r2, s15
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	605a      	str	r2, [r3, #4]
  PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + 1 )) ;
 80041ac:	4b0c      	ldr	r3, [pc, #48]	; (80041e0 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 80041ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b0:	0e1b      	lsrs	r3, r3, #24
 80041b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041b6:	3301      	adds	r3, #1
 80041b8:	ee07 3a90 	vmov	s15, r3
 80041bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80041c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80041c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041cc:	ee17 2a90 	vmov	r2, s15
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	609a      	str	r2, [r3, #8]
  
  
}
 80041d4:	bf00      	nop
 80041d6:	3724      	adds	r7, #36	; 0x24
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr
 80041e0:	58024400 	.word	0x58024400
 80041e4:	03d09000 	.word	0x03d09000
 80041e8:	46000000 	.word	0x46000000
 80041ec:	003d0900 	.word	0x003d0900
 80041f0:	00f42400 	.word	0x00f42400

080041f4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b089      	sub	sp, #36	; 0x24
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  uint32_t pllsource = 0, pll3m = 1, pll3fracen = 0 , hsivalue =0;
 80041fc:	2300      	movs	r3, #0
 80041fe:	61bb      	str	r3, [r7, #24]
 8004200:	2301      	movs	r3, #1
 8004202:	617b      	str	r3, [r7, #20]
 8004204:	2300      	movs	r3, #0
 8004206:	613b      	str	r3, [r7, #16]
 8004208:	2300      	movs	r3, #0
 800420a:	60fb      	str	r3, [r7, #12]
  float fracn3 =0 , pll3vco = 0;
 800420c:	f04f 0300 	mov.w	r3, #0
 8004210:	60bb      	str	r3, [r7, #8]
 8004212:	f04f 0300 	mov.w	r3, #0
 8004216:	61fb      	str	r3, [r7, #28]
  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004218:	4b8d      	ldr	r3, [pc, #564]	; (8004450 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 800421a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800421c:	f003 0303 	and.w	r3, r3, #3
 8004220:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004222:	4b8b      	ldr	r3, [pc, #556]	; (8004450 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 8004224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004226:	0d1b      	lsrs	r3, r3, #20
 8004228:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800422c:	617b      	str	r3, [r7, #20]
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 800422e:	4b88      	ldr	r3, [pc, #544]	; (8004450 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 8004230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004236:	613b      	str	r3, [r7, #16]
  fracn3 = (pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004238:	4b85      	ldr	r3, [pc, #532]	; (8004450 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 800423a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423c:	08db      	lsrs	r3, r3, #3
 800423e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	fb02 f303 	mul.w	r3, r2, r3
 8004248:	ee07 3a90 	vmov	s15, r3
 800424c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004250:	edc7 7a02 	vstr	s15, [r7, #8]
  switch (pllsource)
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	2b01      	cmp	r3, #1
 8004258:	d055      	beq.n	8004306 <HAL_RCCEx_GetPLL3ClockFreq+0x112>
 800425a:	2b01      	cmp	r3, #1
 800425c:	d302      	bcc.n	8004264 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 800425e:	2b02      	cmp	r3, #2
 8004260:	d072      	beq.n	8004348 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 8004262:	e092      	b.n	800438a <HAL_RCCEx_GetPLL3ClockFreq+0x196>
  {
  case 0x00:  /* HSI used as PLL clock source */
    
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004264:	4b7a      	ldr	r3, [pc, #488]	; (8004450 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0320 	and.w	r3, r3, #32
 800426c:	2b00      	cmp	r3, #0
 800426e:	d029      	beq.n	80042c4 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
    {
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004270:	4b77      	ldr	r3, [pc, #476]	; (8004450 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	08db      	lsrs	r3, r3, #3
 8004276:	f003 0303 	and.w	r3, r3, #3
 800427a:	4a76      	ldr	r2, [pc, #472]	; (8004454 <HAL_RCCEx_GetPLL3ClockFreq+0x260>)
 800427c:	fa22 f303 	lsr.w	r3, r2, r3
 8004280:	60fb      	str	r3, [r7, #12]
      pll3vco = (hsivalue / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	fbb2 f3f3 	udiv	r3, r2, r3
 800428a:	ee07 3a90 	vmov	s15, r3
 800428e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004292:	4b6f      	ldr	r3, [pc, #444]	; (8004450 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 8004294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800429a:	ee07 3a90 	vmov	s15, r3
 800429e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80042a6:	eddf 5a6c 	vldr	s11, [pc, #432]	; 8004458 <HAL_RCCEx_GetPLL3ClockFreq+0x264>
 80042aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042be:	edc7 7a07 	vstr	s15, [r7, #28]
    }
    else
    {
      pll3vco = (HSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
    }
    break;  
 80042c2:	e083      	b.n	80043cc <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
      pll3vco = (HSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 80042c4:	4a63      	ldr	r2, [pc, #396]	; (8004454 <HAL_RCCEx_GetPLL3ClockFreq+0x260>)
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042cc:	ee07 3a90 	vmov	s15, r3
 80042d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80042d4:	4b5e      	ldr	r3, [pc, #376]	; (8004450 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 80042d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042dc:	ee07 3a90 	vmov	s15, r3
 80042e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042e4:	ed97 6a02 	vldr	s12, [r7, #8]
 80042e8:	eddf 5a5b 	vldr	s11, [pc, #364]	; 8004458 <HAL_RCCEx_GetPLL3ClockFreq+0x264>
 80042ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004300:	edc7 7a07 	vstr	s15, [r7, #28]
    break;  
 8004304:	e062      	b.n	80043cc <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
  case 0x01:  /* HSI used as PLL clock source */
    pll3vco = (CSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8004306:	4a55      	ldr	r2, [pc, #340]	; (800445c <HAL_RCCEx_GetPLL3ClockFreq+0x268>)
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	fbb2 f3f3 	udiv	r3, r2, r3
 800430e:	ee07 3a90 	vmov	s15, r3
 8004312:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004316:	4b4e      	ldr	r3, [pc, #312]	; (8004450 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 8004318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800431e:	ee07 3a90 	vmov	s15, r3
 8004322:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004326:	ed97 6a02 	vldr	s12, [r7, #8]
 800432a:	eddf 5a4b 	vldr	s11, [pc, #300]	; 8004458 <HAL_RCCEx_GetPLL3ClockFreq+0x264>
 800432e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004332:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004336:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800433a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800433e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004342:	edc7 7a07 	vstr	s15, [r7, #28]
    break;
 8004346:	e041      	b.n	80043cc <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
    
  case 0x02:  /* HSE used as PLL clock source */
    pll3vco = (HSE_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8004348:	4a45      	ldr	r2, [pc, #276]	; (8004460 <HAL_RCCEx_GetPLL3ClockFreq+0x26c>)
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004350:	ee07 3a90 	vmov	s15, r3
 8004354:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004358:	4b3d      	ldr	r3, [pc, #244]	; (8004450 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 800435a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004360:	ee07 3a90 	vmov	s15, r3
 8004364:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004368:	ed97 6a02 	vldr	s12, [r7, #8]
 800436c:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8004458 <HAL_RCCEx_GetPLL3ClockFreq+0x264>
 8004370:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004374:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004378:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800437c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004380:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004384:	edc7 7a07 	vstr	s15, [r7, #28]
    break;
 8004388:	e020      	b.n	80043cc <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
    
  default:
    pll3vco = (CSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 800438a:	4a34      	ldr	r2, [pc, #208]	; (800445c <HAL_RCCEx_GetPLL3ClockFreq+0x268>)
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004392:	ee07 3a90 	vmov	s15, r3
 8004396:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800439a:	4b2d      	ldr	r3, [pc, #180]	; (8004450 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 800439c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043a2:	ee07 3a90 	vmov	s15, r3
 80043a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80043ae:	eddf 5a2a 	vldr	s11, [pc, #168]	; 8004458 <HAL_RCCEx_GetPLL3ClockFreq+0x264>
 80043b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043c6:	edc7 7a07 	vstr	s15, [r7, #28]
    break;
 80043ca:	bf00      	nop
  }
  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + 1 )) ;
 80043cc:	4b20      	ldr	r3, [pc, #128]	; (8004450 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 80043ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d0:	0a5b      	lsrs	r3, r3, #9
 80043d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043d6:	3301      	adds	r3, #1
 80043d8:	ee07 3a90 	vmov	s15, r3
 80043dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80043e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80043e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043ec:	ee17 2a90 	vmov	r2, s15
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	601a      	str	r2, [r3, #0]
  PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + 1 )) ;
 80043f4:	4b16      	ldr	r3, [pc, #88]	; (8004450 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 80043f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f8:	0c1b      	lsrs	r3, r3, #16
 80043fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043fe:	3301      	adds	r3, #1
 8004400:	ee07 3a90 	vmov	s15, r3
 8004404:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004408:	edd7 6a07 	vldr	s13, [r7, #28]
 800440c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004410:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004414:	ee17 2a90 	vmov	r2, s15
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	605a      	str	r2, [r3, #4]
  PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + 1 )) ;
 800441c:	4b0c      	ldr	r3, [pc, #48]	; (8004450 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 800441e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004420:	0e1b      	lsrs	r3, r3, #24
 8004422:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004426:	3301      	adds	r3, #1
 8004428:	ee07 3a90 	vmov	s15, r3
 800442c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004430:	edd7 6a07 	vldr	s13, [r7, #28]
 8004434:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004438:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800443c:	ee17 2a90 	vmov	r2, s15
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	609a      	str	r2, [r3, #8]
  
}
 8004444:	bf00      	nop
 8004446:	3724      	adds	r7, #36	; 0x24
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr
 8004450:	58024400 	.word	0x58024400
 8004454:	03d09000 	.word	0x03d09000
 8004458:	46000000 	.word	0x46000000
 800445c:	003d0900 	.word	0x003d0900
 8004460:	00f42400 	.word	0x00f42400

08004464 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8004464:	b480      	push	{r7}
 8004466:	b089      	sub	sp, #36	; 0x24
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  uint32_t   pllsource = 0, pll1m = 1, pll1fracen = 0, hsivalue=0;
 800446c:	2300      	movs	r3, #0
 800446e:	61bb      	str	r3, [r7, #24]
 8004470:	2301      	movs	r3, #1
 8004472:	617b      	str	r3, [r7, #20]
 8004474:	2300      	movs	r3, #0
 8004476:	613b      	str	r3, [r7, #16]
 8004478:	2300      	movs	r3, #0
 800447a:	60fb      	str	r3, [r7, #12]
  float fracn1, pll1vco =0;
 800447c:	f04f 0300 	mov.w	r3, #0
 8004480:	61fb      	str	r3, [r7, #28]
  
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004482:	4b8e      	ldr	r3, [pc, #568]	; (80046bc <HAL_RCCEx_GetPLL1ClockFreq+0x258>)
 8004484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004486:	f003 0303 	and.w	r3, r3, #3
 800448a:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800448c:	4b8b      	ldr	r3, [pc, #556]	; (80046bc <HAL_RCCEx_GetPLL1ClockFreq+0x258>)
 800448e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004490:	091b      	lsrs	r3, r3, #4
 8004492:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004496:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8004498:	4b88      	ldr	r3, [pc, #544]	; (80046bc <HAL_RCCEx_GetPLL1ClockFreq+0x258>)
 800449a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449c:	f003 0301 	and.w	r3, r3, #1
 80044a0:	613b      	str	r3, [r7, #16]
  fracn1 = (pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80044a2:	4b86      	ldr	r3, [pc, #536]	; (80046bc <HAL_RCCEx_GetPLL1ClockFreq+0x258>)
 80044a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044a6:	08db      	lsrs	r3, r3, #3
 80044a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80044ac:	693a      	ldr	r2, [r7, #16]
 80044ae:	fb02 f303 	mul.w	r3, r2, r3
 80044b2:	ee07 3a90 	vmov	s15, r3
 80044b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ba:	edc7 7a02 	vstr	s15, [r7, #8]
  switch (pllsource)
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d055      	beq.n	8004570 <HAL_RCCEx_GetPLL1ClockFreq+0x10c>
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d302      	bcc.n	80044ce <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d072      	beq.n	80045b2 <HAL_RCCEx_GetPLL1ClockFreq+0x14e>
 80044cc:	e092      	b.n	80045f4 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
  {
    
  case 0x00:  /* HSI used as PLL clock source */
    
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044ce:	4b7b      	ldr	r3, [pc, #492]	; (80046bc <HAL_RCCEx_GetPLL1ClockFreq+0x258>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0320 	and.w	r3, r3, #32
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d029      	beq.n	800452e <HAL_RCCEx_GetPLL1ClockFreq+0xca>
    {
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80044da:	4b78      	ldr	r3, [pc, #480]	; (80046bc <HAL_RCCEx_GetPLL1ClockFreq+0x258>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	08db      	lsrs	r3, r3, #3
 80044e0:	f003 0303 	and.w	r3, r3, #3
 80044e4:	4a76      	ldr	r2, [pc, #472]	; (80046c0 <HAL_RCCEx_GetPLL1ClockFreq+0x25c>)
 80044e6:	fa22 f303 	lsr.w	r3, r2, r3
 80044ea:	60fb      	str	r3, [r7, #12]
      pll1vco = (hsivalue / pll1m) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f4:	ee07 3a90 	vmov	s15, r3
 80044f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80044fc:	4b6f      	ldr	r3, [pc, #444]	; (80046bc <HAL_RCCEx_GetPLL1ClockFreq+0x258>)
 80044fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004500:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004504:	ee07 3a90 	vmov	s15, r3
 8004508:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800450c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004510:	eddf 5a6c 	vldr	s11, [pc, #432]	; 80046c4 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
 8004514:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004518:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800451c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004520:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004524:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004528:	edc7 7a07 	vstr	s15, [r7, #28]
    }
    else
    {
      pll1vco = (HSI_VALUE / pll1m) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
    }
    break;
 800452c:	e083      	b.n	8004636 <HAL_RCCEx_GetPLL1ClockFreq+0x1d2>
      pll1vco = (HSI_VALUE / pll1m) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 800452e:	4a64      	ldr	r2, [pc, #400]	; (80046c0 <HAL_RCCEx_GetPLL1ClockFreq+0x25c>)
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	fbb2 f3f3 	udiv	r3, r2, r3
 8004536:	ee07 3a90 	vmov	s15, r3
 800453a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800453e:	4b5f      	ldr	r3, [pc, #380]	; (80046bc <HAL_RCCEx_GetPLL1ClockFreq+0x258>)
 8004540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004546:	ee07 3a90 	vmov	s15, r3
 800454a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800454e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004552:	eddf 5a5c 	vldr	s11, [pc, #368]	; 80046c4 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
 8004556:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800455a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800455e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004562:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800456a:	edc7 7a07 	vstr	s15, [r7, #28]
    break;
 800456e:	e062      	b.n	8004636 <HAL_RCCEx_GetPLL1ClockFreq+0x1d2>
  case 0x01:  /* CSI used as PLL clock source */
    pll1vco = (CSI_VALUE / pll1m) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8004570:	4a55      	ldr	r2, [pc, #340]	; (80046c8 <HAL_RCCEx_GetPLL1ClockFreq+0x264>)
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	fbb2 f3f3 	udiv	r3, r2, r3
 8004578:	ee07 3a90 	vmov	s15, r3
 800457c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004580:	4b4e      	ldr	r3, [pc, #312]	; (80046bc <HAL_RCCEx_GetPLL1ClockFreq+0x258>)
 8004582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004584:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004588:	ee07 3a90 	vmov	s15, r3
 800458c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004590:	ed97 6a02 	vldr	s12, [r7, #8]
 8004594:	eddf 5a4b 	vldr	s11, [pc, #300]	; 80046c4 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
 8004598:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800459c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045ac:	edc7 7a07 	vstr	s15, [r7, #28]
    break;
 80045b0:	e041      	b.n	8004636 <HAL_RCCEx_GetPLL1ClockFreq+0x1d2>
    
  case 0x02:  /* HSE used as PLL clock source */
    pll1vco = (HSE_VALUE / pll1m) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 80045b2:	4a46      	ldr	r2, [pc, #280]	; (80046cc <HAL_RCCEx_GetPLL1ClockFreq+0x268>)
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ba:	ee07 3a90 	vmov	s15, r3
 80045be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80045c2:	4b3e      	ldr	r3, [pc, #248]	; (80046bc <HAL_RCCEx_GetPLL1ClockFreq+0x258>)
 80045c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045ca:	ee07 3a90 	vmov	s15, r3
 80045ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80045d6:	eddf 5a3b 	vldr	s11, [pc, #236]	; 80046c4 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
 80045da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045ee:	edc7 7a07 	vstr	s15, [r7, #28]
    break;
 80045f2:	e020      	b.n	8004636 <HAL_RCCEx_GetPLL1ClockFreq+0x1d2>
    
  default:
    pll1vco = (CSI_VALUE / pll1m) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 80045f4:	4a34      	ldr	r2, [pc, #208]	; (80046c8 <HAL_RCCEx_GetPLL1ClockFreq+0x264>)
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045fc:	ee07 3a90 	vmov	s15, r3
 8004600:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004604:	4b2d      	ldr	r3, [pc, #180]	; (80046bc <HAL_RCCEx_GetPLL1ClockFreq+0x258>)
 8004606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004608:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800460c:	ee07 3a90 	vmov	s15, r3
 8004610:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004614:	ed97 6a02 	vldr	s12, [r7, #8]
 8004618:	eddf 5a2a 	vldr	s11, [pc, #168]	; 80046c4 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
 800461c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004620:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004624:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004628:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800462c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004630:	edc7 7a07 	vstr	s15, [r7, #28]
    break;
 8004634:	bf00      	nop
  }
  
  PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(pll1vco/(((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + 1 )) ;
 8004636:	4b21      	ldr	r3, [pc, #132]	; (80046bc <HAL_RCCEx_GetPLL1ClockFreq+0x258>)
 8004638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463a:	0a5b      	lsrs	r3, r3, #9
 800463c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004640:	3301      	adds	r3, #1
 8004642:	ee07 3a90 	vmov	s15, r3
 8004646:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800464a:	edd7 6a07 	vldr	s13, [r7, #28]
 800464e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004652:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004656:	ee17 2a90 	vmov	r2, s15
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	601a      	str	r2, [r3, #0]
  PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(pll1vco/(((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + 1 )) ;
 800465e:	4b17      	ldr	r3, [pc, #92]	; (80046bc <HAL_RCCEx_GetPLL1ClockFreq+0x258>)
 8004660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004662:	0c1b      	lsrs	r3, r3, #16
 8004664:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004668:	3301      	adds	r3, #1
 800466a:	ee07 3a90 	vmov	s15, r3
 800466e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004672:	edd7 6a07 	vldr	s13, [r7, #28]
 8004676:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800467a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800467e:	ee17 2a90 	vmov	r2, s15
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	605a      	str	r2, [r3, #4]
  PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(pll1vco/(((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + 1 )) ;
 8004686:	4b0d      	ldr	r3, [pc, #52]	; (80046bc <HAL_RCCEx_GetPLL1ClockFreq+0x258>)
 8004688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468a:	0e1b      	lsrs	r3, r3, #24
 800468c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004690:	3301      	adds	r3, #1
 8004692:	ee07 3a90 	vmov	s15, r3
 8004696:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800469a:	edd7 6a07 	vldr	s13, [r7, #28]
 800469e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046a6:	ee17 2a90 	vmov	r2, s15
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	609a      	str	r2, [r3, #8]
  
}
 80046ae:	bf00      	nop
 80046b0:	3724      	adds	r7, #36	; 0x24
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	58024400 	.word	0x58024400
 80046c0:	03d09000 	.word	0x03d09000
 80046c4:	46000000 	.word	0x46000000
 80046c8:	003d0900 	.word	0x003d0900
 80046cc:	00f42400 	.word	0x00f42400

080046d0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  
  uint32_t tickstart = 0;
 80046d8:	2300      	movs	r3, #0
 80046da:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80046dc:	2300      	movs	r3, #0
 80046de:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_RCC_PLL2P_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLL2R_VALUE(pll2->PLL2R));
  assert_param(IS_RCC_PLL2Q_VALUE(pll2->PLL2Q));
  
  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80046e0:	4b3a      	ldr	r3, [pc, #232]	; (80047cc <RCCEx_PLL2_Config+0xfc>)
 80046e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e4:	f003 0303 	and.w	r3, r3, #3
 80046e8:	2b03      	cmp	r3, #3
 80046ea:	d101      	bne.n	80046f0 <RCCEx_PLL2_Config+0x20>
  {
    return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e069      	b.n	80047c4 <RCCEx_PLL2_Config+0xf4>
  
  
  else    
  {  
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80046f0:	4a36      	ldr	r2, [pc, #216]	; (80047cc <RCCEx_PLL2_Config+0xfc>)
 80046f2:	4b36      	ldr	r3, [pc, #216]	; (80047cc <RCCEx_PLL2_Config+0xfc>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80046fa:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046fc:	f7fb fe42 	bl	8000384 <HAL_GetTick>
 8004700:	60f8      	str	r0, [r7, #12]
    
    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8004702:	e008      	b.n	8004716 <RCCEx_PLL2_Config+0x46>
    {
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004704:	f7fb fe3e 	bl	8000384 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b02      	cmp	r3, #2
 8004710:	d901      	bls.n	8004716 <RCCEx_PLL2_Config+0x46>
      {
        return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e056      	b.n	80047c4 <RCCEx_PLL2_Config+0xf4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8004716:	4b2d      	ldr	r3, [pc, #180]	; (80047cc <RCCEx_PLL2_Config+0xfc>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1f0      	bne.n	8004704 <RCCEx_PLL2_Config+0x34>
      }
    }
    
    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004722:	492a      	ldr	r1, [pc, #168]	; (80047cc <RCCEx_PLL2_Config+0xfc>)
 8004724:	4b29      	ldr	r3, [pc, #164]	; (80047cc <RCCEx_PLL2_Config+0xfc>)
 8004726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004728:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	031b      	lsls	r3, r3, #12
 8004732:	4313      	orrs	r3, r2
 8004734:	628b      	str	r3, [r1, #40]	; 0x28
 8004736:	4925      	ldr	r1, [pc, #148]	; (80047cc <RCCEx_PLL2_Config+0xfc>)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	3b01      	subs	r3, #1
 800473e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	3b01      	subs	r3, #1
 8004748:	025b      	lsls	r3, r3, #9
 800474a:	b29b      	uxth	r3, r3
 800474c:	431a      	orrs	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	3b01      	subs	r3, #1
 8004754:	041b      	lsls	r3, r3, #16
 8004756:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800475a:	431a      	orrs	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	3b01      	subs	r3, #1
 8004762:	061b      	lsls	r3, r3, #24
 8004764:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004768:	4313      	orrs	r3, r2
 800476a:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);
    
    /* Select PLL2 input reference frequency range: VCI */  
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800476c:	4917      	ldr	r1, [pc, #92]	; (80047cc <RCCEx_PLL2_Config+0xfc>)
 800476e:	4b17      	ldr	r3, [pc, #92]	; (80047cc <RCCEx_PLL2_Config+0xfc>)
 8004770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004772:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	4313      	orrs	r3, r2
 800477c:	62cb      	str	r3, [r1, #44]	; 0x2c
    
    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800477e:	4913      	ldr	r1, [pc, #76]	; (80047cc <RCCEx_PLL2_Config+0xfc>)
 8004780:	4b12      	ldr	r3, [pc, #72]	; (80047cc <RCCEx_PLL2_Config+0xfc>)
 8004782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004784:	f023 0220 	bic.w	r2, r3, #32
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	4313      	orrs	r3, r2
 800478e:	62cb      	str	r3, [r1, #44]	; 0x2c
    
    
    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004790:	4a0e      	ldr	r2, [pc, #56]	; (80047cc <RCCEx_PLL2_Config+0xfc>)
 8004792:	4b0e      	ldr	r3, [pc, #56]	; (80047cc <RCCEx_PLL2_Config+0xfc>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800479a:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800479c:	f7fb fdf2 	bl	8000384 <HAL_GetTick>
 80047a0:	60f8      	str	r0, [r7, #12]
    
    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
 80047a2:	e008      	b.n	80047b6 <RCCEx_PLL2_Config+0xe6>
    {
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80047a4:	f7fb fdee 	bl	8000384 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d901      	bls.n	80047b6 <RCCEx_PLL2_Config+0xe6>
      {
        return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e006      	b.n	80047c4 <RCCEx_PLL2_Config+0xf4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
 80047b6:	4b05      	ldr	r3, [pc, #20]	; (80047cc <RCCEx_PLL2_Config+0xfc>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d0f0      	beq.n	80047a4 <RCCEx_PLL2_Config+0xd4>
    }
    
  }
  
  
  return status;
 80047c2:	7afb      	ldrb	r3, [r7, #11]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3710      	adds	r7, #16
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	58024400 	.word	0x58024400

080047d0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  
  uint32_t tickstart = 0;
 80047d8:	2300      	movs	r3, #0
 80047da:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80047dc:	2300      	movs	r3, #0
 80047de:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_RCC_PLL3P_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLL3R_VALUE(pll3->PLL3R));
  assert_param(IS_RCC_PLL3Q_VALUE(pll3->PLL3Q));
  
  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80047e0:	4b3a      	ldr	r3, [pc, #232]	; (80048cc <RCCEx_PLL3_Config+0xfc>)
 80047e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e4:	f003 0303 	and.w	r3, r3, #3
 80047e8:	2b03      	cmp	r3, #3
 80047ea:	d101      	bne.n	80047f0 <RCCEx_PLL3_Config+0x20>
  {
    return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e069      	b.n	80048c4 <RCCEx_PLL3_Config+0xf4>
  
  
  else    
  { 
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80047f0:	4a36      	ldr	r2, [pc, #216]	; (80048cc <RCCEx_PLL3_Config+0xfc>)
 80047f2:	4b36      	ldr	r3, [pc, #216]	; (80048cc <RCCEx_PLL3_Config+0xfc>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047fa:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047fc:	f7fb fdc2 	bl	8000384 <HAL_GetTick>
 8004800:	60f8      	str	r0, [r7, #12]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
 8004802:	e008      	b.n	8004816 <RCCEx_PLL3_Config+0x46>
    {
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004804:	f7fb fdbe 	bl	8000384 <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	2b02      	cmp	r3, #2
 8004810:	d901      	bls.n	8004816 <RCCEx_PLL3_Config+0x46>
      {
        return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e056      	b.n	80048c4 <RCCEx_PLL3_Config+0xf4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
 8004816:	4b2d      	ldr	r3, [pc, #180]	; (80048cc <RCCEx_PLL3_Config+0xfc>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1f0      	bne.n	8004804 <RCCEx_PLL3_Config+0x34>
      }
    }
    
    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004822:	492a      	ldr	r1, [pc, #168]	; (80048cc <RCCEx_PLL3_Config+0xfc>)
 8004824:	4b29      	ldr	r3, [pc, #164]	; (80048cc <RCCEx_PLL3_Config+0xfc>)
 8004826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004828:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	051b      	lsls	r3, r3, #20
 8004832:	4313      	orrs	r3, r2
 8004834:	628b      	str	r3, [r1, #40]	; 0x28
 8004836:	4925      	ldr	r1, [pc, #148]	; (80048cc <RCCEx_PLL3_Config+0xfc>)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	3b01      	subs	r3, #1
 800483e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	3b01      	subs	r3, #1
 8004848:	025b      	lsls	r3, r3, #9
 800484a:	b29b      	uxth	r3, r3
 800484c:	431a      	orrs	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	3b01      	subs	r3, #1
 8004854:	041b      	lsls	r3, r3, #16
 8004856:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800485a:	431a      	orrs	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	3b01      	subs	r3, #1
 8004862:	061b      	lsls	r3, r3, #24
 8004864:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004868:	4313      	orrs	r3, r2
 800486a:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);
    
    /* Select PLL3 input reference frequency range: VCI */  
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800486c:	4917      	ldr	r1, [pc, #92]	; (80048cc <RCCEx_PLL3_Config+0xfc>)
 800486e:	4b17      	ldr	r3, [pc, #92]	; (80048cc <RCCEx_PLL3_Config+0xfc>)
 8004870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004872:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	4313      	orrs	r3, r2
 800487c:	62cb      	str	r3, [r1, #44]	; 0x2c
    
    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800487e:	4913      	ldr	r1, [pc, #76]	; (80048cc <RCCEx_PLL3_Config+0xfc>)
 8004880:	4b12      	ldr	r3, [pc, #72]	; (80048cc <RCCEx_PLL3_Config+0xfc>)
 8004882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004884:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	699b      	ldr	r3, [r3, #24]
 800488c:	4313      	orrs	r3, r2
 800488e:	62cb      	str	r3, [r1, #44]	; 0x2c
    
    
    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004890:	4a0e      	ldr	r2, [pc, #56]	; (80048cc <RCCEx_PLL3_Config+0xfc>)
 8004892:	4b0e      	ldr	r3, [pc, #56]	; (80048cc <RCCEx_PLL3_Config+0xfc>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800489a:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800489c:	f7fb fd72 	bl	8000384 <HAL_GetTick>
 80048a0:	60f8      	str	r0, [r7, #12]
    
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
 80048a2:	e008      	b.n	80048b6 <RCCEx_PLL3_Config+0xe6>
    {
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80048a4:	f7fb fd6e 	bl	8000384 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d901      	bls.n	80048b6 <RCCEx_PLL3_Config+0xe6>
      {
        return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e006      	b.n	80048c4 <RCCEx_PLL3_Config+0xf4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
 80048b6:	4b05      	ldr	r3, [pc, #20]	; (80048cc <RCCEx_PLL3_Config+0xfc>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d0f0      	beq.n	80048a4 <RCCEx_PLL3_Config+0xd4>
    }
    
  }
  
  
  return status;
 80048c2:	7afb      	ldrb	r3, [r7, #11]
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3710      	adds	r7, #16
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	58024400 	.word	0x58024400

080048d0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b08c      	sub	sp, #48	; 0x30
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 80048d8:	2300      	movs	r3, #0
 80048da:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t ckstr_bits  = 0;
 80048dc:	2300      	movs	r3, #0
 80048de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t syncen_bits = 0;
 80048e0:	2300      	movs	r3, #0
 80048e2:	627b      	str	r3, [r7, #36]	; 0x24
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d101      	bne.n	80048ee <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e20c      	b.n	8004d08 <HAL_SAI_Init+0x438>
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));

  if(hsai->Init.PdmInit.Activation == ENABLE)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d11d      	bne.n	8004934 <HAL_SAI_Init+0x64>

    /* The PDM function is intended to be used in conjunction with SAI_A sub-block
       configured in TDM MASTER mode. It cannot be used with SAI_B sub-block.
       Make sure that the SAI is already operating in TDM master mode before
       enabling the PDM interface */
    if(((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI2_Block_A) && \
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a8c      	ldr	r2, [pc, #560]	; (8004b30 <HAL_SAI_Init+0x260>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d00e      	beq.n	8004920 <HAL_SAI_Init+0x50>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a8b      	ldr	r2, [pc, #556]	; (8004b34 <HAL_SAI_Init+0x264>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d009      	beq.n	8004920 <HAL_SAI_Init+0x50>
        (hsai->Instance != SAI3_Block_A) && (hsai->Instance != SAI4_Block_A)) || \
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
    if(((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI2_Block_A) && \
 8004910:	4a89      	ldr	r2, [pc, #548]	; (8004b38 <HAL_SAI_Init+0x268>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d004      	beq.n	8004920 <HAL_SAI_Init+0x50>
        (hsai->Instance != SAI3_Block_A) && (hsai->Instance != SAI4_Block_A)) || \
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a88      	ldr	r2, [pc, #544]	; (8004b3c <HAL_SAI_Init+0x26c>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d107      	bne.n	8004930 <HAL_SAI_Init+0x60>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||  \
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
        (hsai->Instance != SAI3_Block_A) && (hsai->Instance != SAI4_Block_A)) || \
 8004924:	2b01      	cmp	r3, #1
 8004926:	d103      	bne.n	8004930 <HAL_SAI_Init+0x60>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||  \
 800492c:	2b00      	cmp	r3, #0
 800492e:	d001      	beq.n	8004934 <HAL_SAI_Init+0x64>
    {
      return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e1e9      	b.n	8004d08 <HAL_SAI_Init+0x438>
    }
  }

  /* Get the SAI base address according to the SAI handle */
  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a7d      	ldr	r2, [pc, #500]	; (8004b30 <HAL_SAI_Init+0x260>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d004      	beq.n	8004948 <HAL_SAI_Init+0x78>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a7f      	ldr	r2, [pc, #508]	; (8004b40 <HAL_SAI_Init+0x270>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d102      	bne.n	800494e <HAL_SAI_Init+0x7e>
  {
    SaiBaseAddress = SAI1;
 8004948:	4b7e      	ldr	r3, [pc, #504]	; (8004b44 <HAL_SAI_Init+0x274>)
 800494a:	623b      	str	r3, [r7, #32]
 800494c:	e01b      	b.n	8004986 <HAL_SAI_Init+0xb6>
  }
  else if((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a78      	ldr	r2, [pc, #480]	; (8004b34 <HAL_SAI_Init+0x264>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d004      	beq.n	8004962 <HAL_SAI_Init+0x92>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a7a      	ldr	r2, [pc, #488]	; (8004b48 <HAL_SAI_Init+0x278>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d102      	bne.n	8004968 <HAL_SAI_Init+0x98>
  {
    SaiBaseAddress = SAI2;
 8004962:	4b7a      	ldr	r3, [pc, #488]	; (8004b4c <HAL_SAI_Init+0x27c>)
 8004964:	623b      	str	r3, [r7, #32]
 8004966:	e00e      	b.n	8004986 <HAL_SAI_Init+0xb6>
  }
  else if((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a72      	ldr	r2, [pc, #456]	; (8004b38 <HAL_SAI_Init+0x268>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d004      	beq.n	800497c <HAL_SAI_Init+0xac>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a76      	ldr	r2, [pc, #472]	; (8004b50 <HAL_SAI_Init+0x280>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d102      	bne.n	8004982 <HAL_SAI_Init+0xb2>
  {
    SaiBaseAddress = SAI3;
 800497c:	4b75      	ldr	r3, [pc, #468]	; (8004b54 <HAL_SAI_Init+0x284>)
 800497e:	623b      	str	r3, [r7, #32]
 8004980:	e001      	b.n	8004986 <HAL_SAI_Init+0xb6>
  }
  else
  {
    SaiBaseAddress = SAI4;
 8004982:	4b75      	ldr	r3, [pc, #468]	; (8004b58 <HAL_SAI_Init+0x288>)
 8004984:	623b      	str	r3, [r7, #32]
  }

  if(hsai->State == HAL_SAI_STATE_RESET)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800498c:	b2db      	uxtb	r3, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	d106      	bne.n	80049a0 <HAL_SAI_Init+0xd0>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f002 fc00 	bl	80071a0 <HAL_SAI_MspInit>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2202      	movs	r2, #2
 80049a4:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f000 fcff 	bl	80053ac <SAI_Disable>

  /* SAI PDM Configuration -----------------------------------------*/
  /* Disable PDM interface */
  CLEAR_BIT(SaiBaseAddress->PDMCR, SAI_PDMCR_PDMEN);
 80049ae:	6a3b      	ldr	r3, [r7, #32]
 80049b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049b2:	f023 0201 	bic.w	r2, r3, #1
 80049b6:	6a3b      	ldr	r3, [r7, #32]
 80049b8:	645a      	str	r2, [r3, #68]	; 0x44

  if(hsai->Init.PdmInit.Activation == ENABLE)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d118      	bne.n	80049f6 <HAL_SAI_Init+0x126>
  {
    /* Configure and enable the PDM interface */
    SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                           ((hsai->Init.PdmInit.MicPairsNbr - 1) << SAI_PDMCR_MICNBR_OFFSET));
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049cc:	1e59      	subs	r1, r3, #1
 80049ce:	2330      	movs	r3, #48	; 0x30
 80049d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	fa93 f3a3 	rbit	r3, r3
 80049d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	fab3 f383 	clz	r3, r3
 80049e0:	fa01 f303 	lsl.w	r3, r1, r3
    SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80049e4:	431a      	orrs	r2, r3
 80049e6:	6a3b      	ldr	r3, [r7, #32]
 80049e8:	645a      	str	r2, [r3, #68]	; 0x44
    SET_BIT(SaiBaseAddress->PDMCR, SAI_PDMCR_PDMEN);
 80049ea:	6a3b      	ldr	r3, [r7, #32]
 80049ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ee:	f043 0201 	orr.w	r2, r3, #1
 80049f2:	6a3b      	ldr	r3, [r7, #32]
 80049f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d007      	beq.n	8004a0e <HAL_SAI_Init+0x13e>
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d302      	bcc.n	8004a08 <HAL_SAI_Init+0x138>
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d006      	beq.n	8004a14 <HAL_SAI_Init+0x144>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8004a06:	e008      	b.n	8004a1a <HAL_SAI_Init+0x14a>
      tmpregisterGCR = 0;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8004a0c:	e005      	b.n	8004a1a <HAL_SAI_Init+0x14a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004a0e:	2310      	movs	r3, #16
 8004a10:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8004a12:	e002      	b.n	8004a1a <HAL_SAI_Init+0x14a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8004a14:	2320      	movs	r3, #32
 8004a16:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8004a18:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	2b03      	cmp	r3, #3
 8004a20:	d81d      	bhi.n	8004a5e <HAL_SAI_Init+0x18e>
 8004a22:	a201      	add	r2, pc, #4	; (adr r2, 8004a28 <HAL_SAI_Init+0x158>)
 8004a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a28:	08004a39 	.word	0x08004a39
 8004a2c:	08004a3f 	.word	0x08004a3f
 8004a30:	08004a47 	.word	0x08004a47
 8004a34:	08004a4f 	.word	0x08004a4f
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      break;
 8004a3c:	e010      	b.n	8004a60 <HAL_SAI_Init+0x190>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 8004a3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a42:	627b      	str	r3, [r7, #36]	; 0x24
      }
      break;
 8004a44:	e00c      	b.n	8004a60 <HAL_SAI_Init+0x190>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8004a46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a4a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      break;
 8004a4c:	e008      	b.n	8004a60 <HAL_SAI_Init+0x190>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8004a4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a52:	627b      	str	r3, [r7, #36]	; 0x24
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a56:	f043 0301 	orr.w	r3, r3, #1
 8004a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      break;
 8004a5c:	e000      	b.n	8004a60 <HAL_SAI_Init+0x190>
    default:
      break;
 8004a5e:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8004a60:	6a3b      	ldr	r3, [r7, #32]
 8004a62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a64:	601a      	str	r2, [r3, #0]

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	69db      	ldr	r3, [r3, #28]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	f000 80a1 	beq.w	8004bb2 <HAL_SAI_Init+0x2e2>
  {
    uint32_t freq = 0;
 8004a70:	2300      	movs	r3, #0
 8004a72:	61fb      	str	r3, [r7, #28]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a2d      	ldr	r2, [pc, #180]	; (8004b30 <HAL_SAI_Init+0x260>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d004      	beq.n	8004a88 <HAL_SAI_Init+0x1b8>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a2f      	ldr	r2, [pc, #188]	; (8004b40 <HAL_SAI_Init+0x270>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d104      	bne.n	8004a92 <HAL_SAI_Init+0x1c2>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004a88:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004a8c:	f7ff f8b6 	bl	8003bfc <HAL_RCCEx_GetPeriphCLKFreq>
 8004a90:	61f8      	str	r0, [r7, #28]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a27      	ldr	r2, [pc, #156]	; (8004b34 <HAL_SAI_Init+0x264>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d004      	beq.n	8004aa6 <HAL_SAI_Init+0x1d6>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a29      	ldr	r2, [pc, #164]	; (8004b48 <HAL_SAI_Init+0x278>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d104      	bne.n	8004ab0 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004aa6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004aaa:	f7ff f8a7 	bl	8003bfc <HAL_RCCEx_GetPeriphCLKFreq>
 8004aae:	61f8      	str	r0, [r7, #28]
    }
    if((hsai->Instance == SAI3_Block_A ) || (hsai->Instance == SAI3_Block_B ))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a20      	ldr	r2, [pc, #128]	; (8004b38 <HAL_SAI_Init+0x268>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d004      	beq.n	8004ac4 <HAL_SAI_Init+0x1f4>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a24      	ldr	r2, [pc, #144]	; (8004b50 <HAL_SAI_Init+0x280>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d104      	bne.n	8004ace <HAL_SAI_Init+0x1fe>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8004ac4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004ac8:	f7ff f898 	bl	8003bfc <HAL_RCCEx_GetPeriphCLKFreq>
 8004acc:	61f8      	str	r0, [r7, #28]
    }
    if(hsai->Instance == SAI4_Block_A)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a1a      	ldr	r2, [pc, #104]	; (8004b3c <HAL_SAI_Init+0x26c>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d104      	bne.n	8004ae2 <HAL_SAI_Init+0x212>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8004ad8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004adc:	f7ff f88e 	bl	8003bfc <HAL_RCCEx_GetPeriphCLKFreq>
 8004ae0:	61f8      	str	r0, [r7, #28]
    }
    if(hsai->Instance == SAI4_Block_B)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a1d      	ldr	r2, [pc, #116]	; (8004b5c <HAL_SAI_Init+0x28c>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d104      	bne.n	8004af6 <HAL_SAI_Init+0x226>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8004aec:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004af0:	f7ff f884 	bl	8003bfc <HAL_RCCEx_GetPeriphCLKFreq>
 8004af4:	61f8      	str	r0, [r7, #28]
    /* Configure Master Clock using the following formula :
       If NOMCK = 1
       MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       If NOMCK = 0
       MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if(hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004afe:	d10f      	bne.n	8004b20 <HAL_SAI_Init+0x250>
    {
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10) / (hsai->Init.AudioFrequency * hsai->FrameInit.FrameLength);
 8004b00:	69fa      	ldr	r2, [r7, #28]
 8004b02:	4613      	mov	r3, r2
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	4413      	add	r3, r2
 8004b08:	005b      	lsls	r3, r3, #1
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	69db      	ldr	r3, [r3, #28]
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004b14:	fb02 f303 	mul.w	r3, r2, r3
 8004b18:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b1c:	61bb      	str	r3, [r7, #24]
 8004b1e:	e030      	b.n	8004b82 <HAL_SAI_Init+0x2b2>
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;

      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE)? 2 : 1;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b28:	d11a      	bne.n	8004b60 <HAL_SAI_Init+0x290>
 8004b2a:	2302      	movs	r3, #2
 8004b2c:	e019      	b.n	8004b62 <HAL_SAI_Init+0x292>
 8004b2e:	bf00      	nop
 8004b30:	40015804 	.word	0x40015804
 8004b34:	40015c04 	.word	0x40015c04
 8004b38:	40016004 	.word	0x40016004
 8004b3c:	58005404 	.word	0x58005404
 8004b40:	40015824 	.word	0x40015824
 8004b44:	40015800 	.word	0x40015800
 8004b48:	40015c24 	.word	0x40015c24
 8004b4c:	40015c00 	.word	0x40015c00
 8004b50:	40016024 	.word	0x40016024
 8004b54:	40016000 	.word	0x40016000
 8004b58:	58005400 	.word	0x58005400
 8004b5c:	58005424 	.word	0x58005424
 8004b60:	2301      	movs	r3, #1
 8004b62:	617b      	str	r3, [r7, #20]

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10) / (hsai->Init.AudioFrequency * tmposr * 256);
 8004b64:	69fa      	ldr	r2, [r7, #28]
 8004b66:	4613      	mov	r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	4413      	add	r3, r2
 8004b6c:	005b      	lsls	r3, r3, #1
 8004b6e:	4619      	mov	r1, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	69db      	ldr	r3, [r3, #28]
 8004b74:	697a      	ldr	r2, [r7, #20]
 8004b76:	fb02 f303 	mul.w	r3, r2, r3
 8004b7a:	021b      	lsls	r3, r3, #8
 8004b7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b80:	61bb      	str	r3, [r7, #24]
    }

    hsai->Init.Mckdiv = tmpval / 10;
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	4a62      	ldr	r2, [pc, #392]	; (8004d10 <HAL_SAI_Init+0x440>)
 8004b86:	fba2 2303 	umull	r2, r3, r2, r3
 8004b8a:	08da      	lsrs	r2, r3, #3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 8004b90:	69b9      	ldr	r1, [r7, #24]
 8004b92:	4b5f      	ldr	r3, [pc, #380]	; (8004d10 <HAL_SAI_Init+0x440>)
 8004b94:	fba3 2301 	umull	r2, r3, r3, r1
 8004b98:	08da      	lsrs	r2, r3, #3
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	4413      	add	r3, r2
 8004ba0:	005b      	lsls	r3, r3, #1
 8004ba2:	1aca      	subs	r2, r1, r3
 8004ba4:	2a08      	cmp	r2, #8
 8004ba6:	d904      	bls.n	8004bb2 <HAL_SAI_Init+0x2e2>
    {
      hsai->Init.Mckdiv += 1;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a1b      	ldr	r3, [r3, #32]
 8004bac:	1c5a      	adds	r2, r3, #1
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	621a      	str	r2, [r3, #32]
    }
  }

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d003      	beq.n	8004bc2 <HAL_SAI_Init+0x2f2>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d109      	bne.n	8004bd6 <HAL_SAI_Init+0x306>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d101      	bne.n	8004bce <HAL_SAI_Init+0x2fe>
 8004bca:	2300      	movs	r3, #0
 8004bcc:	e001      	b.n	8004bd2 <HAL_SAI_Init+0x302>
 8004bce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004bd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bd4:	e008      	b.n	8004be8 <HAL_SAI_Init+0x318>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d102      	bne.n	8004be4 <HAL_SAI_Init+0x314>
 8004bde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004be2:	e000      	b.n	8004be6 <HAL_SAI_Init+0x316>
 8004be4:	2300      	movs	r3, #0
 8004be6:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &=~ (SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	6819      	ldr	r1, [r3, #0]
 8004bf2:	4b48      	ldr	r3, [pc, #288]	; (8004d14 <HAL_SAI_Init+0x444>)
 8004bf4:	400b      	ands	r3, r1
 8004bf6:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	6812      	ldr	r2, [r2, #0]
 8004c00:	6811      	ldr	r1, [r2, #0]
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	6850      	ldr	r0, [r2, #4]
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004c0a:	4310      	orrs	r0, r2
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	6c52      	ldr	r2, [r2, #68]	; 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004c10:	4310      	orrs	r0, r2
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004c16:	4310      	orrs	r0, r2
 8004c18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c1a:	4310      	orrs	r0, r2
                          ckstr_bits | syncen_bits |                             \
 8004c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c1e:	4310      	orrs	r0, r2
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	6a92      	ldr	r2, [r2, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 8004c24:	4310      	orrs	r0, r2
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	6912      	ldr	r2, [r2, #16]
 8004c2a:	4310      	orrs	r0, r2
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	6952      	ldr	r2, [r2, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004c30:	4310      	orrs	r0, r2
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	6a12      	ldr	r2, [r2, #32]
 8004c36:	0512      	lsls	r2, r2, #20
 8004c38:	4310      	orrs	r0, r2
                        hsai->Init.MckOverSampling);
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8004c3e:	4302      	orrs	r2, r0
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004c40:	430a      	orrs	r2, r1
 8004c42:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	6859      	ldr	r1, [r3, #4]
 8004c4e:	4b32      	ldr	r3, [pc, #200]	; (8004d18 <HAL_SAI_Init+0x448>)
 8004c50:	400b      	ands	r3, r1
 8004c52:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	6812      	ldr	r2, [r2, #0]
 8004c5c:	6851      	ldr	r1, [r2, #4]
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	6990      	ldr	r0, [r2, #24]
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004c66:	4310      	orrs	r0, r2
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004c6c:	4302      	orrs	r2, r0
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	6899      	ldr	r1, [r3, #8]
 8004c7c:	4b27      	ldr	r3, [pc, #156]	; (8004d1c <HAL_SAI_Init+0x44c>)
 8004c7e:	400b      	ands	r3, r1
 8004c80:	6093      	str	r3, [r2, #8]
                            SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) | \
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	6812      	ldr	r2, [r2, #0]
 8004c8a:	6891      	ldr	r1, [r2, #8]
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004c90:	1e50      	subs	r0, r2, #1
                            hsai->FrameInit.FSOffset |         \
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	6e12      	ldr	r2, [r2, #96]	; 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) | \
 8004c96:	4310      	orrs	r0, r2
                            hsai->FrameInit.FSDefinition |     \
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	6d92      	ldr	r2, [r2, #88]	; 0x58
                            hsai->FrameInit.FSOffset |         \
 8004c9c:	4310      	orrs	r0, r2
                            hsai->FrameInit.FSPolarity   |     \
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
                            hsai->FrameInit.FSDefinition |     \
 8004ca2:	4310      	orrs	r0, r2
                            ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004ca8:	3a01      	subs	r2, #1
 8004caa:	0212      	lsls	r2, r2, #8
                            hsai->FrameInit.FSPolarity   |     \
 8004cac:	4302      	orrs	r2, r0
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) | \
 8004cae:	430a      	orrs	r2, r1
 8004cb0:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68d9      	ldr	r1, [r3, #12]
 8004cbc:	f24f 0320 	movw	r3, #61472	; 0xf020
 8004cc0:	400b      	ands	r3, r1
 8004cc2:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize | \
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	6812      	ldr	r2, [r2, #0]
 8004ccc:	68d1      	ldr	r1, [r2, #12]
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004cd6:	4310      	orrs	r0, r2
                            (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004cdc:	0412      	lsls	r2, r2, #16
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize | \
 8004cde:	4310      	orrs	r0, r2
                            (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004ce4:	3a01      	subs	r2, #1
 8004ce6:	0212      	lsls	r2, r2, #8
 8004ce8:	4302      	orrs	r2, r0
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize | \
 8004cea:	430a      	orrs	r2, r1
 8004cec:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

  return HAL_OK;
 8004d06:	2300      	movs	r3, #0
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3730      	adds	r7, #48	; 0x30
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	cccccccd 	.word	0xcccccccd
 8004d14:	fc05c010 	.word	0xfc05c010
 8004d18:	ffff1ff0 	.word	0xffff1ff0
 8004d1c:	fff88000 	.word	0xfff88000

08004d20 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hsai);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d101      	bne.n	8004d36 <HAL_SAI_Abort+0x16>
 8004d32:	2302      	movs	r3, #2
 8004d34:	e04e      	b.n	8004dd4 <HAL_SAI_Abort+0xb4>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

  /* Check SAI DMA is enabled or not */
  if((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d4c:	d125      	bne.n	8004d9a <HAL_SAI_Abort+0x7a>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	6812      	ldr	r2, [r2, #0]
 8004d56:	6812      	ldr	r2, [r2, #0]
 8004d58:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004d5c:	601a      	str	r2, [r3, #0]

    /* Abort the SAI DMA Streams */
    if(hsai->hdmatx != NULL)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d009      	beq.n	8004d7a <HAL_SAI_Abort+0x5a>
    {
      if(HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7fb ff46 	bl	8000bfc <HAL_DMA_Abort>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d001      	beq.n	8004d7a <HAL_SAI_Abort+0x5a>
      {
        return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e02c      	b.n	8004dd4 <HAL_SAI_Abort+0xb4>
      }
    }

    if(hsai->hdmarx != NULL)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d00a      	beq.n	8004d9a <HAL_SAI_Abort+0x7a>
    {
      if(HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f7fb ff36 	bl	8000bfc <HAL_DMA_Abort>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d001      	beq.n	8004d9a <HAL_SAI_Abort+0x7a>
      {
        return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e01c      	b.n	8004dd4 <HAL_SAI_Abort+0xb4>
      }
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f04f 32ff 	mov.w	r2, #4294967295
 8004daa:	619a      	str	r2, [r3, #24]

  /* Disable SAI peripheral */
  SAI_Disable(hsai);
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f000 fafd 	bl	80053ac <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	6812      	ldr	r2, [r2, #0]
 8004dba:	6852      	ldr	r2, [r2, #4]
 8004dbc:	f042 0208 	orr.w	r2, r2, #8
 8004dc0:	605a      	str	r2, [r3, #4]

  hsai->State = HAL_SAI_STATE_READY;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3708      	adds	r7, #8
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b086      	sub	sp, #24
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	4613      	mov	r3, r2
 8004de8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8004dea:	f7fb facb 	bl	8000384 <HAL_GetTick>
 8004dee:	6178      	str	r0, [r7, #20]

  if((pData == NULL) || (Size == 0))
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d002      	beq.n	8004dfc <HAL_SAI_Transmit_DMA+0x20>
 8004df6:	88fb      	ldrh	r3, [r7, #6]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d101      	bne.n	8004e00 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e093      	b.n	8004f28 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if(hsai->State == HAL_SAI_STATE_READY)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	f040 808c 	bne.w	8004f26 <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d101      	bne.n	8004e1c <HAL_SAI_Transmit_DMA+0x40>
 8004e18:	2302      	movs	r3, #2
 8004e1a:	e085      	b.n	8004f28 <HAL_SAI_Transmit_DMA+0x14c>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

    hsai->pBuffPtr = pData;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	68ba      	ldr	r2, [r7, #8]
 8004e28:	675a      	str	r2, [r3, #116]	; 0x74
    hsai->XferSize = Size;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	88fa      	ldrh	r2, [r7, #6]
 8004e2e:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
    hsai->XferCount = Size;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	88fa      	ldrh	r2, [r7, #6]
 8004e36:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2212      	movs	r2, #18
 8004e46:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e4e:	4a38      	ldr	r2, [pc, #224]	; (8004f30 <HAL_SAI_Transmit_DMA+0x154>)
 8004e50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e56:	4a37      	ldr	r2, [pc, #220]	; (8004f34 <HAL_SAI_Transmit_DMA+0x158>)
 8004e58:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e5e:	4a36      	ldr	r2, [pc, #216]	; (8004f38 <HAL_SAI_Transmit_DMA+0x15c>)
 8004e60:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e66:	2200      	movs	r2, #0
 8004e68:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if(HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e72:	4619      	mov	r1, r3
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	331c      	adds	r3, #28
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8004e82:	f7fb fddf 	bl	8000a44 <HAL_DMA_Start_IT>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d005      	beq.n	8004e98 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      return  HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e047      	b.n	8004f28 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004e98:	2100      	movs	r1, #0
 8004e9a:	68f8      	ldr	r0, [r7, #12]
 8004e9c:	f000 fa50 	bl	8005340 <SAI_InterruptFlag>
 8004ea0:	4601      	mov	r1, r0
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	6812      	ldr	r2, [r2, #0]
 8004eaa:	6912      	ldr	r2, [r2, #16]
 8004eac:	430a      	orrs	r2, r1
 8004eae:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	6812      	ldr	r2, [r2, #0]
 8004eb8:	6812      	ldr	r2, [r2, #0]
 8004eba:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004ebe:	601a      	str	r2, [r3, #0]

    /* Wait untill FIFO is not empty */
    while((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8004ec0:	e015      	b.n	8004eee <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8004ec2:	f7fb fa5f 	bl	8000384 <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ed0:	d90d      	bls.n	8004eee <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ed8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e01c      	b.n	8004f28 <HAL_SAI_Transmit_DMA+0x14c>
    while((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	695b      	ldr	r3, [r3, #20]
 8004ef4:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d0e2      	beq.n	8004ec2 <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d107      	bne.n	8004f1a <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	6812      	ldr	r2, [r2, #0]
 8004f12:	6812      	ldr	r2, [r2, #0]
 8004f14:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004f18:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8004f22:	2300      	movs	r3, #0
 8004f24:	e000      	b.n	8004f28 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 8004f26:	2302      	movs	r3, #2
  }
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3718      	adds	r7, #24
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	08005479 	.word	0x08005479
 8004f34:	08005419 	.word	0x08005419
 8004f38:	08005511 	.word	0x08005511

08004f3c <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	4613      	mov	r3, r2
 8004f48:	80fb      	strh	r3, [r7, #6]

  if((pData == NULL) || (Size == 0))
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d002      	beq.n	8004f56 <HAL_SAI_Receive_DMA+0x1a>
 8004f50:	88fb      	ldrh	r3, [r7, #6]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d101      	bne.n	8004f5a <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e079      	b.n	800504e <HAL_SAI_Receive_DMA+0x112>
  }

  if(hsai->State == HAL_SAI_STATE_READY)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d172      	bne.n	800504c <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d101      	bne.n	8004f74 <HAL_SAI_Receive_DMA+0x38>
 8004f70:	2302      	movs	r3, #2
 8004f72:	e06c      	b.n	800504e <HAL_SAI_Receive_DMA+0x112>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

    hsai->pBuffPtr = pData;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	68ba      	ldr	r2, [r7, #8]
 8004f80:	675a      	str	r2, [r3, #116]	; 0x74
    hsai->XferSize = Size;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	88fa      	ldrh	r2, [r7, #6]
 8004f86:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
    hsai->XferCount = Size;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	88fa      	ldrh	r2, [r7, #6]
 8004f8e:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2222      	movs	r2, #34	; 0x22
 8004f9e:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fa8:	4a2b      	ldr	r2, [pc, #172]	; (8005058 <HAL_SAI_Receive_DMA+0x11c>)
 8004faa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fb2:	4a2a      	ldr	r2, [pc, #168]	; (800505c <HAL_SAI_Receive_DMA+0x120>)
 8004fb4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fbc:	4a28      	ldr	r2, [pc, #160]	; (8005060 <HAL_SAI_Receive_DMA+0x124>)
 8004fbe:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if(HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	331c      	adds	r3, #28
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fdc:	461a      	mov	r2, r3
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8004fe4:	f7fb fd2e 	bl	8000a44 <HAL_DMA_Start_IT>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d005      	beq.n	8004ffa <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      return  HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e029      	b.n	800504e <HAL_SAI_Receive_DMA+0x112>
    }

    /* Check if the SAI is already enabled */
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d107      	bne.n	8005018 <HAL_SAI_Receive_DMA+0xdc>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68fa      	ldr	r2, [r7, #12]
 800500e:	6812      	ldr	r2, [r2, #0]
 8005010:	6812      	ldr	r2, [r2, #0]
 8005012:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005016:	601a      	str	r2, [r3, #0]
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005018:	2100      	movs	r1, #0
 800501a:	68f8      	ldr	r0, [r7, #12]
 800501c:	f000 f990 	bl	8005340 <SAI_InterruptFlag>
 8005020:	4601      	mov	r1, r0
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	6812      	ldr	r2, [r2, #0]
 800502a:	6912      	ldr	r2, [r2, #16]
 800502c:	430a      	orrs	r2, r1
 800502e:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	6812      	ldr	r2, [r2, #0]
 8005038:	6812      	ldr	r2, [r2, #0]
 800503a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800503e:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2200      	movs	r2, #0
 8005044:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8005048:	2300      	movs	r3, #0
 800504a:	e000      	b.n	800504e <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 800504c:	2302      	movs	r3, #2
  }
}
 800504e:	4618      	mov	r0, r3
 8005050:	3710      	adds	r7, #16
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	080054f5 	.word	0x080054f5
 800505c:	08005495 	.word	0x08005495
 8005060:	08005511 	.word	0x08005511

08005064 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b086      	sub	sp, #24
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  if(hsai->State != HAL_SAI_STATE_RESET)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8005072:	b2db      	uxtb	r3, r3
 8005074:	2b00      	cmp	r3, #0
 8005076:	f000 813e 	beq.w	80052f6 <HAL_SAI_IRQHandler+0x292>
  {
    uint32_t itflags = hsai->Instance->SR;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	695b      	ldr	r3, [r3, #20]
 8005080:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occured ------------------------------------*/
    if(((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	f003 0308 	and.w	r3, r3, #8
 8005098:	2b00      	cmp	r3, #0
 800509a:	d00a      	beq.n	80050b2 <HAL_SAI_IRQHandler+0x4e>
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	f003 0308 	and.w	r3, r3, #8
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d005      	beq.n	80050b2 <HAL_SAI_IRQHandler+0x4e>
    {
      hsai->InterruptServiceRoutine(hsai);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	4798      	blx	r3
 80050b0:	e121      	b.n	80052f6 <HAL_SAI_IRQHandler+0x292>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if(((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	f003 0301 	and.w	r3, r3, #1
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d01e      	beq.n	80050fa <HAL_SAI_IRQHandler+0x96>
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d019      	beq.n	80050fa <HAL_SAI_IRQHandler+0x96>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2201      	movs	r2, #1
 80050cc:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	2b22      	cmp	r3, #34	; 0x22
 80050d8:	d101      	bne.n	80050de <HAL_SAI_IRQHandler+0x7a>
 80050da:	2301      	movs	r3, #1
 80050dc:	e000      	b.n	80050e0 <HAL_SAI_IRQHandler+0x7c>
 80050de:	2302      	movs	r3, #2
 80050e0:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	431a      	orrs	r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
      HAL_SAI_ErrorCallback(hsai);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 f91a 	bl	800532c <HAL_SAI_ErrorCallback>
 80050f8:	e0fd      	b.n	80052f6 <HAL_SAI_IRQHandler+0x292>
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if(((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	f003 0302 	and.w	r3, r3, #2
 8005100:	2b00      	cmp	r3, #0
 8005102:	d013      	beq.n	800512c <HAL_SAI_IRQHandler+0xc8>
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	f003 0302 	and.w	r3, r3, #2
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00e      	beq.n	800512c <HAL_SAI_IRQHandler+0xc8>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2202      	movs	r2, #2
 8005114:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if(hsai->mutecallback != (SAIcallback)NULL)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800511c:	2b00      	cmp	r3, #0
 800511e:	f000 80ea 	beq.w	80052f6 <HAL_SAI_IRQHandler+0x292>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005128:	4798      	blx	r3
      if(hsai->mutecallback != (SAIcallback)NULL)
 800512a:	e0e4      	b.n	80052f6 <HAL_SAI_IRQHandler+0x292>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if(((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	f003 0320 	and.w	r3, r3, #32
 8005132:	2b00      	cmp	r3, #0
 8005134:	d038      	beq.n	80051a8 <HAL_SAI_IRQHandler+0x144>
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	f003 0320 	and.w	r3, r3, #32
 800513c:	2b00      	cmp	r3, #0
 800513e:	d033      	beq.n	80051a8 <HAL_SAI_IRQHandler+0x144>
    {
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005146:	f043 0204 	orr.w	r2, r3, #4
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Check SAI DMA is enabled or not */
      if((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d01f      	beq.n	800519a <HAL_SAI_IRQHandler+0x136>
      {
        /* Abort the SAI DMA Streams */
        if(hsai->hdmatx != NULL)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800515e:	2b00      	cmp	r3, #0
 8005160:	d009      	beq.n	8005176 <HAL_SAI_IRQHandler+0x112>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005166:	4a66      	ldr	r2, [pc, #408]	; (8005300 <HAL_SAI_IRQHandler+0x29c>)
 8005168:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          HAL_DMA_Abort_IT(hsai->hdmatx);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800516e:	4618      	mov	r0, r3
 8005170:	f7fb fe1e 	bl	8000db0 <HAL_DMA_Abort_IT>
      if((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005174:	e0ba      	b.n	80052ec <HAL_SAI_IRQHandler+0x288>
        }
        else if(hsai->hdmarx != NULL)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800517c:	2b00      	cmp	r3, #0
 800517e:	f000 80b5 	beq.w	80052ec <HAL_SAI_IRQHandler+0x288>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005188:	4a5d      	ldr	r2, [pc, #372]	; (8005300 <HAL_SAI_IRQHandler+0x29c>)
 800518a:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          HAL_DMA_Abort_IT(hsai->hdmarx);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005192:	4618      	mov	r0, r3
 8005194:	f7fb fe0c 	bl	8000db0 <HAL_DMA_Abort_IT>
      if((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005198:	e0a8      	b.n	80052ec <HAL_SAI_IRQHandler+0x288>
        }
      }
      else
      {
        /* Abort SAI */
        HAL_SAI_Abort(hsai);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f7ff fdc0 	bl	8004d20 <HAL_SAI_Abort>

        /* Set error callback */
        HAL_SAI_ErrorCallback(hsai);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 f8c3 	bl	800532c <HAL_SAI_ErrorCallback>
      if((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80051a6:	e0a1      	b.n	80052ec <HAL_SAI_IRQHandler+0x288>
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if(((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d037      	beq.n	8005222 <HAL_SAI_IRQHandler+0x1be>
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d032      	beq.n	8005222 <HAL_SAI_IRQHandler+0x1be>
    {
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051c2:	f043 0208 	orr.w	r2, r3, #8
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Check SAI DMA is enabled or not */
      if((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d01e      	beq.n	8005214 <HAL_SAI_IRQHandler+0x1b0>
      {
        /* Abort the SAI DMA Streams */
        if(hsai->hdmatx != NULL)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d009      	beq.n	80051f2 <HAL_SAI_IRQHandler+0x18e>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051e2:	4a47      	ldr	r2, [pc, #284]	; (8005300 <HAL_SAI_IRQHandler+0x29c>)
 80051e4:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          HAL_DMA_Abort_IT(hsai->hdmatx);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051ea:	4618      	mov	r0, r3
 80051ec:	f7fb fde0 	bl	8000db0 <HAL_DMA_Abort_IT>
      if((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80051f0:	e07e      	b.n	80052f0 <HAL_SAI_IRQHandler+0x28c>
        }
        else if(hsai->hdmarx != NULL)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d079      	beq.n	80052f0 <HAL_SAI_IRQHandler+0x28c>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005202:	4a3f      	ldr	r2, [pc, #252]	; (8005300 <HAL_SAI_IRQHandler+0x29c>)
 8005204:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          HAL_DMA_Abort_IT(hsai->hdmarx);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800520c:	4618      	mov	r0, r3
 800520e:	f7fb fdcf 	bl	8000db0 <HAL_DMA_Abort_IT>
      if((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005212:	e06d      	b.n	80052f0 <HAL_SAI_IRQHandler+0x28c>
        }
      }
      else
      {
        /* Abort SAI */
        HAL_SAI_Abort(hsai);
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f7ff fd83 	bl	8004d20 <HAL_SAI_Abort>

        /* Set error callback */
        HAL_SAI_ErrorCallback(hsai);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 f886 	bl	800532c <HAL_SAI_ErrorCallback>
      if((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005220:	e066      	b.n	80052f0 <HAL_SAI_IRQHandler+0x28c>
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if(((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	f003 0304 	and.w	r3, r3, #4
 8005228:	2b00      	cmp	r3, #0
 800522a:	d045      	beq.n	80052b8 <HAL_SAI_IRQHandler+0x254>
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	f003 0304 	and.w	r3, r3, #4
 8005232:	2b00      	cmp	r3, #0
 8005234:	d040      	beq.n	80052b8 <HAL_SAI_IRQHandler+0x254>
    {
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800523c:	f043 0220 	orr.w	r2, r3, #32
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Check SAI DMA is enabled or not */
      if((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d01e      	beq.n	800528e <HAL_SAI_IRQHandler+0x22a>
      {
        /* Abort the SAI DMA Streams */
        if(hsai->hdmatx != NULL)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005254:	2b00      	cmp	r3, #0
 8005256:	d009      	beq.n	800526c <HAL_SAI_IRQHandler+0x208>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800525c:	4a28      	ldr	r2, [pc, #160]	; (8005300 <HAL_SAI_IRQHandler+0x29c>)
 800525e:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          HAL_DMA_Abort_IT(hsai->hdmatx);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005264:	4618      	mov	r0, r3
 8005266:	f7fb fda3 	bl	8000db0 <HAL_DMA_Abort_IT>
      if((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800526a:	e043      	b.n	80052f4 <HAL_SAI_IRQHandler+0x290>
        }
        else if(hsai->hdmarx != NULL)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005272:	2b00      	cmp	r3, #0
 8005274:	d03e      	beq.n	80052f4 <HAL_SAI_IRQHandler+0x290>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800527c:	4a20      	ldr	r2, [pc, #128]	; (8005300 <HAL_SAI_IRQHandler+0x29c>)
 800527e:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          HAL_DMA_Abort_IT(hsai->hdmarx);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005286:	4618      	mov	r0, r3
 8005288:	f7fb fd92 	bl	8000db0 <HAL_DMA_Abort_IT>
      if((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800528c:	e032      	b.n	80052f4 <HAL_SAI_IRQHandler+0x290>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2200      	movs	r2, #0
 8005294:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f04f 32ff 	mov.w	r2, #4294967295
 800529e:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

        /* SAI error Callback */
        HAL_SAI_ErrorCallback(hsai);
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f000 f83b 	bl	800532c <HAL_SAI_ErrorCallback>
      if((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80052b6:	e01d      	b.n	80052f4 <HAL_SAI_IRQHandler+0x290>
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if(((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	f003 0310 	and.w	r3, r3, #16
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d019      	beq.n	80052f6 <HAL_SAI_IRQHandler+0x292>
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	f003 0310 	and.w	r3, r3, #16
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d014      	beq.n	80052f6 <HAL_SAI_IRQHandler+0x292>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2210      	movs	r2, #16
 80052d2:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052da:	f043 0210 	orr.w	r2, r3, #16
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
      HAL_SAI_ErrorCallback(hsai);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 f821 	bl	800532c <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 80052ea:	e004      	b.n	80052f6 <HAL_SAI_IRQHandler+0x292>
      if((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80052ec:	bf00      	nop
 80052ee:	e002      	b.n	80052f6 <HAL_SAI_IRQHandler+0x292>
      if((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80052f0:	bf00      	nop
 80052f2:	e000      	b.n	80052f6 <HAL_SAI_IRQHandler+0x292>
      if((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80052f4:	bf00      	nop
}
 80052f6:	bf00      	nop
 80052f8:	3718      	adds	r7, #24
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	08005585 	.word	0x08005585

08005304 <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
 800530c:	bf00      	nop
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <HAL_SAI_RxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005320:	bf00      	nop
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8005334:	bf00      	nop
 8005336:	370c      	adds	r7, #12
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 8005340:	b480      	push	{r7}
 8005342:	b085      	sub	sp, #20
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800534a:	2301      	movs	r3, #1
 800534c:	60fb      	str	r3, [r7, #12]

  if(mode == SAI_MODE_IT)
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d103      	bne.n	800535c <SAI_InterruptFlag+0x1c>
  {
    tmpIT|= SAI_IT_FREQ;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f043 0308 	orr.w	r3, r3, #8
 800535a:	60fb      	str	r3, [r7, #12]
  }

  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005360:	2b08      	cmp	r3, #8
 8005362:	d10b      	bne.n	800537c <SAI_InterruptFlag+0x3c>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005368:	2b03      	cmp	r3, #3
 800536a:	d003      	beq.n	8005374 <SAI_InterruptFlag+0x34>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	2b01      	cmp	r3, #1
 8005372:	d103      	bne.n	800537c <SAI_InterruptFlag+0x3c>
  {
    tmpIT|= SAI_IT_CNRDY;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f043 0310 	orr.w	r3, r3, #16
 800537a:	60fb      	str	r3, [r7, #12]
  }

  if((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	2b03      	cmp	r3, #3
 8005382:	d003      	beq.n	800538c <SAI_InterruptFlag+0x4c>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	2b02      	cmp	r3, #2
 800538a:	d104      	bne.n	8005396 <SAI_InterruptFlag+0x56>
  {
    tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005392:	60fb      	str	r3, [r7, #12]
 8005394:	e003      	b.n	800539e <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT|= SAI_IT_WCKCFG;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f043 0304 	orr.w	r3, r3, #4
 800539c:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800539e:	68fb      	ldr	r3, [r7, #12]
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3714      	adds	r7, #20
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80053ac:	b490      	push	{r4, r7}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 80053b4:	4b16      	ldr	r3, [pc, #88]	; (8005410 <SAI_Disable+0x64>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a16      	ldr	r2, [pc, #88]	; (8005414 <SAI_Disable+0x68>)
 80053ba:	fba2 2303 	umull	r2, r3, r2, r3
 80053be:	0b1b      	lsrs	r3, r3, #12
 80053c0:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 80053c2:	2300      	movs	r3, #0
 80053c4:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	6812      	ldr	r2, [r2, #0]
 80053ce:	6812      	ldr	r2, [r2, #0]
 80053d0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80053d4:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80053d6:	4623      	mov	r3, r4
 80053d8:	1e5c      	subs	r4, r3, #1
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d10a      	bne.n	80053f4 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      status = HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	73fb      	strb	r3, [r7, #15]
      break;
 80053f2:	e006      	b.n	8005402 <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d1e9      	bne.n	80053d6 <SAI_Disable+0x2a>

  return status;
 8005402:	7bfb      	ldrb	r3, [r7, #15]
}
 8005404:	4618      	mov	r0, r3
 8005406:	3710      	adds	r7, #16
 8005408:	46bd      	mov	sp, r7
 800540a:	bc90      	pop	{r4, r7}
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop
 8005410:	2000000c 	.word	0x2000000c
 8005414:	95cbec1b 	.word	0x95cbec1b

08005418 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef* )hdma)->Parent;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005424:	60fb      	str	r3, [r7, #12]

  if(hdma->Init.Mode != DMA_CIRCULAR)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	69db      	ldr	r3, [r3, #28]
 800542a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800542e:	d01c      	beq.n	800546a <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	6812      	ldr	r2, [r2, #0]
 8005440:	6812      	ldr	r2, [r2, #0]
 8005442:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005446:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005448:	2100      	movs	r1, #0
 800544a:	68f8      	ldr	r0, [r7, #12]
 800544c:	f7ff ff78 	bl	8005340 <SAI_InterruptFlag>
 8005450:	4603      	mov	r3, r0
 8005452:	43da      	mvns	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68f9      	ldr	r1, [r7, #12]
 800545a:	6809      	ldr	r1, [r1, #0]
 800545c:	6909      	ldr	r1, [r1, #16]
 800545e:	400a      	ands	r2, r1
 8005460:	611a      	str	r2, [r3, #16]

    hsai->State= HAL_SAI_STATE_READY;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2201      	movs	r2, #1
 8005466:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
  }
  HAL_SAI_TxCpltCallback(hsai);
 800546a:	68f8      	ldr	r0, [r7, #12]
 800546c:	f001 f832 	bl	80064d4 <HAL_SAI_TxCpltCallback>
}
 8005470:	bf00      	nop
 8005472:	3710      	adds	r7, #16
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005484:	60fb      	str	r3, [r7, #12]

  HAL_SAI_TxHalfCpltCallback(hsai);
 8005486:	68f8      	ldr	r0, [r7, #12]
 8005488:	f7ff ff3c 	bl	8005304 <HAL_SAI_TxHalfCpltCallback>
}
 800548c:	bf00      	nop
 800548e:	3710      	adds	r7, #16
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a0:	60fb      	str	r3, [r7, #12]

  if(hdma->Init.Mode != DMA_CIRCULAR)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	69db      	ldr	r3, [r3, #28]
 80054a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054aa:	d01c      	beq.n	80054e6 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	6812      	ldr	r2, [r2, #0]
 80054b4:	6812      	ldr	r2, [r2, #0]
 80054b6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80054ba:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2200      	movs	r2, #0
 80054c0:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80054c4:	2100      	movs	r1, #0
 80054c6:	68f8      	ldr	r0, [r7, #12]
 80054c8:	f7ff ff3a 	bl	8005340 <SAI_InterruptFlag>
 80054cc:	4603      	mov	r3, r0
 80054ce:	43da      	mvns	r2, r3
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68f9      	ldr	r1, [r7, #12]
 80054d6:	6809      	ldr	r1, [r1, #0]
 80054d8:	6909      	ldr	r1, [r1, #16]
 80054da:	400a      	ands	r2, r1
 80054dc:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2201      	movs	r2, #1
 80054e2:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
  }
  HAL_SAI_RxCpltCallback(hsai);
 80054e6:	68f8      	ldr	r0, [r7, #12]
 80054e8:	f000 ffe4 	bl	80064b4 <HAL_SAI_RxCpltCallback>
}
 80054ec:	bf00      	nop
 80054ee:	3710      	adds	r7, #16
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005500:	60fb      	str	r3, [r7, #12]

  HAL_SAI_RxHalfCpltCallback(hsai);
 8005502:	68f8      	ldr	r0, [r7, #12]
 8005504:	f7ff ff08 	bl	8005318 <HAL_SAI_RxHalfCpltCallback>
}
 8005508:	bf00      	nop
 800550a:	3710      	adds	r7, #16
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800551c:	60fb      	str	r3, [r7, #12]

  if((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005524:	2b01      	cmp	r3, #1
 8005526:	d005      	beq.n	8005534 <SAI_DMAError+0x24>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800552e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005530:	2b01      	cmp	r3, #1
 8005532:	d112      	bne.n	800555a <SAI_DMAError+0x4a>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	6812      	ldr	r2, [r2, #0]
 800553c:	6812      	ldr	r2, [r2, #0]
 800553e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005542:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 8005544:	68f8      	ldr	r0, [r7, #12]
 8005546:	f7ff ff31 	bl	80053ac <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2201      	movs	r2, #1
 800554e:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2200      	movs	r2, #0
 8005556:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
  }

  /* Ignore DMA FIFO error */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f7fb ffda 	bl	8001514 <HAL_DMA_GetError>
 8005560:	4603      	mov	r3, r0
 8005562:	2b02      	cmp	r3, #2
 8005564:	d00a      	beq.n	800557c <SAI_DMAError+0x6c>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800556c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    /* SAI error Callback */
    HAL_SAI_ErrorCallback(hsai);
 8005576:	68f8      	ldr	r0, [r7, #12]
 8005578:	f7ff fed8 	bl	800532c <HAL_SAI_ErrorCallback>
  }
}
 800557c:	bf00      	nop
 800557e:	3710      	adds	r7, #16
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005590:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	6812      	ldr	r2, [r2, #0]
 800559a:	6812      	ldr	r2, [r2, #0]
 800559c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80055a0:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2200      	movs	r2, #0
 80055a8:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f04f 32ff 	mov.w	r2, #4294967295
 80055b2:	619a      	str	r2, [r3, #24]

  if(hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ba:	2b20      	cmp	r3, #32
 80055bc:	d00a      	beq.n	80055d4 <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f7ff fef4 	bl	80053ac <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	6812      	ldr	r2, [r2, #0]
 80055cc:	6852      	ldr	r2, [r2, #4]
 80055ce:	f042 0208 	orr.w	r2, r2, #8
 80055d2:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

  /* SAI error Callback */
  HAL_SAI_ErrorCallback(hsai);
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	f7ff fea1 	bl	800532c <HAL_SAI_ErrorCallback>
}
 80055ea:	bf00      	nop
 80055ec:	3710      	adds	r7, #16
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
	...

080055f4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing: Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d101      	bne.n	8005608 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e02b      	b.n	8005660 <HAL_SDRAM_Init+0x6c>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800560e:	b2db      	uxtb	r3, r3
 8005610:	2b00      	cmp	r3, #0
 8005612:	d106      	bne.n	8005622 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f001 fdb5 	bl	800718c <HAL_SDRAM_MspInit>
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2202      	movs	r2, #2
 8005626:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	3304      	adds	r3, #4
 8005632:	4619      	mov	r1, r3
 8005634:	4610      	mov	r0, r2
 8005636:	f000 fdf9 	bl	800622c <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6818      	ldr	r0, [r3, #0]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	461a      	mov	r2, r3
 8005644:	6839      	ldr	r1, [r7, #0]
 8005646:	f000 fe63 	bl	8006310 <FMC_SDRAM_Timing_Init>
  
  /* Enable FMC IP */
  __FMC_ENABLE();
 800564a:	4a07      	ldr	r2, [pc, #28]	; (8005668 <HAL_SDRAM_Init+0x74>)
 800564c:	4b06      	ldr	r3, [pc, #24]	; (8005668 <HAL_SDRAM_Init+0x74>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005654:	6013      	str	r3, [r2, #0]
    
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2201      	movs	r2, #1
 800565a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	3708      	adds	r7, #8
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}
 8005668:	52004000 	.word	0x52004000

0800566c <HAL_SDRAM_IRQHandler>:
  * @param  hsdram: pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
*/
void HAL_SDRAM_IRQHandler(SDRAM_HandleTypeDef *hsdram)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  /* Check SDRAM interrupt Rising edge flag */
  if(__FMC_SDRAM_GET_FLAG(hsdram->Instance, FMC_SDRAM_FLAG_REFRESH_IT))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	f003 0301 	and.w	r3, r3, #1
 800567e:	2b01      	cmp	r3, #1
 8005680:	d10a      	bne.n	8005698 <HAL_SDRAM_IRQHandler+0x2c>
  {
    /* SDRAM refresh error interrupt callback */
    HAL_SDRAM_RefreshErrorCallback(hsdram);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 f80c 	bl	80056a0 <HAL_SDRAM_RefreshErrorCallback>
    
    /* Clear SDRAM refresh error interrupt pending bit */
    __FMC_SDRAM_CLEAR_FLAG(hsdram->Instance, FMC_SDRAM_FLAG_REFRESH_ERROR);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	6812      	ldr	r2, [r2, #0]
 8005690:	6952      	ldr	r2, [r2, #20]
 8005692:	f042 0201 	orr.w	r2, r2, #1
 8005696:	615a      	str	r2, [r3, #20]
  }
}
 8005698:	bf00      	nop
 800569a:	3708      	adds	r7, #8
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <HAL_SDRAM_RefreshErrorCallback>:
  * @param  hsdram: pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module. 
  * @retval None
  */
__weak void HAL_SDRAM_RefreshErrorCallback(SDRAM_HandleTypeDef *hsdram)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_RefreshErrorCallback could be implemented in the user file
   */ 
}
 80056a8:	bf00      	nop
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0;
 80056bc:	2300      	movs	r3, #0
 80056be:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length = 0;
 80056c0:	2300      	movs	r3, #0
 80056c2:	60bb      	str	r3, [r7, #8]
  
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d101      	bne.n	80056ce <HAL_SPI_Init+0x1a>
  {
    return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e0e0      	b.n	8005890 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */
  
  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a6f      	ldr	r2, [pc, #444]	; (8005898 <HAL_SPI_Init+0x1e4>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d00f      	beq.n	80056fe <HAL_SPI_Init+0x4a>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a6e      	ldr	r2, [pc, #440]	; (800589c <HAL_SPI_Init+0x1e8>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d00a      	beq.n	80056fe <HAL_SPI_Init+0x4a>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a6c      	ldr	r2, [pc, #432]	; (80058a0 <HAL_SPI_Init+0x1ec>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d005      	beq.n	80056fe <HAL_SPI_Init+0x4a>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	2b0f      	cmp	r3, #15
 80056f8:	d901      	bls.n	80056fe <HAL_SPI_Init+0x4a>
  {
    return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e0c8      	b.n	8005890 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 fd78 	bl	80061f4 <SPI_GetPacketSize>
 8005704:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE )) ||
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a63      	ldr	r2, [pc, #396]	; (8005898 <HAL_SPI_Init+0x1e4>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d00c      	beq.n	800572a <HAL_SPI_Init+0x76>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a61      	ldr	r2, [pc, #388]	; (800589c <HAL_SPI_Init+0x1e8>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d007      	beq.n	800572a <HAL_SPI_Init+0x76>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a60      	ldr	r2, [pc, #384]	; (80058a0 <HAL_SPI_Init+0x1ec>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d002      	beq.n	800572a <HAL_SPI_Init+0x76>
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	2b08      	cmp	r3, #8
 8005728:	d811      	bhi.n	800574e <HAL_SPI_Init+0x9a>
      (( IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)) )
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE )) ||
 800572e:	4a5a      	ldr	r2, [pc, #360]	; (8005898 <HAL_SPI_Init+0x1e4>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d009      	beq.n	8005748 <HAL_SPI_Init+0x94>
      (( IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)) )
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a58      	ldr	r2, [pc, #352]	; (800589c <HAL_SPI_Init+0x1e8>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d004      	beq.n	8005748 <HAL_SPI_Init+0x94>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a57      	ldr	r2, [pc, #348]	; (80058a0 <HAL_SPI_Init+0x1ec>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d104      	bne.n	8005752 <HAL_SPI_Init+0x9e>
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	2b10      	cmp	r3, #16
 800574c:	d901      	bls.n	8005752 <HAL_SPI_Init+0x9e>
  {
    return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e09e      	b.n	8005890 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005758:	b2db      	uxtb	r3, r3
 800575a:	2b00      	cmp	r3, #0
 800575c:	d106      	bne.n	800576c <HAL_SPI_Init+0xb8>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f001 fc2e 	bl	8006fc8 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2202      	movs	r2, #2
 8005770:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	6812      	ldr	r2, [r2, #0]
 800577c:	6812      	ldr	r2, [r2, #0]
 800577e:	f022 0201 	bic.w	r2, r2, #1
 8005782:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */
 
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	699b      	ldr	r3, [r3, #24]
 8005788:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800578c:	d110      	bne.n	80057b0 <HAL_SPI_Init+0xfc>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005796:	d10b      	bne.n	80057b0 <HAL_SPI_Init+0xfc>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579c:	2b00      	cmp	r3, #0
 800579e:	d107      	bne.n	80057b0 <HAL_SPI_Init+0xfc>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	6812      	ldr	r2, [r2, #0]
 80057a8:	6812      	ldr	r2, [r2, #0]
 80057aa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80057ae:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	69d1      	ldr	r1, [r2, #28]
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80057bc:	4311      	orrs	r1, r2
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	4311      	orrs	r1, r2
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80057c6:	4311      	orrs	r1, r2
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	68d2      	ldr	r2, [r2, #12]
 80057cc:	430a      	orrs	r2, r1
 80057ce:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80057dc:	4311      	orrs	r1, r2
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80057e2:	4311      	orrs	r1, r2
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	6992      	ldr	r2, [r2, #24]
 80057e8:	4311      	orrs	r1, r2
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	6912      	ldr	r2, [r2, #16]
 80057ee:	4311      	orrs	r1, r2
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	6952      	ldr	r2, [r2, #20]
 80057f4:	4311      	orrs	r1, r2
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	6a12      	ldr	r2, [r2, #32]
 80057fa:	4311      	orrs	r1, r2
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	6852      	ldr	r2, [r2, #4]
 8005800:	4311      	orrs	r1, r2
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005806:	4311      	orrs	r1, r2
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	6892      	ldr	r2, [r2, #8]
 800580c:	4311      	orrs	r1, r2
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005812:	4311      	orrs	r1, r2
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005818:	430a      	orrs	r2, r1
 800581a:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d113      	bne.n	800584c <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	6812      	ldr	r2, [r2, #0]
 800582c:	6892      	ldr	r2, [r2, #8]
 800582e:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 8005832:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005836:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	6812      	ldr	r2, [r2, #0]
 8005840:	6892      	ldr	r2, [r2, #8]
 8005842:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8005846:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800584a:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	6812      	ldr	r2, [r2, #0]
 8005854:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005856:	f022 0201 	bic.w	r2, r2, #1
 800585a:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00a      	beq.n	800587e <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	6812      	ldr	r2, [r2, #0]
 8005870:	68d2      	ldr	r2, [r2, #12]
 8005872:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800587a:	430a      	orrs	r2, r1
 800587c:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2201      	movs	r2, #1
 800588a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800588e:	2300      	movs	r3, #0
}
 8005890:	4618      	mov	r0, r3
 8005892:	3710      	adds	r7, #16
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}
 8005898:	40013000 	.word	0x40013000
 800589c:	40003800 	.word	0x40003800
 80058a0:	40003c00 	.word	0x40003c00

080058a4 <HAL_SPI_Transmit>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b088      	sub	sp, #32
 80058a8:	af02      	add	r7, sp, #8
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	603b      	str	r3, [r7, #0]
 80058b0:	4613      	mov	r3, r2
 80058b2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 80058b4:	2300      	movs	r3, #0
 80058b6:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80058b8:	2300      	movs	r3, #0
 80058ba:	74fb      	strb	r3, [r7, #19]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d101      	bne.n	80058ca <HAL_SPI_Transmit+0x26>
 80058c6:	2302      	movs	r3, #2
 80058c8:	e1db      	b.n	8005c82 <HAL_SPI_Transmit+0x3de>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2201      	movs	r2, #1
 80058ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80058d2:	f7fa fd57 	bl	8000384 <HAL_GetTick>
 80058d6:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d007      	beq.n	80058f4 <HAL_SPI_Transmit+0x50>
  {
    errorcode = HAL_BUSY;
 80058e4:	2302      	movs	r3, #2
 80058e6:	74fb      	strb	r3, [r7, #19]
    __HAL_UNLOCK(hspi);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80058f0:	7cfb      	ldrb	r3, [r7, #19]
 80058f2:	e1c6      	b.n	8005c82 <HAL_SPI_Transmit+0x3de>
  }

  if ((pData == NULL) || (Size == 0U))
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d002      	beq.n	8005900 <HAL_SPI_Transmit+0x5c>
 80058fa:	88fb      	ldrh	r3, [r7, #6]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d107      	bne.n	8005910 <HAL_SPI_Transmit+0x6c>
  {
    errorcode = HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	74fb      	strb	r3, [r7, #19]
    __HAL_UNLOCK(hspi);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800590c:	7cfb      	ldrb	r3, [r7, #19]
 800590e:	e1b8      	b.n	8005c82 <HAL_SPI_Transmit+0x3de>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2203      	movs	r2, #3
 8005914:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2200      	movs	r2, #0
 800591c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	68ba      	ldr	r2, [r7, #8]
 8005924:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	88fa      	ldrh	r2, [r7, #6]
 800592a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	88fa      	ldrh	r2, [r7, #6]
 8005932:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2200      	movs	r2, #0
 800593a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = 0U;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2200      	movs	r2, #0
 8005940:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = 0U;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2200      	movs	r2, #0
 8005948:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2200      	movs	r2, #0
 8005950:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2200      	movs	r2, #0
 8005956:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005960:	d107      	bne.n	8005972 <HAL_SPI_Transmit+0xce>
  {
    SPI_1LINE_TX(hspi);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	6812      	ldr	r2, [r2, #0]
 800596a:	6812      	ldr	r2, [r2, #0]
 800596c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005970:	601a      	str	r2, [r3, #0]
  }

  /* Set the number if data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	6859      	ldr	r1, [r3, #4]
 800597c:	4b97      	ldr	r3, [pc, #604]	; (8005bdc <HAL_SPI_Transmit+0x338>)
 800597e:	400b      	ands	r3, r1
 8005980:	88f9      	ldrh	r1, [r7, #6]
 8005982:	430b      	orrs	r3, r1
 8005984:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68fa      	ldr	r2, [r7, #12]
 800598c:	6812      	ldr	r2, [r2, #0]
 800598e:	6812      	ldr	r2, [r2, #0]
 8005990:	f042 0201 	orr.w	r2, r2, #1
 8005994:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800599e:	d107      	bne.n	80059b0 <HAL_SPI_Transmit+0x10c>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	6812      	ldr	r2, [r2, #0]
 80059a8:	6812      	ldr	r2, [r2, #0]
 80059aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	2b0f      	cmp	r3, #15
 80059b6:	d947      	bls.n	8005a48 <HAL_SPI_Transmit+0x1a4>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0U)
 80059b8:	e03f      	b.n	8005a3a <HAL_SPI_Transmit+0x196>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	695b      	ldr	r3, [r3, #20]
 80059c0:	f003 0302 	and.w	r3, r3, #2
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	d114      	bne.n	80059f2 <HAL_SPI_Transmit+0x14e>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80059d0:	6812      	ldr	r2, [r2, #0]
 80059d2:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059d8:	1d1a      	adds	r2, r3, #4
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	3b01      	subs	r3, #1
 80059e8:	b29a      	uxth	r2, r3
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80059f0:	e023      	b.n	8005a3a <HAL_SPI_Transmit+0x196>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d00b      	beq.n	8005a10 <HAL_SPI_Transmit+0x16c>
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059fe:	d01c      	beq.n	8005a3a <HAL_SPI_Transmit+0x196>
 8005a00:	f7fa fcc0 	bl	8000384 <HAL_GetTick>
 8005a04:	4602      	mov	r2, r0
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	1ad2      	subs	r2, r2, r3
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d314      	bcc.n	8005a3a <HAL_SPI_Transmit+0x196>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f000 fb21 	bl	8006058 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a24:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e123      	b.n	8005c82 <HAL_SPI_Transmit+0x3de>
    while (hspi->TxXferCount > 0U)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1b9      	bne.n	80059ba <HAL_SPI_Transmit+0x116>
 8005a46:	e0f6      	b.n	8005c36 <HAL_SPI_Transmit+0x392>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	2b07      	cmp	r3, #7
 8005a4e:	f240 80eb 	bls.w	8005c28 <HAL_SPI_Transmit+0x384>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005a52:	e05f      	b.n	8005b14 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	695b      	ldr	r3, [r3, #20]
 8005a5a:	f003 0302 	and.w	r3, r3, #2
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	d134      	bne.n	8005acc <HAL_SPI_Transmit+0x228>
      {
        if ( (hspi->TxXferCount > 1U) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d918      	bls.n	8005aa0 <HAL_SPI_Transmit+0x1fc>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d014      	beq.n	8005aa0 <HAL_SPI_Transmit+0x1fc>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005a7e:	6812      	ldr	r2, [r2, #0]
 8005a80:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a86:	1d1a      	adds	r2, r3, #4
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount-=2;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	3b02      	subs	r3, #2
 8005a96:	b29a      	uxth	r2, r3
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005a9e:	e039      	b.n	8005b14 <HAL_SPI_Transmit+0x270>
        }
        else
        {
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	3320      	adds	r3, #32
 8005aa6:	68fa      	ldr	r2, [r7, #12]
 8005aa8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005aaa:	8812      	ldrh	r2, [r2, #0]
 8005aac:	801a      	strh	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ab2:	1c9a      	adds	r2, r3, #2
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	3b01      	subs	r3, #1
 8005ac2:	b29a      	uxth	r2, r3
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005aca:	e023      	b.n	8005b14 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00b      	beq.n	8005aea <HAL_SPI_Transmit+0x246>
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad8:	d01c      	beq.n	8005b14 <HAL_SPI_Transmit+0x270>
 8005ada:	f7fa fc53 	bl	8000384 <HAL_GetTick>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	1ad2      	subs	r2, r2, r3
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d314      	bcc.n	8005b14 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005aea:	68f8      	ldr	r0, [r7, #12]
 8005aec:	f000 fab4 	bl	8006058 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005afe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e0b6      	b.n	8005c82 <HAL_SPI_Transmit+0x3de>
    while (hspi->TxXferCount > 0U)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d199      	bne.n	8005a54 <HAL_SPI_Transmit+0x1b0>
 8005b20:	e089      	b.n	8005c36 <HAL_SPI_Transmit+0x392>
  else
  {
    while (hspi->TxXferCount > 0U)
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	695b      	ldr	r3, [r3, #20]
 8005b28:	f003 0302 	and.w	r3, r3, #2
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d157      	bne.n	8005be0 <HAL_SPI_Transmit+0x33c>
      {
        if ((hspi->TxXferCount > 3U) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	2b03      	cmp	r3, #3
 8005b3a:	d918      	bls.n	8005b6e <HAL_SPI_Transmit+0x2ca>
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b40:	2b40      	cmp	r3, #64	; 0x40
 8005b42:	d914      	bls.n	8005b6e <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005b4c:	6812      	ldr	r2, [r2, #0]
 8005b4e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b54:	1d1a      	adds	r2, r3, #4
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount-=4;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	3b04      	subs	r3, #4
 8005b64:	b29a      	uxth	r2, r3
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005b6c:	e05c      	b.n	8005c28 <HAL_SPI_Transmit+0x384>
        }
        else if ((hspi->TxXferCount > 1U) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d919      	bls.n	8005bae <HAL_SPI_Transmit+0x30a>
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d015      	beq.n	8005bae <HAL_SPI_Transmit+0x30a>
        {
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	3320      	adds	r3, #32
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005b8c:	8812      	ldrh	r2, [r2, #0]
 8005b8e:	801a      	strh	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b94:	1c9a      	adds	r2, r3, #2
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount-=2;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	3b02      	subs	r3, #2
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005bac:	e03c      	b.n	8005c28 <HAL_SPI_Transmit+0x384>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	3320      	adds	r3, #32
 8005bb4:	68fa      	ldr	r2, [r7, #12]
 8005bb6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005bb8:	7812      	ldrb	r2, [r2, #0]
 8005bba:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bc0:	1c5a      	adds	r2, r3, #1
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	b29a      	uxth	r2, r3
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005bd8:	e026      	b.n	8005c28 <HAL_SPI_Transmit+0x384>
 8005bda:	bf00      	nop
 8005bdc:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00b      	beq.n	8005bfe <HAL_SPI_Transmit+0x35a>
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bec:	d01c      	beq.n	8005c28 <HAL_SPI_Transmit+0x384>
 8005bee:	f7fa fbc9 	bl	8000384 <HAL_GetTick>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	1ad2      	subs	r2, r2, r3
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d314      	bcc.n	8005c28 <HAL_SPI_Transmit+0x384>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005bfe:	68f8      	ldr	r0, [r7, #12]
 8005c00:	f000 fa2a 	bl	8006058 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c12:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e02c      	b.n	8005c82 <HAL_SPI_Transmit+0x3de>
    while (hspi->TxXferCount > 0U)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	f47f af76 	bne.w	8005b22 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	9300      	str	r3, [sp, #0]
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	2108      	movs	r1, #8
 8005c40:	68f8      	ldr	r0, [r7, #12]
 8005c42:	f000 faa9 	bl	8006198 <SPI_WaitOnFlagUntilTimeout>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d007      	beq.n	8005c5c <HAL_SPI_Transmit+0x3b8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c52:	f043 0220 	orr.w	r2, r3, #32
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005c5c:	68f8      	ldr	r0, [r7, #12]
 8005c5e:	f000 f9fb 	bl	8006058 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d001      	beq.n	8005c80 <HAL_SPI_Transmit+0x3dc>
  {
    return HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e000      	b.n	8005c82 <HAL_SPI_Transmit+0x3de>
  }
  return HAL_OK;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3718      	adds	r7, #24
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop

08005c8c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b088      	sub	sp, #32
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	61bb      	str	r3, [r7, #24]
  uint32_t itflag   = hspi->Instance->SR;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	695b      	ldr	r3, [r3, #20]
 8005ca2:	617b      	str	r3, [r7, #20]
  uint32_t trigger  = itsource & itflag;
 8005ca4:	69ba      	ldr	r2, [r7, #24]
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	4013      	ands	r3, r2
 8005caa:	613b      	str	r3, [r7, #16]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	60fb      	str	r3, [r7, #12]
  uint32_t handled  = 0;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	61fb      	str	r3, [r7, #28]

  HAL_SPI_StateTypeDef State = hspi->State;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005cbe:	72fb      	strb	r3, [r7, #11]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXNE))
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d10a      	bne.n	8005ce0 <HAL_SPI_IRQHandler+0x54>
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	f003 0301 	and.w	r3, r3, #1
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d005      	beq.n	8005ce0 <HAL_SPI_IRQHandler+0x54>
  {
    hspi->RxISR(hspi);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	4798      	blx	r3
    handled = 1;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	61fb      	str	r3, [r7, #28]
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXE))
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	f003 0320 	and.w	r3, r3, #32
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d10a      	bne.n	8005d00 <HAL_SPI_IRQHandler+0x74>
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	f003 0302 	and.w	r3, r3, #2
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d005      	beq.n	8005d00 <HAL_SPI_IRQHandler+0x74>
  {
    hspi->TxISR(hspi);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	4798      	blx	r3
    handled = 1;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	61fb      	str	r3, [r7, #28]
  }

  if (handled != 0)
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	f040 815a 	bne.w	8005fbc <HAL_SPI_IRQHandler+0x330>
    return;
  
  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	f003 0308 	and.w	r3, r3, #8
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	f000 80a1 	beq.w	8005e56 <HAL_SPI_IRQHandler+0x1ca>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	6812      	ldr	r2, [r2, #0]
 8005d1c:	6992      	ldr	r2, [r2, #24]
 8005d1e:	f042 0208 	orr.w	r2, r2, #8
 8005d22:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	6812      	ldr	r2, [r2, #0]
 8005d2c:	6992      	ldr	r2, [r2, #24]
 8005d2e:	f042 0210 	orr.w	r2, r2, #16
 8005d32:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	6812      	ldr	r2, [r2, #0]
 8005d3c:	6992      	ldr	r2, [r2, #24]
 8005d3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d42:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	6812      	ldr	r2, [r2, #0]
 8005d4c:	6912      	ldr	r2, [r2, #16]
 8005d4e:	f022 0208 	bic.w	r2, r2, #8
 8005d52:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if( HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN|SPI_CFG1_RXDMAEN) ||                       // IT based transfer is done
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d00f      	beq.n	8005d7e <HAL_SPI_IRQHandler+0xf2>
 8005d5e:	7afb      	ldrb	r3, [r7, #11]
 8005d60:	2b04      	cmp	r3, #4
 8005d62:	d004      	beq.n	8005d6e <HAL_SPI_IRQHandler+0xe2>
       ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d68:	69db      	ldr	r3, [r3, #28]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d007      	beq.n	8005d7e <HAL_SPI_IRQHandler+0xf2>
 8005d6e:	7afb      	ldrb	r3, [r7, #11]
 8005d70:	2b03      	cmp	r3, #3
 8005d72:	d05a      	beq.n	8005e2a <HAL_SPI_IRQHandler+0x19e>
       ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)) )   // DMA is used in normal mode
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d78:	69db      	ldr	r3, [r3, #28]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d155      	bne.n	8005e2a <HAL_SPI_IRQHandler+0x19e>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN|SPI_CFG1_RXDMAEN))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d13e      	bne.n	8005e0a <HAL_SPI_IRQHandler+0x17e>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0)
 8005d8c:	e037      	b.n	8005dfe <HAL_SPI_IRQHandler+0x172>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	2b0f      	cmp	r3, #15
 8005d94:	d90b      	bls.n	8005dae <HAL_SPI_IRQHandler+0x122>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	6812      	ldr	r2, [r2, #0]
 8005d9e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005da0:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005da6:	1d1a      	adds	r2, r3, #4
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	665a      	str	r2, [r3, #100]	; 0x64
 8005dac:	e01e      	b.n	8005dec <HAL_SPI_IRQHandler+0x160>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	2b07      	cmp	r3, #7
 8005db4:	d90d      	bls.n	8005dd2 <HAL_SPI_IRQHandler+0x146>
          {
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	6812      	ldr	r2, [r2, #0]
 8005dbe:	3230      	adds	r2, #48	; 0x30
 8005dc0:	8812      	ldrh	r2, [r2, #0]
 8005dc2:	b292      	uxth	r2, r2
 8005dc4:	801a      	strh	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005dca:	1c9a      	adds	r2, r3, #2
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	665a      	str	r2, [r3, #100]	; 0x64
 8005dd0:	e00c      	b.n	8005dec <HAL_SPI_IRQHandler+0x160>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	6812      	ldr	r2, [r2, #0]
 8005dda:	3230      	adds	r2, #48	; 0x30
 8005ddc:	7812      	ldrb	r2, [r2, #0]
 8005dde:	b2d2      	uxtb	r2, r2
 8005de0:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005de6:	1c5a      	adds	r2, r3, #1
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	665a      	str	r2, [r3, #100]	; 0x64
          }
          hspi->RxXferCount--;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	3b01      	subs	r3, #1
 8005df6:	b29a      	uxth	r2, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d1c1      	bne.n	8005d8e <HAL_SPI_IRQHandler+0x102>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 f924 	bl	8006058 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d003      	beq.n	8005e2a <HAL_SPI_IRQHandler+0x19e>
      {
        HAL_SPI_ErrorCallback(hspi);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 f8f4 	bl	8006010 <HAL_SPI_ErrorCallback>
        return;
 8005e28:	e0cd      	b.n	8005fc6 <HAL_SPI_IRQHandler+0x33a>
      }
    }

    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8005e2a:	7afb      	ldrb	r3, [r7, #11]
 8005e2c:	2b05      	cmp	r3, #5
 8005e2e:	d103      	bne.n	8005e38 <HAL_SPI_IRQHandler+0x1ac>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f000 f8e3 	bl	8005ffc <HAL_SPI_TxRxCpltCallback>
    }
    else if (State == HAL_SPI_STATE_BUSY_TX)
    {
      HAL_SPI_TxCpltCallback(hspi);
    }
    return;
 8005e36:	e0c3      	b.n	8005fc0 <HAL_SPI_IRQHandler+0x334>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8005e38:	7afb      	ldrb	r3, [r7, #11]
 8005e3a:	2b04      	cmp	r3, #4
 8005e3c:	d103      	bne.n	8005e46 <HAL_SPI_IRQHandler+0x1ba>
      HAL_SPI_RxCpltCallback(hspi);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 f8d2 	bl	8005fe8 <HAL_SPI_RxCpltCallback>
    return;
 8005e44:	e0bc      	b.n	8005fc0 <HAL_SPI_IRQHandler+0x334>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8005e46:	7afb      	ldrb	r3, [r7, #11]
 8005e48:	2b03      	cmp	r3, #3
 8005e4a:	f040 80b9 	bne.w	8005fc0 <HAL_SPI_IRQHandler+0x334>
      HAL_SPI_TxCpltCallback(hspi);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 f8c0 	bl	8005fd4 <HAL_SPI_TxCpltCallback>
    return;
 8005e54:	e0b4      	b.n	8005fc0 <HAL_SPI_IRQHandler+0x334>
  }

  if (HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT) && HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP ))
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	f003 0308 	and.w	r3, r3, #8
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d00d      	beq.n	8005e7c <HAL_SPI_IRQHandler+0x1f0>
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d008      	beq.n	8005e7c <HAL_SPI_IRQHandler+0x1f0>
  {
    /* Abort on going, clear SUSP flag to avoid infinit looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	6812      	ldr	r2, [r2, #0]
 8005e72:	6992      	ldr	r2, [r2, #24]
 8005e74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e78:	619a      	str	r2, [r3, #24]
    
    return;
 8005e7a:	e0a4      	b.n	8005fc6 <HAL_SPI_IRQHandler+0x33a>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != RESET)
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	f000 809f 	beq.w	8005fc6 <HAL_SPI_IRQHandler+0x33a>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != RESET)
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d00f      	beq.n	8005eb2 <HAL_SPI_IRQHandler+0x226>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e98:	f043 0204 	orr.w	r2, r3, #4
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	6812      	ldr	r2, [r2, #0]
 8005eaa:	6992      	ldr	r2, [r2, #24]
 8005eac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005eb0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != RESET)
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d00f      	beq.n	8005edc <HAL_SPI_IRQHandler+0x250>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ec2:	f043 0201 	orr.w	r2, r3, #1
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	6812      	ldr	r2, [r2, #0]
 8005ed4:	6992      	ldr	r2, [r2, #24]
 8005ed6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005eda:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != RESET)
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d00f      	beq.n	8005f06 <HAL_SPI_IRQHandler+0x27a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005eec:	f043 0208 	orr.w	r2, r3, #8
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	6812      	ldr	r2, [r2, #0]
 8005efe:	6992      	ldr	r2, [r2, #24]
 8005f00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f04:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != RESET)
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	f003 0320 	and.w	r3, r3, #32
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d00f      	beq.n	8005f30 <HAL_SPI_IRQHandler+0x2a4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f16:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	6812      	ldr	r2, [r2, #0]
 8005f28:	6992      	ldr	r2, [r2, #24]
 8005f2a:	f042 0220 	orr.w	r2, r2, #32
 8005f2e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d044      	beq.n	8005fc4 <HAL_SPI_IRQHandler+0x338>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	6812      	ldr	r2, [r2, #0]
 8005f42:	6812      	ldr	r2, [r2, #0]
 8005f44:	f022 0201 	bic.w	r2, r2, #1
 8005f48:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	6919      	ldr	r1, [r3, #16]
 8005f54:	4b1d      	ldr	r3, [pc, #116]	; (8005fcc <HAL_SPI_IRQHandler+0x340>)
 8005f56:	400b      	ands	r3, r1
 8005f58:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN|SPI_CFG1_RXDMAEN))
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d022      	beq.n	8005faa <HAL_SPI_IRQHandler+0x31e>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	6812      	ldr	r2, [r2, #0]
 8005f6c:	6892      	ldr	r2, [r2, #8]
 8005f6e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005f72:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d008      	beq.n	8005f8e <HAL_SPI_IRQHandler+0x302>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f80:	4a13      	ldr	r2, [pc, #76]	; (8005fd0 <HAL_SPI_IRQHandler+0x344>)
 8005f82:	651a      	str	r2, [r3, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmarx);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f7fa ff11 	bl	8000db0 <HAL_DMA_Abort_IT>
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d016      	beq.n	8005fc4 <HAL_SPI_IRQHandler+0x338>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f9a:	4a0d      	ldr	r2, [pc, #52]	; (8005fd0 <HAL_SPI_IRQHandler+0x344>)
 8005f9c:	651a      	str	r2, [r3, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmatx);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f7fa ff04 	bl	8000db0 <HAL_DMA_Abort_IT>

        /* Call user error callback */
        HAL_SPI_ErrorCallback(hspi);
      }
    }
    return;
 8005fa8:	e00c      	b.n	8005fc4 <HAL_SPI_IRQHandler+0x338>
        hspi->State = HAL_SPI_STATE_READY;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2201      	movs	r2, #1
 8005fae:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 f82c 	bl	8006010 <HAL_SPI_ErrorCallback>
    return;
 8005fb8:	bf00      	nop
 8005fba:	e003      	b.n	8005fc4 <HAL_SPI_IRQHandler+0x338>
    return;
 8005fbc:	bf00      	nop
 8005fbe:	e002      	b.n	8005fc6 <HAL_SPI_IRQHandler+0x33a>
    return;
 8005fc0:	bf00      	nop
 8005fc2:	e000      	b.n	8005fc6 <HAL_SPI_IRQHandler+0x33a>
    return;
 8005fc4:	bf00      	nop
  }
}
 8005fc6:	3720      	adds	r7, #32
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	fffffc94 	.word	0xfffffc94
 8005fd0:	08006025 	.word	0x08006025

08005fd4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8005fdc:	bf00      	nop
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8005ff0:	bf00      	nop
 8005ff2:	370c      	adds	r7, #12
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006004:	bf00      	nop
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006018:	bf00      	nop
 800601a:	370c      	adds	r7, #12
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b084      	sub	sp, #16
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006030:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2200      	movs	r2, #0
 8006036:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = 0U;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2201      	movs	r2, #1
 8006046:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  HAL_SPI_ErrorCallback(hspi);
 800604a:	68f8      	ldr	r0, [r7, #12]
 800604c:	f7ff ffe0 	bl	8006010 <HAL_SPI_ErrorCallback>
}
 8006050:	bf00      	nop
 8006052:	3710      	adds	r7, #16
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006058:	b480      	push	{r7}
 800605a:	b085      	sub	sp, #20
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	695b      	ldr	r3, [r3, #20]
 8006066:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	6812      	ldr	r2, [r2, #0]
 8006070:	6992      	ldr	r2, [r2, #24]
 8006072:	f042 0208 	orr.w	r2, r2, #8
 8006076:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	6812      	ldr	r2, [r2, #0]
 8006080:	6992      	ldr	r2, [r2, #24]
 8006082:	f042 0210 	orr.w	r2, r2, #16
 8006086:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	6812      	ldr	r2, [r2, #0]
 8006090:	6812      	ldr	r2, [r2, #0]
 8006092:	f022 0201 	bic.w	r2, r2, #1
 8006096:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	6919      	ldr	r1, [r3, #16]
 80060a2:	4b3c      	ldr	r3, [pc, #240]	; (8006194 <SPI_CloseTransfer+0x13c>)
 80060a4:	400b      	ands	r3, r1
 80060a6:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN|SPI_CFG1_RXDMAEN);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	6812      	ldr	r2, [r2, #0]
 80060b0:	6892      	ldr	r2, [r2, #8]
 80060b2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80060b6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	2b04      	cmp	r3, #4
 80060c2:	d014      	beq.n	80060ee <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != RESET)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f003 0320 	and.w	r3, r3, #32
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d00f      	beq.n	80060ee <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060d4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	6812      	ldr	r2, [r2, #0]
 80060e6:	6992      	ldr	r2, [r2, #24]
 80060e8:	f042 0220 	orr.w	r2, r2, #32
 80060ec:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	2b03      	cmp	r3, #3
 80060f8:	d014      	beq.n	8006124 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != RESET)
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006100:	2b00      	cmp	r3, #0
 8006102:	d00f      	beq.n	8006124 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800610a:	f043 0204 	orr.w	r2, r3, #4
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	6812      	ldr	r2, [r2, #0]
 800611c:	6992      	ldr	r2, [r2, #24]
 800611e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006122:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != RESET)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00f      	beq.n	800614e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006134:	f043 0201 	orr.w	r2, r3, #1
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	6812      	ldr	r2, [r2, #0]
 8006146:	6992      	ldr	r2, [r2, #24]
 8006148:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800614c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != RESET)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00f      	beq.n	8006178 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800615e:	f043 0208 	orr.w	r2, r3, #8
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	6812      	ldr	r2, [r2, #0]
 8006170:	6992      	ldr	r2, [r2, #24]
 8006172:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006176:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = 0U;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = 0U;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8006188:	bf00      	nop
 800618a:	3714      	adds	r7, #20
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr
 8006194:	fffffc94 	.word	0xfffffc94

08006198 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	603b      	str	r3, [r7, #0]
 80061a4:	4613      	mov	r3, r2
 80061a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80061a8:	e010      	b.n	80061cc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b0:	d00c      	beq.n	80061cc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d007      	beq.n	80061c8 <SPI_WaitOnFlagUntilTimeout+0x30>
 80061b8:	f7fa f8e4 	bl	8000384 <HAL_GetTick>
 80061bc:	4602      	mov	r2, r0
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	1ad2      	subs	r2, r2, r3
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d901      	bls.n	80061cc <SPI_WaitOnFlagUntilTimeout+0x34>
      {
        return HAL_TIMEOUT;
 80061c8:	2303      	movs	r3, #3
 80061ca:	e00f      	b.n	80061ec <SPI_WaitOnFlagUntilTimeout+0x54>
  while((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	695a      	ldr	r2, [r3, #20]
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	401a      	ands	r2, r3
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	429a      	cmp	r2, r3
 80061da:	bf0c      	ite	eq
 80061dc:	2301      	moveq	r3, #1
 80061de:	2300      	movne	r3, #0
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	461a      	mov	r2, r3
 80061e4:	79fb      	ldrb	r3, [r7, #7]
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d0df      	beq.n	80061aa <SPI_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80061ea:	2300      	movs	r3, #0
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3710      	adds	r7, #16
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occuppied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold>>SPI_CFG1_FTHLV_Pos) + 1;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006200:	095b      	lsrs	r3, r3, #5
 8006202:	3301      	adds	r3, #1
 8006204:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize     >>SPI_CFG1_DSIZE_Pos) + 1;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	3301      	adds	r3, #1
 800620c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size+7)/8;
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	3307      	adds	r3, #7
 8006212:	08db      	lsrs	r3, r3, #3
 8006214:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	68fa      	ldr	r2, [r7, #12]
 800621a:	fb02 f303 	mul.w	r3, r2, r3
}
 800621e:	4618      	mov	r0, r3
 8006220:	3714      	adds	r7, #20
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr
	...

0800622c <FMC_SDRAM_Init>:
  * @param  Device: Pointer to SDRAM device instance
  * @param  Init: Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800622c:	b480      	push	{r7}
 800622e:	b085      	sub	sp, #20
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8006236:	2300      	movs	r3, #0
 8006238:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800623a:	2300      	movs	r3, #0
 800623c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2b01      	cmp	r3, #1
 8006244:	d027      	beq.n	8006296 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	4b2f      	ldr	r3, [pc, #188]	; (800630c <FMC_SDRAM_Init+0xe0>)
 8006250:	4013      	ands	r3, r2
 8006252:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800625c:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8006262:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8006268:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800626e:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8006274:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800627a:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8006280:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8006286:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	4313      	orrs	r3, r2
 800628c:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	601a      	str	r2, [r3, #0]
 8006294:	e032      	b.n	80062fc <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062a2:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80062ac:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80062b2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80062c0:	68ba      	ldr	r2, [r7, #8]
 80062c2:	4b12      	ldr	r3, [pc, #72]	; (800630c <FMC_SDRAM_Init+0xe0>)
 80062c4:	4013      	ands	r3, r2
 80062c6:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80062d0:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 80062d6:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 80062dc:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 80062e2:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 80062e8:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80062ea:	68ba      	ldr	r2, [r7, #8]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	68fa      	ldr	r2, [r7, #12]
 80062f4:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	68ba      	ldr	r2, [r7, #8]
 80062fa:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 80062fc:	2300      	movs	r3, #0
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3714      	adds	r7, #20
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr
 800630a:	bf00      	nop
 800630c:	ffff8000 	.word	0xffff8000

08006310 <FMC_SDRAM_Timing_Init>:
  * @param  Timing: Pointer to SDRAM Timing structure
  * @param  Bank: SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006310:	b480      	push	{r7}
 8006312:	b087      	sub	sp, #28
 8006314:	af00      	add	r7, sp, #0
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800631c:	2300      	movs	r3, #0
 800631e:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8006320:	2300      	movs	r3, #0
 8006322:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2b01      	cmp	r3, #1
 8006328:	d02e      	beq.n	8006388 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006336:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	3b01      	subs	r3, #1
 8006344:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006346:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	3b01      	subs	r3, #1
 800634e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8006350:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	68db      	ldr	r3, [r3, #12]
 8006356:	3b01      	subs	r3, #1
 8006358:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800635a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	3b01      	subs	r3, #1
 8006362:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8006364:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	695b      	ldr	r3, [r3, #20]
 800636a:	3b01      	subs	r3, #1
 800636c:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800636e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	699b      	ldr	r3, [r3, #24]
 8006374:	3b01      	subs	r3, #1
 8006376:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006378:	4313      	orrs	r3, r2
 800637a:	697a      	ldr	r2, [r7, #20]
 800637c:	4313      	orrs	r3, r2
 800637e:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	697a      	ldr	r2, [r7, #20]
 8006384:	609a      	str	r2, [r3, #8]
 8006386:	e039      	b.n	80063fc <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800638e:	697a      	ldr	r2, [r7, #20]
 8006390:	4b1e      	ldr	r3, [pc, #120]	; (800640c <FMC_SDRAM_Timing_Init+0xfc>)
 8006392:	4013      	ands	r3, r2
 8006394:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	3b01      	subs	r3, #1
 800639c:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	695b      	ldr	r3, [r3, #20]
 80063a2:	3b01      	subs	r3, #1
 80063a4:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80063a6:	4313      	orrs	r3, r2
 80063a8:	697a      	ldr	r2, [r7, #20]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80063ba:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	3b01      	subs	r3, #1
 80063c8:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80063ca:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	3b01      	subs	r3, #1
 80063d2:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80063d4:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	691b      	ldr	r3, [r3, #16]
 80063da:	3b01      	subs	r3, #1
 80063dc:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80063de:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	699b      	ldr	r3, [r3, #24]
 80063e4:	3b01      	subs	r3, #1
 80063e6:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80063e8:	4313      	orrs	r3, r2
 80063ea:	693a      	ldr	r2, [r7, #16]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	697a      	ldr	r2, [r7, #20]
 80063f4:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	693a      	ldr	r2, [r7, #16]
 80063fa:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	371c      	adds	r7, #28
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr
 800640a:	bf00      	nop
 800640c:	ff0f0fff 	.word	0xff0f0fff

08006410 <CODEC_Init_TDM>:
	CS_H;
	/*First block written*/
}

void CODEC_Init_TDM(SPI_HandleTypeDef hspi5)
{
 8006410:	b084      	sub	sp, #16
 8006412:	b580      	push	{r7, lr}
 8006414:	b084      	sub	sp, #16
 8006416:	af00      	add	r7, sp, #0
 8006418:	f107 0e18 	add.w	lr, r7, #24
 800641c:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
	uint8_t Send[8];

	/*CODEC Startup*/
	ANA_EN;
 8006420:	4b21      	ldr	r3, [pc, #132]	; (80064a8 <CODEC_Init_TDM+0x98>)
 8006422:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006426:	831a      	strh	r2, [r3, #24]
	CS_H;
 8006428:	4b20      	ldr	r3, [pc, #128]	; (80064ac <CODEC_Init_TDM+0x9c>)
 800642a:	2240      	movs	r2, #64	; 0x40
 800642c:	831a      	strh	r2, [r3, #24]
	RST_H;
 800642e:	4b20      	ldr	r3, [pc, #128]	; (80064b0 <CODEC_Init_TDM+0xa0>)
 8006430:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006434:	831a      	strh	r2, [r3, #24]
	/*CODEC Ready*/

	/*Prepare first settings block*/
	Send[0] = 0x9E;	//CODEC Address
 8006436:	239e      	movs	r3, #158	; 0x9e
 8006438:	713b      	strb	r3, [r7, #4]
	Send[1] = 0x82; //MAP with Increment
 800643a:	2382      	movs	r3, #130	; 0x82
 800643c:	717b      	strb	r3, [r7, #5]
	Send[2] = 0x98; //Power Control
 800643e:	2398      	movs	r3, #152	; 0x98
 8006440:	71bb      	strb	r3, [r7, #6]

	Send[3] = 0xF4; //Functional Mode
 8006442:	23f4      	movs	r3, #244	; 0xf4
 8006444:	71fb      	strb	r3, [r7, #7]
	Send[4] = 0x36; //Interface Formats
 8006446:	2336      	movs	r3, #54	; 0x36
 8006448:	723b      	strb	r3, [r7, #8]
	Send[5] = 0x08; //ADC Control
 800644a:	2308      	movs	r3, #8
 800644c:	727b      	strb	r3, [r7, #9]
	Send[6] = 0x21;	//Transition Control
 800644e:	2321      	movs	r3, #33	; 0x21
 8006450:	72bb      	strb	r3, [r7, #10]
	Send[7] = 0xF8;	//DAC Channel Mute
 8006452:	23f8      	movs	r3, #248	; 0xf8
 8006454:	72fb      	strb	r3, [r7, #11]
	/*First block ready*/

	/*Write first block*/
	Nope1us;
 8006456:	2300      	movs	r3, #0
 8006458:	73fb      	strb	r3, [r7, #15]
 800645a:	e003      	b.n	8006464 <CODEC_Init_TDM+0x54>
 800645c:	bf00      	nop
 800645e:	7bfb      	ldrb	r3, [r7, #15]
 8006460:	3301      	adds	r3, #1
 8006462:	73fb      	strb	r3, [r7, #15]
 8006464:	7bfb      	ldrb	r3, [r7, #15]
 8006466:	2b61      	cmp	r3, #97	; 0x61
 8006468:	d9f8      	bls.n	800645c <CODEC_Init_TDM+0x4c>
	CS_L;
 800646a:	4b10      	ldr	r3, [pc, #64]	; (80064ac <CODEC_Init_TDM+0x9c>)
 800646c:	2240      	movs	r2, #64	; 0x40
 800646e:	835a      	strh	r2, [r3, #26]
	Nope250ns;
 8006470:	2300      	movs	r3, #0
 8006472:	73bb      	strb	r3, [r7, #14]
 8006474:	e003      	b.n	800647e <CODEC_Init_TDM+0x6e>
 8006476:	bf00      	nop
 8006478:	7bbb      	ldrb	r3, [r7, #14]
 800647a:	3301      	adds	r3, #1
 800647c:	73bb      	strb	r3, [r7, #14]
 800647e:	7bbb      	ldrb	r3, [r7, #14]
 8006480:	2b15      	cmp	r3, #21
 8006482:	d9f8      	bls.n	8006476 <CODEC_Init_TDM+0x66>
	HAL_SPI_Transmit(&hspi5, Send, 8, 0xFF);
 8006484:	1d39      	adds	r1, r7, #4
 8006486:	23ff      	movs	r3, #255	; 0xff
 8006488:	2208      	movs	r2, #8
 800648a:	f107 0018 	add.w	r0, r7, #24
 800648e:	f7ff fa09 	bl	80058a4 <HAL_SPI_Transmit>
	CS_H;
 8006492:	4b06      	ldr	r3, [pc, #24]	; (80064ac <CODEC_Init_TDM+0x9c>)
 8006494:	2240      	movs	r2, #64	; 0x40
 8006496:	831a      	strh	r2, [r3, #24]
	Nope250ns;
	HAL_SPI_Transmit_IT(&hspi5, Send, 8);
	CS_H;
	*/
	/*Second block written*/
}
 8006498:	bf00      	nop
 800649a:	3710      	adds	r7, #16
 800649c:	46bd      	mov	sp, r7
 800649e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064a2:	b004      	add	sp, #16
 80064a4:	4770      	bx	lr
 80064a6:	bf00      	nop
 80064a8:	58020000 	.word	0x58020000
 80064ac:	58021400 	.word	0x58021400
 80064b0:	58020c00 	.word	0x58020c00

080064b4 <HAL_SAI_RxCpltCallback>:

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
	/*HAL_DMA_Start(&hdma_memtomem_dma2_stream0, (uint32_t)Block2, (uint32_t)Block3, MemSize);*/
	//HAL_DMA_Start_IT(&hdma_memtomem_dma1_stream2, (uint32_t)Block1, (uint32_t)Block3, MemSize);
	EditSR = 0;
 80064bc:	4b04      	ldr	r3, [pc, #16]	; (80064d0 <HAL_SAI_RxCpltCallback+0x1c>)
 80064be:	2200      	movs	r2, #0
 80064c0:	701a      	strb	r2, [r3, #0]
}
 80064c2:	bf00      	nop
 80064c4:	370c      	adds	r7, #12
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr
 80064ce:	bf00      	nop
 80064d0:	20000035 	.word	0x20000035

080064d4 <HAL_SAI_TxCpltCallback>:
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]

}
 80064dc:	bf00      	nop
 80064de:	370c      	adds	r7, #12
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr

080064e8 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 80064e8:	b590      	push	{r4, r7, lr}
 80064ea:	b09f      	sub	sp, #124	; 0x7c
 80064ec:	af1e      	add	r7, sp, #120	; 0x78
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80064ee:	f7f9 fef3 	bl	80002d8 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80064f2:	f000 f8b9 	bl	8006668 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80064f6:	f000 fbf3 	bl	8006ce0 <MX_GPIO_Init>
  MX_BDMA_Init();
 80064fa:	f000 fafb 	bl	8006af4 <MX_BDMA_Init>
  MX_DMA_Init();
 80064fe:	f000 fb41 	bl	8006b84 <MX_DMA_Init>
  MX_FMC_Init();
 8006502:	f000 fba1 	bl	8006c48 <MX_FMC_Init>
  MX_SAI2_Init();
 8006506:	f000 f9c9 	bl	800689c <MX_SAI2_Init>
  MX_SPI5_Init();
 800650a:	f000 fa97 	bl	8006a3c <MX_SPI5_Init>
  MX_LPTIM5_Init();
 800650e:	f000 f999 	bl	8006844 <MX_LPTIM5_Init>
  MX_LPTIM3_Init();
 8006512:	f000 f969 	bl	80067e8 <MX_LPTIM3_Init>
  /* USER CODE BEGIN 2 */
#ifdef DEBUG
  G_L;
 8006516:	4b46      	ldr	r3, [pc, #280]	; (8006630 <main+0x148>)
 8006518:	2280      	movs	r2, #128	; 0x80
 800651a:	831a      	strh	r2, [r3, #24]
  B_L;
 800651c:	4b45      	ldr	r3, [pc, #276]	; (8006634 <main+0x14c>)
 800651e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006522:	831a      	strh	r2, [r3, #24]
  HAL_Delay(250);
 8006524:	20fa      	movs	r0, #250	; 0xfa
 8006526:	f7f9 ff39 	bl	800039c <HAL_Delay>

  R_L;
 800652a:	4b41      	ldr	r3, [pc, #260]	; (8006630 <main+0x148>)
 800652c:	2240      	movs	r2, #64	; 0x40
 800652e:	831a      	strh	r2, [r3, #24]
  G_H;
 8006530:	4b3f      	ldr	r3, [pc, #252]	; (8006630 <main+0x148>)
 8006532:	2280      	movs	r2, #128	; 0x80
 8006534:	835a      	strh	r2, [r3, #26]
  HAL_Delay(250);
 8006536:	20fa      	movs	r0, #250	; 0xfa
 8006538:	f7f9 ff30 	bl	800039c <HAL_Delay>

  G_L
 800653c:	4b3c      	ldr	r3, [pc, #240]	; (8006630 <main+0x148>)
 800653e:	2280      	movs	r2, #128	; 0x80
 8006540:	831a      	strh	r2, [r3, #24]
  B_H;
 8006542:	4b3c      	ldr	r3, [pc, #240]	; (8006634 <main+0x14c>)
 8006544:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006548:	835a      	strh	r2, [r3, #26]
  HAL_Delay(250);
 800654a:	20fa      	movs	r0, #250	; 0xfa
 800654c:	f7f9 ff26 	bl	800039c <HAL_Delay>

  B_L;
 8006550:	4b38      	ldr	r3, [pc, #224]	; (8006634 <main+0x14c>)
 8006552:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006556:	831a      	strh	r2, [r3, #24]
  HAL_Delay(250);
 8006558:	20fa      	movs	r0, #250	; 0xfa
 800655a:	f7f9 ff1f 	bl	800039c <HAL_Delay>
#endif

    MemSize = 32 * BlockSize;
 800655e:	4b36      	ldr	r3, [pc, #216]	; (8006638 <main+0x150>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	015b      	lsls	r3, r3, #5
 8006564:	4a35      	ldr	r2, [pc, #212]	; (800663c <main+0x154>)
 8006566:	6013      	str	r3, [r2, #0]
    GetSize = 8 * BlockSize;
 8006568:	4b33      	ldr	r3, [pc, #204]	; (8006638 <main+0x150>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	00db      	lsls	r3, r3, #3
 800656e:	4a34      	ldr	r2, [pc, #208]	; (8006640 <main+0x158>)
 8006570:	6013      	str	r3, [r2, #0]

    /*Allocate Blocks*/
    Block1 = (uint8_t *) RAM_D2;
 8006572:	4b34      	ldr	r3, [pc, #208]	; (8006644 <main+0x15c>)
 8006574:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8006578:	601a      	str	r2, [r3, #0]
    Block2 = (uint8_t *) RAM_D2 + MemSize;
 800657a:	4b30      	ldr	r3, [pc, #192]	; (800663c <main+0x154>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
 8006582:	4a31      	ldr	r2, [pc, #196]	; (8006648 <main+0x160>)
 8006584:	6013      	str	r3, [r2, #0]
    Block3 = (uint8_t *) RAM_D2 + MemSize + MemSize;
 8006586:	4b2d      	ldr	r3, [pc, #180]	; (800663c <main+0x154>)
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	4b2c      	ldr	r3, [pc, #176]	; (800663c <main+0x154>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4413      	add	r3, r2
 8006590:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
 8006594:	4a2d      	ldr	r2, [pc, #180]	; (800664c <main+0x164>)
 8006596:	6013      	str	r3, [r2, #0]

	/*Configure CODEC for TDM*/
	CODEC_Init_TDM(hspi5);
 8006598:	4c2d      	ldr	r4, [pc, #180]	; (8006650 <main+0x168>)
 800659a:	4668      	mov	r0, sp
 800659c:	f104 0310 	add.w	r3, r4, #16
 80065a0:	2278      	movs	r2, #120	; 0x78
 80065a2:	4619      	mov	r1, r3
 80065a4:	f001 f862 	bl	800766c <memcpy>
 80065a8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80065ac:	f7ff ff30 	bl	8006410 <CODEC_Init_TDM>

	/*Start Sampling Process*/
	SAI2_Block_B->CR1 |= 0x1000;
 80065b0:	4a28      	ldr	r2, [pc, #160]	; (8006654 <main+0x16c>)
 80065b2:	4b28      	ldr	r3, [pc, #160]	; (8006654 <main+0x16c>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80065ba:	6013      	str	r3, [r2, #0]
	if (HAL_SAI_Receive_DMA(&hsai_BlockA2, Block1, GetSize) == HAL_OK)
 80065bc:	4b21      	ldr	r3, [pc, #132]	; (8006644 <main+0x15c>)
 80065be:	6819      	ldr	r1, [r3, #0]
 80065c0:	4b1f      	ldr	r3, [pc, #124]	; (8006640 <main+0x158>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	461a      	mov	r2, r3
 80065c8:	4823      	ldr	r0, [pc, #140]	; (8006658 <main+0x170>)
 80065ca:	f7fe fcb7 	bl	8004f3c <HAL_SAI_Receive_DMA>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d109      	bne.n	80065e8 <main+0x100>
	{
		HAL_SAI_Transmit_DMA(&hsai_BlockB2, Block3, GetSize);
 80065d4:	4b1d      	ldr	r3, [pc, #116]	; (800664c <main+0x164>)
 80065d6:	6819      	ldr	r1, [r3, #0]
 80065d8:	4b19      	ldr	r3, [pc, #100]	; (8006640 <main+0x158>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	b29b      	uxth	r3, r3
 80065de:	461a      	mov	r2, r3
 80065e0:	481e      	ldr	r0, [pc, #120]	; (800665c <main+0x174>)
 80065e2:	f7fe fbfb 	bl	8004ddc <HAL_SAI_Transmit_DMA>
 80065e6:	e002      	b.n	80065ee <main+0x106>
	}
	else
	{

		#ifdef DEBUG
			R_H;
 80065e8:	4b11      	ldr	r3, [pc, #68]	; (8006630 <main+0x148>)
 80065ea:	2240      	movs	r2, #64	; 0x40
 80065ec:	835a      	strh	r2, [r3, #26]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  G_H;
 80065ee:	4b10      	ldr	r3, [pc, #64]	; (8006630 <main+0x148>)
 80065f0:	2280      	movs	r2, #128	; 0x80
 80065f2:	835a      	strh	r2, [r3, #26]
			  Block3[8+x*32] = Block1[4+x*32];
			  Block3[9+x*32] = Block1[5+x*32];
			  Block3[10+x*32] = Block1[6+x*32];
			  Block3[11+x*32] = Block1[7+x*32];
		  }*/
	  if (EditSR == 0)
 80065f4:	4b1a      	ldr	r3, [pc, #104]	; (8006660 <main+0x178>)
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d111      	bne.n	8006620 <main+0x138>
	  {
		  B_H;
 80065fc:	4b0d      	ldr	r3, [pc, #52]	; (8006634 <main+0x14c>)
 80065fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006602:	835a      	strh	r2, [r3, #26]
			  Block3[8+x*32] = Block1[12+x*32];
			  Block3[9+x*32] = Block1[13+x*32];
			  Block3[10+x*32] = Block1[14+x*32];
			  Block3[11+x*32] = Block1[15+x*32];
		  }*/
			  HAL_DMA_Start(&hdma_memtomem_dma1_stream2, (uint32_t)Block1, (uint32_t)Block3, MemSize);
 8006604:	4b0f      	ldr	r3, [pc, #60]	; (8006644 <main+0x15c>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4619      	mov	r1, r3
 800660a:	4b10      	ldr	r3, [pc, #64]	; (800664c <main+0x164>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	461a      	mov	r2, r3
 8006610:	4b0a      	ldr	r3, [pc, #40]	; (800663c <main+0x154>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4813      	ldr	r0, [pc, #76]	; (8006664 <main+0x17c>)
 8006616:	f7fa f99b 	bl	8000950 <HAL_DMA_Start>

		  EditSR = 1;
 800661a:	4b11      	ldr	r3, [pc, #68]	; (8006660 <main+0x178>)
 800661c:	2201      	movs	r2, #1
 800661e:	701a      	strb	r2, [r3, #0]
	  }
	  B_L;
 8006620:	4b04      	ldr	r3, [pc, #16]	; (8006634 <main+0x14c>)
 8006622:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006626:	831a      	strh	r2, [r3, #24]
		  /* DSP CODE END */


	  G_L;
 8006628:	4b01      	ldr	r3, [pc, #4]	; (8006630 <main+0x148>)
 800662a:	2280      	movs	r2, #128	; 0x80
 800662c:	831a      	strh	r2, [r3, #24]
	  G_H;
 800662e:	e7de      	b.n	80065ee <main+0x106>
 8006630:	58020c00 	.word	0x58020c00
 8006634:	58021800 	.word	0x58021800
 8006638:	20000008 	.word	0x20000008
 800663c:	20000150 	.word	0x20000150
 8006640:	20000498 	.word	0x20000498
 8006644:	200002e8 	.word	0x200002e8
 8006648:	20000494 	.word	0x20000494
 800664c:	20000368 	.word	0x20000368
 8006650:	20000154 	.word	0x20000154
 8006654:	40015c24 	.word	0x40015c24
 8006658:	200001dc 	.word	0x200001dc
 800665c:	20000044 	.word	0x20000044
 8006660:	20000035 	.word	0x20000035
 8006664:	2000036c 	.word	0x2000036c

08006668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b0cc      	sub	sp, #304	; 0x130
 800666c:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Supply configuration update enable 
    */
  MODIFY_REG(PWR->CR3, PWR_CR3_SCUEN, 0);
 800666e:	4a59      	ldr	r2, [pc, #356]	; (80067d4 <SystemClock_Config+0x16c>)
 8006670:	4b58      	ldr	r3, [pc, #352]	; (80067d4 <SystemClock_Config+0x16c>)
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	f023 0304 	bic.w	r3, r3, #4
 8006678:	60d3      	str	r3, [r2, #12]

    /**Configure the main internal regulator output voltage 
    */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800667a:	1d3b      	adds	r3, r7, #4
 800667c:	2200      	movs	r2, #0
 800667e:	601a      	str	r2, [r3, #0]
 8006680:	4a54      	ldr	r2, [pc, #336]	; (80067d4 <SystemClock_Config+0x16c>)
 8006682:	4b54      	ldr	r3, [pc, #336]	; (80067d4 <SystemClock_Config+0x16c>)
 8006684:	699b      	ldr	r3, [r3, #24]
 8006686:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800668a:	6193      	str	r3, [r2, #24]
 800668c:	4b51      	ldr	r3, [pc, #324]	; (80067d4 <SystemClock_Config+0x16c>)
 800668e:	699b      	ldr	r3, [r3, #24]
 8006690:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8006694:	1d3b      	adds	r3, r7, #4
 8006696:	601a      	str	r2, [r3, #0]
 8006698:	1d3b      	adds	r3, r7, #4
 800669a:	681b      	ldr	r3, [r3, #0]

  while ((PWR->D3CR & (PWR_D3CR_VOSRDY)) != PWR_D3CR_VOSRDY) 
 800669c:	bf00      	nop
 800669e:	4b4d      	ldr	r3, [pc, #308]	; (80067d4 <SystemClock_Config+0x16c>)
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066aa:	d1f8      	bne.n	800669e <SystemClock_Config+0x36>
  {
    
  }
    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80066ac:	2301      	movs	r3, #1
 80066ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80066b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80066b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80066ba:	2302      	movs	r3, #2
 80066bc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80066c0:	2302      	movs	r3, #2
 80066c2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80066c6:	2301      	movs	r3, #1
 80066c8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 50;
 80066cc:	2332      	movs	r3, #50	; 0x32
 80066ce:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80066d2:	2302      	movs	r3, #2
 80066d4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80066d8:	2302      	movs	r3, #2
 80066da:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80066de:	2302      	movs	r3, #2
 80066e0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80066e4:	230c      	movs	r3, #12
 80066e6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80066ea:	2300      	movs	r3, #0
 80066ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80066f0:	2300      	movs	r3, #0
 80066f2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80066f6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80066fa:	4618      	mov	r0, r3
 80066fc:	f7fb fc4e 	bl	8001f9c <HAL_RCC_OscConfig>
 8006700:	4603      	mov	r3, r0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d004      	beq.n	8006710 <SystemClock_Config+0xa8>
  {
    _Error_Handler(__FILE__, __LINE__);
 8006706:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800670a:	4833      	ldr	r0, [pc, #204]	; (80067d8 <SystemClock_Config+0x170>)
 800670c:	f000 fbca 	bl	8006ea4 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006710:	233f      	movs	r3, #63	; 0x3f
 8006712:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006716:	2303      	movs	r3, #3
 8006718:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800671c:	2300      	movs	r3, #0
 800671e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8006722:	2308      	movs	r3, #8
 8006724:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8006728:	2340      	movs	r3, #64	; 0x40
 800672a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800672e:	2340      	movs	r3, #64	; 0x40
 8006730:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8006734:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006738:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800673c:	2340      	movs	r3, #64	; 0x40
 800673e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006742:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006746:	2102      	movs	r1, #2
 8006748:	4618      	mov	r0, r3
 800674a:	f7fb ffc1 	bl	80026d0 <HAL_RCC_ClockConfig>
 800674e:	4603      	mov	r3, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	d004      	beq.n	800675e <SystemClock_Config+0xf6>
  {
    _Error_Handler(__FILE__, __LINE__);
 8006754:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8006758:	481f      	ldr	r0, [pc, #124]	; (80067d8 <SystemClock_Config+0x170>)
 800675a:	f000 fba3 	bl	8006ea4 <_Error_Handler>
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5|RCC_PERIPHCLK_SAI2
 800675e:	f107 0308 	add.w	r3, r7, #8
 8006762:	4a1e      	ldr	r2, [pc, #120]	; (80067dc <SystemClock_Config+0x174>)
 8006764:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_LPTIM5|RCC_PERIPHCLK_LPTIM3
                              |RCC_PERIPHCLK_FMC;
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8006766:	f107 0308 	add.w	r3, r7, #8
 800676a:	2200      	movs	r2, #0
 800676c:	645a      	str	r2, [r3, #68]	; 0x44
  PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 800676e:	f107 0308 	add.w	r3, r7, #8
 8006772:	2200      	movs	r2, #0
 8006774:	659a      	str	r2, [r3, #88]	; 0x58
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_HSE;
 8006776:	f107 0308 	add.w	r3, r7, #8
 800677a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800677e:	661a      	str	r2, [r3, #96]	; 0x60
  PeriphClkInitStruct.Lptim345ClockSelection = RCC_LPTIM345CLKSOURCE_D3PCLK1;
 8006780:	f107 0308 	add.w	r3, r7, #8
 8006784:	2200      	movs	r2, #0
 8006786:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800678a:	f107 0308 	add.w	r3, r7, #8
 800678e:	4618      	mov	r0, r3
 8006790:	f7fc fa58 	bl	8002c44 <HAL_RCCEx_PeriphCLKConfig>
 8006794:	4603      	mov	r3, r0
 8006796:	2b00      	cmp	r3, #0
 8006798:	d004      	beq.n	80067a4 <SystemClock_Config+0x13c>
  {
    _Error_Handler(__FILE__, __LINE__);
 800679a:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 800679e:	480e      	ldr	r0, [pc, #56]	; (80067d8 <SystemClock_Config+0x170>)
 80067a0:	f000 fb80 	bl	8006ea4 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 80067a4:	4b0e      	ldr	r3, [pc, #56]	; (80067e0 <SystemClock_Config+0x178>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a0e      	ldr	r2, [pc, #56]	; (80067e4 <SystemClock_Config+0x17c>)
 80067aa:	fba2 2303 	umull	r2, r3, r2, r3
 80067ae:	099b      	lsrs	r3, r3, #6
 80067b0:	4618      	mov	r0, r3
 80067b2:	f7f9 ff18 	bl	80005e6 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80067b6:	2004      	movs	r0, #4
 80067b8:	f7f9 ff22 	bl	8000600 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80067bc:	2200      	movs	r2, #0
 80067be:	2100      	movs	r1, #0
 80067c0:	f04f 30ff 	mov.w	r0, #4294967295
 80067c4:	f7f9 fee5 	bl	8000592 <HAL_NVIC_SetPriority>
}
 80067c8:	bf00      	nop
 80067ca:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	58024800 	.word	0x58024800
 80067d8:	080076a4 	.word	0x080076a4
 80067dc:	01002280 	.word	0x01002280
 80067e0:	2000000c 	.word	0x2000000c
 80067e4:	10624dd3 	.word	0x10624dd3

080067e8 <MX_LPTIM3_Init>:

/* LPTIM3 init function */
static void MX_LPTIM3_Init(void)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	af00      	add	r7, sp, #0

  hlptim3.Instance = LPTIM3;
 80067ec:	4b12      	ldr	r3, [pc, #72]	; (8006838 <MX_LPTIM3_Init+0x50>)
 80067ee:	4a13      	ldr	r2, [pc, #76]	; (800683c <MX_LPTIM3_Init+0x54>)
 80067f0:	601a      	str	r2, [r3, #0]
  hlptim3.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80067f2:	4b11      	ldr	r3, [pc, #68]	; (8006838 <MX_LPTIM3_Init+0x50>)
 80067f4:	2200      	movs	r2, #0
 80067f6:	605a      	str	r2, [r3, #4]
  hlptim3.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 80067f8:	4b0f      	ldr	r3, [pc, #60]	; (8006838 <MX_LPTIM3_Init+0x50>)
 80067fa:	2200      	movs	r2, #0
 80067fc:	609a      	str	r2, [r3, #8]
  hlptim3.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80067fe:	4b0e      	ldr	r3, [pc, #56]	; (8006838 <MX_LPTIM3_Init+0x50>)
 8006800:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006804:	615a      	str	r2, [r3, #20]
  hlptim3.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8006806:	4b0c      	ldr	r3, [pc, #48]	; (8006838 <MX_LPTIM3_Init+0x50>)
 8006808:	2200      	movs	r2, #0
 800680a:	621a      	str	r2, [r3, #32]
  hlptim3.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 800680c:	4b0a      	ldr	r3, [pc, #40]	; (8006838 <MX_LPTIM3_Init+0x50>)
 800680e:	2200      	movs	r2, #0
 8006810:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim3.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8006812:	4b09      	ldr	r3, [pc, #36]	; (8006838 <MX_LPTIM3_Init+0x50>)
 8006814:	2200      	movs	r2, #0
 8006816:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim3.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8006818:	4b07      	ldr	r3, [pc, #28]	; (8006838 <MX_LPTIM3_Init+0x50>)
 800681a:	2200      	movs	r2, #0
 800681c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_LPTIM_Init(&hlptim3) != HAL_OK)
 800681e:	4806      	ldr	r0, [pc, #24]	; (8006838 <MX_LPTIM3_Init+0x50>)
 8006820:	f7fb fa42 	bl	8001ca8 <HAL_LPTIM_Init>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d004      	beq.n	8006834 <MX_LPTIM3_Init+0x4c>
  {
    _Error_Handler(__FILE__, __LINE__);
 800682a:	f240 1189 	movw	r1, #393	; 0x189
 800682e:	4804      	ldr	r0, [pc, #16]	; (8006840 <MX_LPTIM3_Init+0x58>)
 8006830:	f000 fb38 	bl	8006ea4 <_Error_Handler>
  }

}
 8006834:	bf00      	nop
 8006836:	bd80      	pop	{r7, pc}
 8006838:	20000274 	.word	0x20000274
 800683c:	58002800 	.word	0x58002800
 8006840:	080076a4 	.word	0x080076a4

08006844 <MX_LPTIM5_Init>:

/* LPTIM5 init function */
static void MX_LPTIM5_Init(void)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	af00      	add	r7, sp, #0

  hlptim5.Instance = LPTIM5;
 8006848:	4b11      	ldr	r3, [pc, #68]	; (8006890 <MX_LPTIM5_Init+0x4c>)
 800684a:	4a12      	ldr	r2, [pc, #72]	; (8006894 <MX_LPTIM5_Init+0x50>)
 800684c:	601a      	str	r2, [r3, #0]
  hlptim5.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800684e:	4b10      	ldr	r3, [pc, #64]	; (8006890 <MX_LPTIM5_Init+0x4c>)
 8006850:	2200      	movs	r2, #0
 8006852:	605a      	str	r2, [r3, #4]
  hlptim5.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8006854:	4b0e      	ldr	r3, [pc, #56]	; (8006890 <MX_LPTIM5_Init+0x4c>)
 8006856:	2200      	movs	r2, #0
 8006858:	609a      	str	r2, [r3, #8]
  hlptim5.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800685a:	4b0d      	ldr	r3, [pc, #52]	; (8006890 <MX_LPTIM5_Init+0x4c>)
 800685c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006860:	615a      	str	r2, [r3, #20]
  hlptim5.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8006862:	4b0b      	ldr	r3, [pc, #44]	; (8006890 <MX_LPTIM5_Init+0x4c>)
 8006864:	2200      	movs	r2, #0
 8006866:	621a      	str	r2, [r3, #32]
  hlptim5.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8006868:	4b09      	ldr	r3, [pc, #36]	; (8006890 <MX_LPTIM5_Init+0x4c>)
 800686a:	2200      	movs	r2, #0
 800686c:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim5.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 800686e:	4b08      	ldr	r3, [pc, #32]	; (8006890 <MX_LPTIM5_Init+0x4c>)
 8006870:	2200      	movs	r2, #0
 8006872:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim5) != HAL_OK)
 8006874:	4806      	ldr	r0, [pc, #24]	; (8006890 <MX_LPTIM5_Init+0x4c>)
 8006876:	f7fb fa17 	bl	8001ca8 <HAL_LPTIM_Init>
 800687a:	4603      	mov	r3, r0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d004      	beq.n	800688a <MX_LPTIM5_Init+0x46>
  {
    _Error_Handler(__FILE__, __LINE__);
 8006880:	f240 119b 	movw	r1, #411	; 0x19b
 8006884:	4804      	ldr	r0, [pc, #16]	; (8006898 <MX_LPTIM5_Init+0x54>)
 8006886:	f000 fb0d 	bl	8006ea4 <_Error_Handler>
  }

}
 800688a:	bf00      	nop
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	200002ac 	.word	0x200002ac
 8006894:	58003000 	.word	0x58003000
 8006898:	080076a4 	.word	0x080076a4

0800689c <MX_SAI2_Init>:

/* SAI2 init function */
static void MX_SAI2_Init(void)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	af00      	add	r7, sp, #0

  hsai_BlockA2.Instance = SAI2_Block_A;
 80068a0:	4b60      	ldr	r3, [pc, #384]	; (8006a24 <MX_SAI2_Init+0x188>)
 80068a2:	4a61      	ldr	r2, [pc, #388]	; (8006a28 <MX_SAI2_Init+0x18c>)
 80068a4:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 80068a6:	4b5f      	ldr	r3, [pc, #380]	; (8006a24 <MX_SAI2_Init+0x188>)
 80068a8:	2200      	movs	r2, #0
 80068aa:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_RX;
 80068ac:	4b5d      	ldr	r3, [pc, #372]	; (8006a24 <MX_SAI2_Init+0x188>)
 80068ae:	2201      	movs	r2, #1
 80068b0:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_32;
 80068b2:	4b5c      	ldr	r3, [pc, #368]	; (8006a24 <MX_SAI2_Init+0x188>)
 80068b4:	22e0      	movs	r2, #224	; 0xe0
 80068b6:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80068b8:	4b5a      	ldr	r3, [pc, #360]	; (8006a24 <MX_SAI2_Init+0x188>)
 80068ba:	2200      	movs	r2, #0
 80068bc:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80068be:	4b59      	ldr	r3, [pc, #356]	; (8006a24 <MX_SAI2_Init+0x188>)
 80068c0:	2200      	movs	r2, #0
 80068c2:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80068c4:	4b57      	ldr	r3, [pc, #348]	; (8006a24 <MX_SAI2_Init+0x188>)
 80068c6:	2200      	movs	r2, #0
 80068c8:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 80068ca:	4b56      	ldr	r3, [pc, #344]	; (8006a24 <MX_SAI2_Init+0x188>)
 80068cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80068d0:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80068d2:	4b54      	ldr	r3, [pc, #336]	; (8006a24 <MX_SAI2_Init+0x188>)
 80068d4:	2200      	movs	r2, #0
 80068d6:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_FULL;
 80068d8:	4b52      	ldr	r3, [pc, #328]	; (8006a24 <MX_SAI2_Init+0x188>)
 80068da:	2204      	movs	r2, #4
 80068dc:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_96K;
 80068de:	4b51      	ldr	r3, [pc, #324]	; (8006a24 <MX_SAI2_Init+0x188>)
 80068e0:	4a52      	ldr	r2, [pc, #328]	; (8006a2c <MX_SAI2_Init+0x190>)
 80068e2:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_OUTBLOCKB_ENABLE;
 80068e4:	4b4f      	ldr	r3, [pc, #316]	; (8006a24 <MX_SAI2_Init+0x188>)
 80068e6:	2202      	movs	r2, #2
 80068e8:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80068ea:	4b4e      	ldr	r3, [pc, #312]	; (8006a24 <MX_SAI2_Init+0x188>)
 80068ec:	2200      	movs	r2, #0
 80068ee:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80068f0:	4b4c      	ldr	r3, [pc, #304]	; (8006a24 <MX_SAI2_Init+0x188>)
 80068f2:	2200      	movs	r2, #0
 80068f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 80068f6:	4b4b      	ldr	r3, [pc, #300]	; (8006a24 <MX_SAI2_Init+0x188>)
 80068f8:	2200      	movs	r2, #0
 80068fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 0;
 80068fe:	4b49      	ldr	r3, [pc, #292]	; (8006a24 <MX_SAI2_Init+0x188>)
 8006900:	2200      	movs	r2, #0
 8006902:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8006904:	4b47      	ldr	r3, [pc, #284]	; (8006a24 <MX_SAI2_Init+0x188>)
 8006906:	f44f 7280 	mov.w	r2, #256	; 0x100
 800690a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.FrameInit.FrameLength = 256;
 800690c:	4b45      	ldr	r3, [pc, #276]	; (8006a24 <MX_SAI2_Init+0x188>)
 800690e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006912:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8006914:	4b43      	ldr	r3, [pc, #268]	; (8006a24 <MX_SAI2_Init+0x188>)
 8006916:	2201      	movs	r2, #1
 8006918:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800691a:	4b42      	ldr	r3, [pc, #264]	; (8006a24 <MX_SAI2_Init+0x188>)
 800691c:	2200      	movs	r2, #0
 800691e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8006920:	4b40      	ldr	r3, [pc, #256]	; (8006a24 <MX_SAI2_Init+0x188>)
 8006922:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006926:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8006928:	4b3e      	ldr	r3, [pc, #248]	; (8006a24 <MX_SAI2_Init+0x188>)
 800692a:	2200      	movs	r2, #0
 800692c:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 800692e:	4b3d      	ldr	r3, [pc, #244]	; (8006a24 <MX_SAI2_Init+0x188>)
 8006930:	2200      	movs	r2, #0
 8006932:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8006934:	4b3b      	ldr	r3, [pc, #236]	; (8006a24 <MX_SAI2_Init+0x188>)
 8006936:	2200      	movs	r2, #0
 8006938:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA2.SlotInit.SlotNumber = 8;
 800693a:	4b3a      	ldr	r3, [pc, #232]	; (8006a24 <MX_SAI2_Init+0x188>)
 800693c:	2208      	movs	r2, #8
 800693e:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA2.SlotInit.SlotActive = 0x000000FF;
 8006940:	4b38      	ldr	r3, [pc, #224]	; (8006a24 <MX_SAI2_Init+0x188>)
 8006942:	22ff      	movs	r2, #255	; 0xff
 8006944:	671a      	str	r2, [r3, #112]	; 0x70
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8006946:	4837      	ldr	r0, [pc, #220]	; (8006a24 <MX_SAI2_Init+0x188>)
 8006948:	f7fd ffc2 	bl	80048d0 <HAL_SAI_Init>
 800694c:	4603      	mov	r3, r0
 800694e:	2b00      	cmp	r3, #0
 8006950:	d004      	beq.n	800695c <MX_SAI2_Init+0xc0>
  {
    _Error_Handler(__FILE__, __LINE__);
 8006952:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8006956:	4836      	ldr	r0, [pc, #216]	; (8006a30 <MX_SAI2_Init+0x194>)
 8006958:	f000 faa4 	bl	8006ea4 <_Error_Handler>
  }

  hsai_BlockB2.Instance = SAI2_Block_B;
 800695c:	4b35      	ldr	r3, [pc, #212]	; (8006a34 <MX_SAI2_Init+0x198>)
 800695e:	4a36      	ldr	r2, [pc, #216]	; (8006a38 <MX_SAI2_Init+0x19c>)
 8006960:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8006962:	4b34      	ldr	r3, [pc, #208]	; (8006a34 <MX_SAI2_Init+0x198>)
 8006964:	2200      	movs	r2, #0
 8006966:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_TX;
 8006968:	4b32      	ldr	r3, [pc, #200]	; (8006a34 <MX_SAI2_Init+0x198>)
 800696a:	2200      	movs	r2, #0
 800696c:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_32;
 800696e:	4b31      	ldr	r3, [pc, #196]	; (8006a34 <MX_SAI2_Init+0x198>)
 8006970:	22e0      	movs	r2, #224	; 0xe0
 8006972:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8006974:	4b2f      	ldr	r3, [pc, #188]	; (8006a34 <MX_SAI2_Init+0x198>)
 8006976:	2200      	movs	r2, #0
 8006978:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 800697a:	4b2e      	ldr	r3, [pc, #184]	; (8006a34 <MX_SAI2_Init+0x198>)
 800697c:	2201      	movs	r2, #1
 800697e:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 8006980:	4b2c      	ldr	r3, [pc, #176]	; (8006a34 <MX_SAI2_Init+0x198>)
 8006982:	2200      	movs	r2, #0
 8006984:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 8006986:	4b2b      	ldr	r3, [pc, #172]	; (8006a34 <MX_SAI2_Init+0x198>)
 8006988:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800698c:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800698e:	4b29      	ldr	r3, [pc, #164]	; (8006a34 <MX_SAI2_Init+0x198>)
 8006990:	2200      	movs	r2, #0
 8006992:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_FULL;
 8006994:	4b27      	ldr	r3, [pc, #156]	; (8006a34 <MX_SAI2_Init+0x198>)
 8006996:	2204      	movs	r2, #4
 8006998:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_96K;
 800699a:	4b26      	ldr	r3, [pc, #152]	; (8006a34 <MX_SAI2_Init+0x198>)
 800699c:	4a23      	ldr	r2, [pc, #140]	; (8006a2c <MX_SAI2_Init+0x190>)
 800699e:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80069a0:	4b24      	ldr	r3, [pc, #144]	; (8006a34 <MX_SAI2_Init+0x198>)
 80069a2:	2200      	movs	r2, #0
 80069a4:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 80069a6:	4b23      	ldr	r3, [pc, #140]	; (8006a34 <MX_SAI2_Init+0x198>)
 80069a8:	2200      	movs	r2, #0
 80069aa:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 80069ac:	4b21      	ldr	r3, [pc, #132]	; (8006a34 <MX_SAI2_Init+0x198>)
 80069ae:	2200      	movs	r2, #0
 80069b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80069b2:	4b20      	ldr	r3, [pc, #128]	; (8006a34 <MX_SAI2_Init+0x198>)
 80069b4:	2200      	movs	r2, #0
 80069b6:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.PdmInit.Activation = DISABLE;
 80069b8:	4b1e      	ldr	r3, [pc, #120]	; (8006a34 <MX_SAI2_Init+0x198>)
 80069ba:	2200      	movs	r2, #0
 80069bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.PdmInit.MicPairsNbr = 0;
 80069c0:	4b1c      	ldr	r3, [pc, #112]	; (8006a34 <MX_SAI2_Init+0x198>)
 80069c2:	2200      	movs	r2, #0
 80069c4:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 80069c6:	4b1b      	ldr	r3, [pc, #108]	; (8006a34 <MX_SAI2_Init+0x198>)
 80069c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80069cc:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.FrameInit.FrameLength = 256;
 80069ce:	4b19      	ldr	r3, [pc, #100]	; (8006a34 <MX_SAI2_Init+0x198>)
 80069d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80069d4:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 80069d6:	4b17      	ldr	r3, [pc, #92]	; (8006a34 <MX_SAI2_Init+0x198>)
 80069d8:	2201      	movs	r2, #1
 80069da:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80069dc:	4b15      	ldr	r3, [pc, #84]	; (8006a34 <MX_SAI2_Init+0x198>)
 80069de:	2200      	movs	r2, #0
 80069e0:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 80069e2:	4b14      	ldr	r3, [pc, #80]	; (8006a34 <MX_SAI2_Init+0x198>)
 80069e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80069e8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80069ea:	4b12      	ldr	r3, [pc, #72]	; (8006a34 <MX_SAI2_Init+0x198>)
 80069ec:	2200      	movs	r2, #0
 80069ee:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 80069f0:	4b10      	ldr	r3, [pc, #64]	; (8006a34 <MX_SAI2_Init+0x198>)
 80069f2:	2200      	movs	r2, #0
 80069f4:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80069f6:	4b0f      	ldr	r3, [pc, #60]	; (8006a34 <MX_SAI2_Init+0x198>)
 80069f8:	2200      	movs	r2, #0
 80069fa:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB2.SlotInit.SlotNumber = 8;
 80069fc:	4b0d      	ldr	r3, [pc, #52]	; (8006a34 <MX_SAI2_Init+0x198>)
 80069fe:	2208      	movs	r2, #8
 8006a00:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB2.SlotInit.SlotActive = 0x000000FF;
 8006a02:	4b0c      	ldr	r3, [pc, #48]	; (8006a34 <MX_SAI2_Init+0x198>)
 8006a04:	22ff      	movs	r2, #255	; 0xff
 8006a06:	671a      	str	r2, [r3, #112]	; 0x70
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8006a08:	480a      	ldr	r0, [pc, #40]	; (8006a34 <MX_SAI2_Init+0x198>)
 8006a0a:	f7fd ff61 	bl	80048d0 <HAL_SAI_Init>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d004      	beq.n	8006a1e <MX_SAI2_Init+0x182>
  {
    _Error_Handler(__FILE__, __LINE__);
 8006a14:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8006a18:	4805      	ldr	r0, [pc, #20]	; (8006a30 <MX_SAI2_Init+0x194>)
 8006a1a:	f000 fa43 	bl	8006ea4 <_Error_Handler>
  }

}
 8006a1e:	bf00      	nop
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	bf00      	nop
 8006a24:	200001dc 	.word	0x200001dc
 8006a28:	40015c04 	.word	0x40015c04
 8006a2c:	00017700 	.word	0x00017700
 8006a30:	080076a4 	.word	0x080076a4
 8006a34:	20000044 	.word	0x20000044
 8006a38:	40015c24 	.word	0x40015c24

08006a3c <MX_SPI5_Init>:

/* SPI5 init function */
static void MX_SPI5_Init(void)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	af00      	add	r7, sp, #0

  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8006a40:	4b29      	ldr	r3, [pc, #164]	; (8006ae8 <MX_SPI5_Init+0xac>)
 8006a42:	4a2a      	ldr	r2, [pc, #168]	; (8006aec <MX_SPI5_Init+0xb0>)
 8006a44:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8006a46:	4b28      	ldr	r3, [pc, #160]	; (8006ae8 <MX_SPI5_Init+0xac>)
 8006a48:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8006a4c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8006a4e:	4b26      	ldr	r3, [pc, #152]	; (8006ae8 <MX_SPI5_Init+0xac>)
 8006a50:	2200      	movs	r2, #0
 8006a52:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8006a54:	4b24      	ldr	r3, [pc, #144]	; (8006ae8 <MX_SPI5_Init+0xac>)
 8006a56:	2207      	movs	r2, #7
 8006a58:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006a5a:	4b23      	ldr	r3, [pc, #140]	; (8006ae8 <MX_SPI5_Init+0xac>)
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_2EDGE;
 8006a60:	4b21      	ldr	r3, [pc, #132]	; (8006ae8 <MX_SPI5_Init+0xac>)
 8006a62:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006a66:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8006a68:	4b1f      	ldr	r3, [pc, #124]	; (8006ae8 <MX_SPI5_Init+0xac>)
 8006a6a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006a6e:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8006a70:	4b1d      	ldr	r3, [pc, #116]	; (8006ae8 <MX_SPI5_Init+0xac>)
 8006a72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a76:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006a78:	4b1b      	ldr	r3, [pc, #108]	; (8006ae8 <MX_SPI5_Init+0xac>)
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8006a7e:	4b1a      	ldr	r3, [pc, #104]	; (8006ae8 <MX_SPI5_Init+0xac>)
 8006a80:	2200      	movs	r2, #0
 8006a82:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a84:	4b18      	ldr	r3, [pc, #96]	; (8006ae8 <MX_SPI5_Init+0xac>)
 8006a86:	2200      	movs	r2, #0
 8006a88:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8006a8a:	4b17      	ldr	r3, [pc, #92]	; (8006ae8 <MX_SPI5_Init+0xac>)
 8006a8c:	2207      	movs	r2, #7
 8006a8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006a90:	4b15      	ldr	r3, [pc, #84]	; (8006ae8 <MX_SPI5_Init+0xac>)
 8006a92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006a96:	635a      	str	r2, [r3, #52]	; 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8006a98:	4b13      	ldr	r3, [pc, #76]	; (8006ae8 <MX_SPI5_Init+0xac>)
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_08DATA;
 8006a9e:	4b12      	ldr	r3, [pc, #72]	; (8006ae8 <MX_SPI5_Init+0xac>)
 8006aa0:	22e0      	movs	r2, #224	; 0xe0
 8006aa2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8006aa4:	4b10      	ldr	r3, [pc, #64]	; (8006ae8 <MX_SPI5_Init+0xac>)
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8006aaa:	4b0f      	ldr	r3, [pc, #60]	; (8006ae8 <MX_SPI5_Init+0xac>)
 8006aac:	2200      	movs	r2, #0
 8006aae:	645a      	str	r2, [r3, #68]	; 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8006ab0:	4b0d      	ldr	r3, [pc, #52]	; (8006ae8 <MX_SPI5_Init+0xac>)
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8006ab6:	4b0c      	ldr	r3, [pc, #48]	; (8006ae8 <MX_SPI5_Init+0xac>)
 8006ab8:	2200      	movs	r2, #0
 8006aba:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8006abc:	4b0a      	ldr	r3, [pc, #40]	; (8006ae8 <MX_SPI5_Init+0xac>)
 8006abe:	2200      	movs	r2, #0
 8006ac0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8006ac2:	4b09      	ldr	r3, [pc, #36]	; (8006ae8 <MX_SPI5_Init+0xac>)
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8006ac8:	4b07      	ldr	r3, [pc, #28]	; (8006ae8 <MX_SPI5_Init+0xac>)
 8006aca:	2200      	movs	r2, #0
 8006acc:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8006ace:	4806      	ldr	r0, [pc, #24]	; (8006ae8 <MX_SPI5_Init+0xac>)
 8006ad0:	f7fe fdf0 	bl	80056b4 <HAL_SPI_Init>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d004      	beq.n	8006ae4 <MX_SPI5_Init+0xa8>
  {
    _Error_Handler(__FILE__, __LINE__);
 8006ada:	f240 2102 	movw	r1, #514	; 0x202
 8006ade:	4804      	ldr	r0, [pc, #16]	; (8006af0 <MX_SPI5_Init+0xb4>)
 8006ae0:	f000 f9e0 	bl	8006ea4 <_Error_Handler>
  }

}
 8006ae4:	bf00      	nop
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	20000154 	.word	0x20000154
 8006aec:	40015000 	.word	0x40015000
 8006af0:	080076a4 	.word	0x080076a4

08006af4 <MX_BDMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_bdma_channel0
  */
static void MX_BDMA_Init(void) 
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b082      	sub	sp, #8
 8006af8:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 8006afa:	4a1e      	ldr	r2, [pc, #120]	; (8006b74 <MX_BDMA_Init+0x80>)
 8006afc:	4b1d      	ldr	r3, [pc, #116]	; (8006b74 <MX_BDMA_Init+0x80>)
 8006afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006b06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006b0a:	4b1a      	ldr	r3, [pc, #104]	; (8006b74 <MX_BDMA_Init+0x80>)
 8006b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b14:	607b      	str	r3, [r7, #4]
 8006b16:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_bdma_channel0 on BDMA_Channel0 */
  hdma_memtomem_bdma_channel0.Instance = BDMA_Channel0;
 8006b18:	4b17      	ldr	r3, [pc, #92]	; (8006b78 <MX_BDMA_Init+0x84>)
 8006b1a:	4a18      	ldr	r2, [pc, #96]	; (8006b7c <MX_BDMA_Init+0x88>)
 8006b1c:	601a      	str	r2, [r3, #0]
  hdma_memtomem_bdma_channel0.Init.Request = BDMA_REQUEST_MEM2MEM;
 8006b1e:	4b16      	ldr	r3, [pc, #88]	; (8006b78 <MX_BDMA_Init+0x84>)
 8006b20:	2200      	movs	r2, #0
 8006b22:	605a      	str	r2, [r3, #4]
  hdma_memtomem_bdma_channel0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8006b24:	4b14      	ldr	r3, [pc, #80]	; (8006b78 <MX_BDMA_Init+0x84>)
 8006b26:	2280      	movs	r2, #128	; 0x80
 8006b28:	609a      	str	r2, [r3, #8]
  hdma_memtomem_bdma_channel0.Init.PeriphInc = DMA_PINC_ENABLE;
 8006b2a:	4b13      	ldr	r3, [pc, #76]	; (8006b78 <MX_BDMA_Init+0x84>)
 8006b2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b30:	60da      	str	r2, [r3, #12]
  hdma_memtomem_bdma_channel0.Init.MemInc = DMA_MINC_ENABLE;
 8006b32:	4b11      	ldr	r3, [pc, #68]	; (8006b78 <MX_BDMA_Init+0x84>)
 8006b34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006b38:	611a      	str	r2, [r3, #16]
  hdma_memtomem_bdma_channel0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006b3a:	4b0f      	ldr	r3, [pc, #60]	; (8006b78 <MX_BDMA_Init+0x84>)
 8006b3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006b40:	615a      	str	r2, [r3, #20]
  hdma_memtomem_bdma_channel0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006b42:	4b0d      	ldr	r3, [pc, #52]	; (8006b78 <MX_BDMA_Init+0x84>)
 8006b44:	2200      	movs	r2, #0
 8006b46:	619a      	str	r2, [r3, #24]
  hdma_memtomem_bdma_channel0.Init.Mode = DMA_NORMAL;
 8006b48:	4b0b      	ldr	r3, [pc, #44]	; (8006b78 <MX_BDMA_Init+0x84>)
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	61da      	str	r2, [r3, #28]
  hdma_memtomem_bdma_channel0.Init.Priority = DMA_PRIORITY_LOW;
 8006b4e:	4b0a      	ldr	r3, [pc, #40]	; (8006b78 <MX_BDMA_Init+0x84>)
 8006b50:	2200      	movs	r2, #0
 8006b52:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_memtomem_bdma_channel0) != HAL_OK)
 8006b54:	4808      	ldr	r0, [pc, #32]	; (8006b78 <MX_BDMA_Init+0x84>)
 8006b56:	f7f9 fd7d 	bl	8000654 <HAL_DMA_Init>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d004      	beq.n	8006b6a <MX_BDMA_Init+0x76>
  {
    _Error_Handler(__FILE__, __LINE__);
 8006b60:	f240 211d 	movw	r1, #541	; 0x21d
 8006b64:	4806      	ldr	r0, [pc, #24]	; (8006b80 <MX_BDMA_Init+0x8c>)
 8006b66:	f000 f99d 	bl	8006ea4 <_Error_Handler>
  }

}
 8006b6a:	bf00      	nop
 8006b6c:	3708      	adds	r7, #8
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
 8006b72:	bf00      	nop
 8006b74:	58024400 	.word	0x58024400
 8006b78:	2000041c 	.word	0x2000041c
 8006b7c:	58025408 	.word	0x58025408
 8006b80:	080076a4 	.word	0x080076a4

08006b84 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_stream2
  */
static void MX_DMA_Init(void) 
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b082      	sub	sp, #8
 8006b88:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006b8a:	4a2b      	ldr	r2, [pc, #172]	; (8006c38 <MX_DMA_Init+0xb4>)
 8006b8c:	4b2a      	ldr	r3, [pc, #168]	; (8006c38 <MX_DMA_Init+0xb4>)
 8006b8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006b92:	f043 0301 	orr.w	r3, r3, #1
 8006b96:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8006b9a:	4b27      	ldr	r3, [pc, #156]	; (8006c38 <MX_DMA_Init+0xb4>)
 8006b9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006ba0:	f003 0301 	and.w	r3, r3, #1
 8006ba4:	607b      	str	r3, [r7, #4]
 8006ba6:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma1_stream2 on DMA1_Stream2 */
  hdma_memtomem_dma1_stream2.Instance = DMA1_Stream2;
 8006ba8:	4b24      	ldr	r3, [pc, #144]	; (8006c3c <MX_DMA_Init+0xb8>)
 8006baa:	4a25      	ldr	r2, [pc, #148]	; (8006c40 <MX_DMA_Init+0xbc>)
 8006bac:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_stream2.Init.Request = DMA_REQUEST_MEM2MEM;
 8006bae:	4b23      	ldr	r3, [pc, #140]	; (8006c3c <MX_DMA_Init+0xb8>)
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_stream2.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8006bb4:	4b21      	ldr	r3, [pc, #132]	; (8006c3c <MX_DMA_Init+0xb8>)
 8006bb6:	2280      	movs	r2, #128	; 0x80
 8006bb8:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_stream2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006bba:	4b20      	ldr	r3, [pc, #128]	; (8006c3c <MX_DMA_Init+0xb8>)
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_stream2.Init.MemInc = DMA_MINC_DISABLE;
 8006bc0:	4b1e      	ldr	r3, [pc, #120]	; (8006c3c <MX_DMA_Init+0xb8>)
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_stream2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006bc6:	4b1d      	ldr	r3, [pc, #116]	; (8006c3c <MX_DMA_Init+0xb8>)
 8006bc8:	2200      	movs	r2, #0
 8006bca:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_stream2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006bcc:	4b1b      	ldr	r3, [pc, #108]	; (8006c3c <MX_DMA_Init+0xb8>)
 8006bce:	2200      	movs	r2, #0
 8006bd0:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_stream2.Init.Mode = DMA_NORMAL;
 8006bd2:	4b1a      	ldr	r3, [pc, #104]	; (8006c3c <MX_DMA_Init+0xb8>)
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_stream2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006bd8:	4b18      	ldr	r3, [pc, #96]	; (8006c3c <MX_DMA_Init+0xb8>)
 8006bda:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006bde:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma1_stream2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006be0:	4b16      	ldr	r3, [pc, #88]	; (8006c3c <MX_DMA_Init+0xb8>)
 8006be2:	2204      	movs	r2, #4
 8006be4:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma1_stream2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006be6:	4b15      	ldr	r3, [pc, #84]	; (8006c3c <MX_DMA_Init+0xb8>)
 8006be8:	2203      	movs	r2, #3
 8006bea:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma1_stream2.Init.MemBurst = DMA_MBURST_SINGLE;
 8006bec:	4b13      	ldr	r3, [pc, #76]	; (8006c3c <MX_DMA_Init+0xb8>)
 8006bee:	2200      	movs	r2, #0
 8006bf0:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma1_stream2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8006bf2:	4b12      	ldr	r3, [pc, #72]	; (8006c3c <MX_DMA_Init+0xb8>)
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma1_stream2) != HAL_OK)
 8006bf8:	4810      	ldr	r0, [pc, #64]	; (8006c3c <MX_DMA_Init+0xb8>)
 8006bfa:	f7f9 fd2b 	bl	8000654 <HAL_DMA_Init>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d004      	beq.n	8006c0e <MX_DMA_Init+0x8a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8006c04:	f44f 710f 	mov.w	r1, #572	; 0x23c
 8006c08:	480e      	ldr	r0, [pc, #56]	; (8006c44 <MX_DMA_Init+0xc0>)
 8006c0a:	f000 f94b 	bl	8006ea4 <_Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8006c0e:	2200      	movs	r2, #0
 8006c10:	2100      	movs	r1, #0
 8006c12:	200b      	movs	r0, #11
 8006c14:	f7f9 fcbd 	bl	8000592 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8006c18:	200b      	movs	r0, #11
 8006c1a:	f7f9 fcd6 	bl	80005ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8006c1e:	2200      	movs	r2, #0
 8006c20:	2100      	movs	r1, #0
 8006c22:	200c      	movs	r0, #12
 8006c24:	f7f9 fcb5 	bl	8000592 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8006c28:	200c      	movs	r0, #12
 8006c2a:	f7f9 fcce 	bl	80005ca <HAL_NVIC_EnableIRQ>

}
 8006c2e:	bf00      	nop
 8006c30:	3708      	adds	r7, #8
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop
 8006c38:	58024400 	.word	0x58024400
 8006c3c:	2000036c 	.word	0x2000036c
 8006c40:	40020040 	.word	0x40020040
 8006c44:	080076a4 	.word	0x080076a4

08006c48 <MX_FMC_Init>:
/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b088      	sub	sp, #32
 8006c4c:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming;

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8006c4e:	4b21      	ldr	r3, [pc, #132]	; (8006cd4 <MX_FMC_Init+0x8c>)
 8006c50:	4a21      	ldr	r2, [pc, #132]	; (8006cd8 <MX_FMC_Init+0x90>)
 8006c52:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8006c54:	4b1f      	ldr	r3, [pc, #124]	; (8006cd4 <MX_FMC_Init+0x8c>)
 8006c56:	2200      	movs	r2, #0
 8006c58:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_10;
 8006c5a:	4b1e      	ldr	r3, [pc, #120]	; (8006cd4 <MX_FMC_Init+0x8c>)
 8006c5c:	2202      	movs	r2, #2
 8006c5e:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8006c60:	4b1c      	ldr	r3, [pc, #112]	; (8006cd4 <MX_FMC_Init+0x8c>)
 8006c62:	2208      	movs	r2, #8
 8006c64:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_8;
 8006c66:	4b1b      	ldr	r3, [pc, #108]	; (8006cd4 <MX_FMC_Init+0x8c>)
 8006c68:	2200      	movs	r2, #0
 8006c6a:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8006c6c:	4b19      	ldr	r3, [pc, #100]	; (8006cd4 <MX_FMC_Init+0x8c>)
 8006c6e:	2240      	movs	r2, #64	; 0x40
 8006c70:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8006c72:	4b18      	ldr	r3, [pc, #96]	; (8006cd4 <MX_FMC_Init+0x8c>)
 8006c74:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8006c78:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8006c7a:	4b16      	ldr	r3, [pc, #88]	; (8006cd4 <MX_FMC_Init+0x8c>)
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8006c80:	4b14      	ldr	r3, [pc, #80]	; (8006cd4 <MX_FMC_Init+0x8c>)
 8006c82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c86:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8006c88:	4b12      	ldr	r3, [pc, #72]	; (8006cd4 <MX_FMC_Init+0x8c>)
 8006c8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006c8e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8006c90:	4b10      	ldr	r3, [pc, #64]	; (8006cd4 <MX_FMC_Init+0x8c>)
 8006c92:	2200      	movs	r2, #0
 8006c94:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8006c96:	2302      	movs	r3, #2
 8006c98:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 9;
 8006c9a:	2309      	movs	r3, #9
 8006c9c:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 8;
 8006c9e:	2308      	movs	r3, #8
 8006ca0:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 2;
 8006ca2:	2302      	movs	r3, #2
 8006ca4:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 8006ca6:	2302      	movs	r3, #2
 8006ca8:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 6;
 8006caa:	2306      	movs	r3, #6
 8006cac:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 8;
 8006cae:	2308      	movs	r3, #8
 8006cb0:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8006cb2:	1d3b      	adds	r3, r7, #4
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	4807      	ldr	r0, [pc, #28]	; (8006cd4 <MX_FMC_Init+0x8c>)
 8006cb8:	f7fe fc9c 	bl	80055f4 <HAL_SDRAM_Init>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d004      	beq.n	8006ccc <MX_FMC_Init+0x84>
  {
    _Error_Handler(__FILE__, __LINE__);
 8006cc2:	f240 2166 	movw	r1, #614	; 0x266
 8006cc6:	4805      	ldr	r0, [pc, #20]	; (8006cdc <MX_FMC_Init+0x94>)
 8006cc8:	f000 f8ec 	bl	8006ea4 <_Error_Handler>
  }

}
 8006ccc:	bf00      	nop
 8006cce:	3720      	adds	r7, #32
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}
 8006cd4:	200003e8 	.word	0x200003e8
 8006cd8:	52004140 	.word	0x52004140
 8006cdc:	080076a4 	.word	0x080076a4

08006ce0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b08c      	sub	sp, #48	; 0x30
 8006ce4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006ce6:	4a69      	ldr	r2, [pc, #420]	; (8006e8c <MX_GPIO_Init+0x1ac>)
 8006ce8:	4b68      	ldr	r3, [pc, #416]	; (8006e8c <MX_GPIO_Init+0x1ac>)
 8006cea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006cee:	f043 0304 	orr.w	r3, r3, #4
 8006cf2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006cf6:	4b65      	ldr	r3, [pc, #404]	; (8006e8c <MX_GPIO_Init+0x1ac>)
 8006cf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006cfc:	f003 0304 	and.w	r3, r3, #4
 8006d00:	61bb      	str	r3, [r7, #24]
 8006d02:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006d04:	4a61      	ldr	r2, [pc, #388]	; (8006e8c <MX_GPIO_Init+0x1ac>)
 8006d06:	4b61      	ldr	r3, [pc, #388]	; (8006e8c <MX_GPIO_Init+0x1ac>)
 8006d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d0c:	f043 0320 	orr.w	r3, r3, #32
 8006d10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006d14:	4b5d      	ldr	r3, [pc, #372]	; (8006e8c <MX_GPIO_Init+0x1ac>)
 8006d16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d1a:	f003 0320 	and.w	r3, r3, #32
 8006d1e:	617b      	str	r3, [r7, #20]
 8006d20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006d22:	4a5a      	ldr	r2, [pc, #360]	; (8006e8c <MX_GPIO_Init+0x1ac>)
 8006d24:	4b59      	ldr	r3, [pc, #356]	; (8006e8c <MX_GPIO_Init+0x1ac>)
 8006d26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006d32:	4b56      	ldr	r3, [pc, #344]	; (8006e8c <MX_GPIO_Init+0x1ac>)
 8006d34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d3c:	613b      	str	r3, [r7, #16]
 8006d3e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d40:	4a52      	ldr	r2, [pc, #328]	; (8006e8c <MX_GPIO_Init+0x1ac>)
 8006d42:	4b52      	ldr	r3, [pc, #328]	; (8006e8c <MX_GPIO_Init+0x1ac>)
 8006d44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d48:	f043 0301 	orr.w	r3, r3, #1
 8006d4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006d50:	4b4e      	ldr	r3, [pc, #312]	; (8006e8c <MX_GPIO_Init+0x1ac>)
 8006d52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d56:	f003 0301 	and.w	r3, r3, #1
 8006d5a:	60fb      	str	r3, [r7, #12]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006d5e:	4a4b      	ldr	r2, [pc, #300]	; (8006e8c <MX_GPIO_Init+0x1ac>)
 8006d60:	4b4a      	ldr	r3, [pc, #296]	; (8006e8c <MX_GPIO_Init+0x1ac>)
 8006d62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006d6e:	4b47      	ldr	r3, [pc, #284]	; (8006e8c <MX_GPIO_Init+0x1ac>)
 8006d70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d78:	60bb      	str	r3, [r7, #8]
 8006d7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006d7c:	4a43      	ldr	r2, [pc, #268]	; (8006e8c <MX_GPIO_Init+0x1ac>)
 8006d7e:	4b43      	ldr	r3, [pc, #268]	; (8006e8c <MX_GPIO_Init+0x1ac>)
 8006d80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d84:	f043 0310 	orr.w	r3, r3, #16
 8006d88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006d8c:	4b3f      	ldr	r3, [pc, #252]	; (8006e8c <MX_GPIO_Init+0x1ac>)
 8006d8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d92:	f003 0310 	and.w	r3, r3, #16
 8006d96:	607b      	str	r3, [r7, #4]
 8006d98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006d9a:	4a3c      	ldr	r2, [pc, #240]	; (8006e8c <MX_GPIO_Init+0x1ac>)
 8006d9c:	4b3b      	ldr	r3, [pc, #236]	; (8006e8c <MX_GPIO_Init+0x1ac>)
 8006d9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006da2:	f043 0308 	orr.w	r3, r3, #8
 8006da6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006daa:	4b38      	ldr	r3, [pc, #224]	; (8006e8c <MX_GPIO_Init+0x1ac>)
 8006dac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006db0:	f003 0308 	and.w	r3, r3, #8
 8006db4:	603b      	str	r3, [r7, #0]
 8006db6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI5_NSS_GPIO_Port, SPI5_NSS_Pin, GPIO_PIN_RESET);
 8006db8:	2200      	movs	r2, #0
 8006dba:	2140      	movs	r1, #64	; 0x40
 8006dbc:	4834      	ldr	r0, [pc, #208]	; (8006e90 <MX_GPIO_Init+0x1b0>)
 8006dbe:	f7fa ff5b 	bl	8001c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PAD2_Pin|ANA_EN_Pin, GPIO_PIN_RESET);
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f240 4101 	movw	r1, #1025	; 0x401
 8006dc8:	4832      	ldr	r0, [pc, #200]	; (8006e94 <MX_GPIO_Init+0x1b4>)
 8006dca:	f7fa ff55 	bl	8001c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CODEC_NRST_Pin|RED_Pin|GREEN_Pin, GPIO_PIN_RESET);
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 8006dd4:	4830      	ldr	r0, [pc, #192]	; (8006e98 <MX_GPIO_Init+0x1b8>)
 8006dd6:	f7fa ff4f 	bl	8001c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin, GPIO_PIN_RESET);
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006de0:	482e      	ldr	r0, [pc, #184]	; (8006e9c <MX_GPIO_Init+0x1bc>)
 8006de2:	f7fa ff49 	bl	8001c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FMC_NBL0_GPIO_Port, FMC_NBL0_Pin, GPIO_PIN_RESET);
 8006de6:	2200      	movs	r2, #0
 8006de8:	2101      	movs	r1, #1
 8006dea:	482d      	ldr	r0, [pc, #180]	; (8006ea0 <MX_GPIO_Init+0x1c0>)
 8006dec:	f7fa ff44 	bl	8001c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI5_NSS_Pin */
  GPIO_InitStruct.Pin = SPI5_NSS_Pin;
 8006df0:	2340      	movs	r3, #64	; 0x40
 8006df2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006df4:	2301      	movs	r3, #1
 8006df6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI5_NSS_GPIO_Port, &GPIO_InitStruct);
 8006e00:	f107 031c 	add.w	r3, r7, #28
 8006e04:	4619      	mov	r1, r3
 8006e06:	4822      	ldr	r0, [pc, #136]	; (8006e90 <MX_GPIO_Init+0x1b0>)
 8006e08:	f7fa fd80 	bl	800190c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAD2_Pin ANA_EN_Pin */
  GPIO_InitStruct.Pin = PAD2_Pin|ANA_EN_Pin;
 8006e0c:	f240 4301 	movw	r3, #1025	; 0x401
 8006e10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e12:	2301      	movs	r3, #1
 8006e14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e16:	2300      	movs	r3, #0
 8006e18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e1e:	f107 031c 	add.w	r3, r7, #28
 8006e22:	4619      	mov	r1, r3
 8006e24:	481b      	ldr	r0, [pc, #108]	; (8006e94 <MX_GPIO_Init+0x1b4>)
 8006e26:	f7fa fd71 	bl	800190c <HAL_GPIO_Init>

  /*Configure GPIO pins : CODEC_NRST_Pin RED_Pin GREEN_Pin */
  GPIO_InitStruct.Pin = CODEC_NRST_Pin|RED_Pin|GREEN_Pin;
 8006e2a:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8006e2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e30:	2301      	movs	r3, #1
 8006e32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e34:	2300      	movs	r3, #0
 8006e36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006e3c:	f107 031c 	add.w	r3, r7, #28
 8006e40:	4619      	mov	r1, r3
 8006e42:	4815      	ldr	r0, [pc, #84]	; (8006e98 <MX_GPIO_Init+0x1b8>)
 8006e44:	f7fa fd62 	bl	800190c <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_Pin */
  GPIO_InitStruct.Pin = BLUE_Pin;
 8006e48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e52:	2300      	movs	r3, #0
 8006e54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e56:	2300      	movs	r3, #0
 8006e58:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BLUE_GPIO_Port, &GPIO_InitStruct);
 8006e5a:	f107 031c 	add.w	r3, r7, #28
 8006e5e:	4619      	mov	r1, r3
 8006e60:	480e      	ldr	r0, [pc, #56]	; (8006e9c <MX_GPIO_Init+0x1bc>)
 8006e62:	f7fa fd53 	bl	800190c <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_NBL0_Pin */
  GPIO_InitStruct.Pin = FMC_NBL0_Pin;
 8006e66:	2301      	movs	r3, #1
 8006e68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e72:	2300      	movs	r3, #0
 8006e74:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FMC_NBL0_GPIO_Port, &GPIO_InitStruct);
 8006e76:	f107 031c 	add.w	r3, r7, #28
 8006e7a:	4619      	mov	r1, r3
 8006e7c:	4808      	ldr	r0, [pc, #32]	; (8006ea0 <MX_GPIO_Init+0x1c0>)
 8006e7e:	f7fa fd45 	bl	800190c <HAL_GPIO_Init>

}
 8006e82:	bf00      	nop
 8006e84:	3730      	adds	r7, #48	; 0x30
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
 8006e8a:	bf00      	nop
 8006e8c:	58024400 	.word	0x58024400
 8006e90:	58021400 	.word	0x58021400
 8006e94:	58020000 	.word	0x58020000
 8006e98:	58020c00 	.word	0x58020c00
 8006e9c:	58021800 	.word	0x58021800
 8006ea0:	58021000 	.word	0x58021000

08006ea4 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
	RED_GPIO_Port->BSRRH = RED_Pin;
 8006eae:	4b02      	ldr	r3, [pc, #8]	; (8006eb8 <_Error_Handler+0x14>)
 8006eb0:	2240      	movs	r2, #64	; 0x40
 8006eb2:	835a      	strh	r2, [r3, #26]
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8006eb4:	e7fe      	b.n	8006eb4 <_Error_Handler+0x10>
 8006eb6:	bf00      	nop
 8006eb8:	58020c00 	.word	0x58020c00

08006ebc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ec2:	4a20      	ldr	r2, [pc, #128]	; (8006f44 <HAL_MspInit+0x88>)
 8006ec4:	4b1f      	ldr	r3, [pc, #124]	; (8006f44 <HAL_MspInit+0x88>)
 8006ec6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006eca:	f043 0302 	orr.w	r3, r3, #2
 8006ece:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006ed2:	4b1c      	ldr	r3, [pc, #112]	; (8006f44 <HAL_MspInit+0x88>)
 8006ed4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006ed8:	f003 0302 	and.w	r3, r3, #2
 8006edc:	607b      	str	r3, [r7, #4]
 8006ede:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006ee0:	2003      	movs	r0, #3
 8006ee2:	f7f9 fb4b 	bl	800057c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	2100      	movs	r1, #0
 8006eea:	f06f 000b 	mvn.w	r0, #11
 8006eee:	f7f9 fb50 	bl	8000592 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	2100      	movs	r1, #0
 8006ef6:	f06f 000a 	mvn.w	r0, #10
 8006efa:	f7f9 fb4a 	bl	8000592 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8006efe:	2200      	movs	r2, #0
 8006f00:	2100      	movs	r1, #0
 8006f02:	f06f 0009 	mvn.w	r0, #9
 8006f06:	f7f9 fb44 	bl	8000592 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	2100      	movs	r1, #0
 8006f0e:	f06f 0004 	mvn.w	r0, #4
 8006f12:	f7f9 fb3e 	bl	8000592 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8006f16:	2200      	movs	r2, #0
 8006f18:	2100      	movs	r1, #0
 8006f1a:	f06f 0003 	mvn.w	r0, #3
 8006f1e:	f7f9 fb38 	bl	8000592 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8006f22:	2200      	movs	r2, #0
 8006f24:	2100      	movs	r1, #0
 8006f26:	f06f 0001 	mvn.w	r0, #1
 8006f2a:	f7f9 fb32 	bl	8000592 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8006f2e:	2200      	movs	r2, #0
 8006f30:	2100      	movs	r1, #0
 8006f32:	f04f 30ff 	mov.w	r0, #4294967295
 8006f36:	f7f9 fb2c 	bl	8000592 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006f3a:	bf00      	nop
 8006f3c:	3708      	adds	r7, #8
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
 8006f42:	bf00      	nop
 8006f44:	58024400 	.word	0x58024400

08006f48 <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]

  if(hlptim->Instance==LPTIM3)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a19      	ldr	r2, [pc, #100]	; (8006fbc <HAL_LPTIM_MspInit+0x74>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d10f      	bne.n	8006f7a <HAL_LPTIM_MspInit+0x32>
  {
  /* USER CODE BEGIN LPTIM3_MspInit 0 */

  /* USER CODE END LPTIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPTIM3_CLK_ENABLE();
 8006f5a:	4a19      	ldr	r2, [pc, #100]	; (8006fc0 <HAL_LPTIM_MspInit+0x78>)
 8006f5c:	4b18      	ldr	r3, [pc, #96]	; (8006fc0 <HAL_LPTIM_MspInit+0x78>)
 8006f5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006f62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006f66:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006f6a:	4b15      	ldr	r3, [pc, #84]	; (8006fc0 <HAL_LPTIM_MspInit+0x78>)
 8006f6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006f70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f74:	60fb      	str	r3, [r7, #12]
 8006f76:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN LPTIM5_MspInit 1 */

  /* USER CODE END LPTIM5_MspInit 1 */
  }

}
 8006f78:	e01b      	b.n	8006fb2 <HAL_LPTIM_MspInit+0x6a>
  else if(hlptim->Instance==LPTIM5)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a11      	ldr	r2, [pc, #68]	; (8006fc4 <HAL_LPTIM_MspInit+0x7c>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d116      	bne.n	8006fb2 <HAL_LPTIM_MspInit+0x6a>
    __HAL_RCC_LPTIM5_CLK_ENABLE();
 8006f84:	4a0e      	ldr	r2, [pc, #56]	; (8006fc0 <HAL_LPTIM_MspInit+0x78>)
 8006f86:	4b0e      	ldr	r3, [pc, #56]	; (8006fc0 <HAL_LPTIM_MspInit+0x78>)
 8006f88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006f8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006f90:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006f94:	4b0a      	ldr	r3, [pc, #40]	; (8006fc0 <HAL_LPTIM_MspInit+0x78>)
 8006f96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006f9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f9e:	60bb      	str	r3, [r7, #8]
 8006fa0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(LPTIM5_IRQn, 0, 0);
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	2100      	movs	r1, #0
 8006fa6:	208d      	movs	r0, #141	; 0x8d
 8006fa8:	f7f9 faf3 	bl	8000592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM5_IRQn);
 8006fac:	208d      	movs	r0, #141	; 0x8d
 8006fae:	f7f9 fb0c 	bl	80005ca <HAL_NVIC_EnableIRQ>
}
 8006fb2:	bf00      	nop
 8006fb4:	3710      	adds	r7, #16
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	58002800 	.word	0x58002800
 8006fc0:	58024400 	.word	0x58024400
 8006fc4:	58003000 	.word	0x58003000

08006fc8 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b088      	sub	sp, #32
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI5)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a17      	ldr	r2, [pc, #92]	; (8007034 <HAL_SPI_MspInit+0x6c>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d127      	bne.n	800702a <HAL_SPI_MspInit+0x62>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8006fda:	4a17      	ldr	r2, [pc, #92]	; (8007038 <HAL_SPI_MspInit+0x70>)
 8006fdc:	4b16      	ldr	r3, [pc, #88]	; (8007038 <HAL_SPI_MspInit+0x70>)
 8006fde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006fe2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006fe6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006fea:	4b13      	ldr	r3, [pc, #76]	; (8007038 <HAL_SPI_MspInit+0x70>)
 8006fec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006ff0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ff4:	60bb      	str	r3, [r7, #8]
 8006ff6:	68bb      	ldr	r3, [r7, #8]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8006ff8:	f44f 7360 	mov.w	r3, #896	; 0x380
 8006ffc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ffe:	2302      	movs	r3, #2
 8007000:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007002:	2300      	movs	r3, #0
 8007004:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007006:	2300      	movs	r3, #0
 8007008:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800700a:	2305      	movs	r3, #5
 800700c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800700e:	f107 030c 	add.w	r3, r7, #12
 8007012:	4619      	mov	r1, r3
 8007014:	4809      	ldr	r0, [pc, #36]	; (800703c <HAL_SPI_MspInit+0x74>)
 8007016:	f7fa fc79 	bl	800190c <HAL_GPIO_Init>

    /* SPI5 interrupt Init */
    HAL_NVIC_SetPriority(SPI5_IRQn, 0, 0);
 800701a:	2200      	movs	r2, #0
 800701c:	2100      	movs	r1, #0
 800701e:	2055      	movs	r0, #85	; 0x55
 8007020:	f7f9 fab7 	bl	8000592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
 8007024:	2055      	movs	r0, #85	; 0x55
 8007026:	f7f9 fad0 	bl	80005ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 800702a:	bf00      	nop
 800702c:	3720      	adds	r7, #32
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	40015000 	.word	0x40015000
 8007038:	58024400 	.word	0x58024400
 800703c:	58021400 	.word	0x58021400

08007040 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8007040:	b580      	push	{r7, lr}
 8007042:	b086      	sub	sp, #24
 8007044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
 8007046:	4b48      	ldr	r3, [pc, #288]	; (8007168 <HAL_FMC_MspInit+0x128>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	2b00      	cmp	r3, #0
 800704c:	f040 8088 	bne.w	8007160 <HAL_FMC_MspInit+0x120>
    return;
  }
  FMC_Initialized = 1;
 8007050:	4b45      	ldr	r3, [pc, #276]	; (8007168 <HAL_FMC_MspInit+0x128>)
 8007052:	2201      	movs	r2, #1
 8007054:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8007056:	4a45      	ldr	r2, [pc, #276]	; (800716c <HAL_FMC_MspInit+0x12c>)
 8007058:	4b44      	ldr	r3, [pc, #272]	; (800716c <HAL_FMC_MspInit+0x12c>)
 800705a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800705e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007062:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8007066:	4b41      	ldr	r3, [pc, #260]	; (800716c <HAL_FMC_MspInit+0x12c>)
 8007068:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800706c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007070:	603b      	str	r3, [r7, #0]
 8007072:	683b      	ldr	r3, [r7, #0]
  PG8   ------> FMC_SDCLK
  PD0   ------> FMC_D2
  PD1   ------> FMC_D3
  PG15   ------> FMC_SDNCAS
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8007074:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8007078:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800707a:	2302      	movs	r3, #2
 800707c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800707e:	2300      	movs	r3, #0
 8007080:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007082:	2303      	movs	r3, #3
 8007084:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007086:	230c      	movs	r3, #12
 8007088:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800708a:	1d3b      	adds	r3, r7, #4
 800708c:	4619      	mov	r1, r3
 800708e:	4838      	ldr	r0, [pc, #224]	; (8007170 <HAL_FMC_MspInit+0x130>)
 8007090:	f7fa fc3c 	bl	800190c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007094:	2304      	movs	r3, #4
 8007096:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007098:	2302      	movs	r3, #2
 800709a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800709c:	2300      	movs	r3, #0
 800709e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070a0:	2303      	movs	r3, #3
 80070a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80070a4:	230c      	movs	r3, #12
 80070a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80070a8:	1d3b      	adds	r3, r7, #4
 80070aa:	4619      	mov	r1, r3
 80070ac:	4831      	ldr	r0, [pc, #196]	; (8007174 <HAL_FMC_MspInit+0x134>)
 80070ae:	f7fa fc2d 	bl	800190c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80070b2:	2380      	movs	r3, #128	; 0x80
 80070b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070b6:	2302      	movs	r3, #2
 80070b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070ba:	2300      	movs	r3, #0
 80070bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070be:	2303      	movs	r3, #3
 80070c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80070c2:	230c      	movs	r3, #12
 80070c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80070c6:	1d3b      	adds	r3, r7, #4
 80070c8:	4619      	mov	r1, r3
 80070ca:	482b      	ldr	r0, [pc, #172]	; (8007178 <HAL_FMC_MspInit+0x138>)
 80070cc:	f7fa fc1e 	bl	800190c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80070d0:	2310      	movs	r3, #16
 80070d2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070d4:	2302      	movs	r3, #2
 80070d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070d8:	2300      	movs	r3, #0
 80070da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070dc:	2303      	movs	r3, #3
 80070de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80070e0:	230c      	movs	r3, #12
 80070e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80070e4:	1d3b      	adds	r3, r7, #4
 80070e6:	4619      	mov	r1, r3
 80070e8:	4824      	ldr	r0, [pc, #144]	; (800717c <HAL_FMC_MspInit+0x13c>)
 80070ea:	f7fa fc0f 	bl	800190c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4 
 80070ee:	f248 1337 	movw	r3, #33079	; 0x8137
 80070f2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070f4:	2302      	movs	r3, #2
 80070f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070f8:	2300      	movs	r3, #0
 80070fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070fc:	2303      	movs	r3, #3
 80070fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007100:	230c      	movs	r3, #12
 8007102:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007104:	1d3b      	adds	r3, r7, #4
 8007106:	4619      	mov	r1, r3
 8007108:	481d      	ldr	r0, [pc, #116]	; (8007180 <HAL_FMC_MspInit+0x140>)
 800710a:	f7fa fbff 	bl	800190c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800710e:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8007112:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007114:	2302      	movs	r3, #2
 8007116:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007118:	2300      	movs	r3, #0
 800711a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800711c:	2303      	movs	r3, #3
 800711e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007120:	230c      	movs	r3, #12
 8007122:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007124:	1d3b      	adds	r3, r7, #4
 8007126:	4619      	mov	r1, r3
 8007128:	4816      	ldr	r0, [pc, #88]	; (8007184 <HAL_FMC_MspInit+0x144>)
 800712a:	f7fa fbef 	bl	800190c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
 800712e:	f24c 0303 	movw	r3, #49155	; 0xc003
 8007132:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007134:	2302      	movs	r3, #2
 8007136:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007138:	2300      	movs	r3, #0
 800713a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800713c:	2303      	movs	r3, #3
 800713e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007140:	230c      	movs	r3, #12
 8007142:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007144:	1d3b      	adds	r3, r7, #4
 8007146:	4619      	mov	r1, r3
 8007148:	480f      	ldr	r0, [pc, #60]	; (8007188 <HAL_FMC_MspInit+0x148>)
 800714a:	f7fa fbdf 	bl	800190c <HAL_GPIO_Init>

  /* Peripheral interrupt init */
  HAL_NVIC_SetPriority(FMC_IRQn, 0, 0);
 800714e:	2200      	movs	r2, #0
 8007150:	2100      	movs	r1, #0
 8007152:	2030      	movs	r0, #48	; 0x30
 8007154:	f7f9 fa1d 	bl	8000592 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FMC_IRQn);
 8007158:	2030      	movs	r0, #48	; 0x30
 800715a:	f7f9 fa36 	bl	80005ca <HAL_NVIC_EnableIRQ>
 800715e:	e000      	b.n	8007162 <HAL_FMC_MspInit+0x122>
    return;
 8007160:	bf00      	nop
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8007162:	3718      	adds	r7, #24
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}
 8007168:	20000038 	.word	0x20000038
 800716c:	58024400 	.word	0x58024400
 8007170:	58021400 	.word	0x58021400
 8007174:	58021c00 	.word	0x58021c00
 8007178:	58020000 	.word	0x58020000
 800717c:	58020800 	.word	0x58020800
 8007180:	58021800 	.word	0x58021800
 8007184:	58021000 	.word	0x58021000
 8007188:	58020c00 	.word	0x58020c00

0800718c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8007194:	f7ff ff54 	bl	8007040 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8007198:	bf00      	nop
 800719a:	3708      	adds	r7, #8
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai2_b;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b08a      	sub	sp, #40	; 0x28
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a8b      	ldr	r2, [pc, #556]	; (80073dc <HAL_SAI_MspInit+0x23c>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d174      	bne.n	800729c <HAL_SAI_MspInit+0xfc>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 80071b2:	4b8b      	ldr	r3, [pc, #556]	; (80073e0 <HAL_SAI_MspInit+0x240>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d116      	bne.n	80071e8 <HAL_SAI_MspInit+0x48>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80071ba:	4a8a      	ldr	r2, [pc, #552]	; (80073e4 <HAL_SAI_MspInit+0x244>)
 80071bc:	4b89      	ldr	r3, [pc, #548]	; (80073e4 <HAL_SAI_MspInit+0x244>)
 80071be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80071c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80071c6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80071ca:	4b86      	ldr	r3, [pc, #536]	; (80073e4 <HAL_SAI_MspInit+0x244>)
 80071cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80071d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071d4:	613b      	str	r3, [r7, #16]
 80071d6:	693b      	ldr	r3, [r7, #16]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI2_IRQn, 0, 0);
 80071d8:	2200      	movs	r2, #0
 80071da:	2100      	movs	r1, #0
 80071dc:	205b      	movs	r0, #91	; 0x5b
 80071de:	f7f9 f9d8 	bl	8000592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI2_IRQn);
 80071e2:	205b      	movs	r0, #91	; 0x5b
 80071e4:	f7f9 f9f1 	bl	80005ca <HAL_NVIC_EnableIRQ>
    }
    SAI2_client ++;
 80071e8:	4b7d      	ldr	r3, [pc, #500]	; (80073e0 <HAL_SAI_MspInit+0x240>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	3301      	adds	r3, #1
 80071ee:	4a7c      	ldr	r2, [pc, #496]	; (80073e0 <HAL_SAI_MspInit+0x240>)
 80071f0:	6013      	str	r3, [r2, #0]
    /**SAI2_A_Block_A GPIO Configuration    
    PD11     ------> SAI2_SD_A
    PD12     ------> SAI2_FS_A
    PD13     ------> SAI2_SCK_A 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80071f2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80071f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071f8:	2302      	movs	r3, #2
 80071fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071fc:	2300      	movs	r3, #0
 80071fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007200:	2303      	movs	r3, #3
 8007202:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8007204:	230a      	movs	r3, #10
 8007206:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007208:	f107 0314 	add.w	r3, r7, #20
 800720c:	4619      	mov	r1, r3
 800720e:	4876      	ldr	r0, [pc, #472]	; (80073e8 <HAL_SAI_MspInit+0x248>)
 8007210:	f7fa fb7c 	bl	800190c <HAL_GPIO_Init>

    /* Peripheral DMA init*/
    
    hdma_sai2_a.Instance = DMA1_Stream0;
 8007214:	4b75      	ldr	r3, [pc, #468]	; (80073ec <HAL_SAI_MspInit+0x24c>)
 8007216:	4a76      	ldr	r2, [pc, #472]	; (80073f0 <HAL_SAI_MspInit+0x250>)
 8007218:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Request = DMA_REQUEST_SAI2_A;
 800721a:	4b74      	ldr	r3, [pc, #464]	; (80073ec <HAL_SAI_MspInit+0x24c>)
 800721c:	2259      	movs	r2, #89	; 0x59
 800721e:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007220:	4b72      	ldr	r3, [pc, #456]	; (80073ec <HAL_SAI_MspInit+0x24c>)
 8007222:	2200      	movs	r2, #0
 8007224:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8007226:	4b71      	ldr	r3, [pc, #452]	; (80073ec <HAL_SAI_MspInit+0x24c>)
 8007228:	2200      	movs	r2, #0
 800722a:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 800722c:	4b6f      	ldr	r3, [pc, #444]	; (80073ec <HAL_SAI_MspInit+0x24c>)
 800722e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007232:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007234:	4b6d      	ldr	r3, [pc, #436]	; (80073ec <HAL_SAI_MspInit+0x24c>)
 8007236:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800723a:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800723c:	4b6b      	ldr	r3, [pc, #428]	; (80073ec <HAL_SAI_MspInit+0x24c>)
 800723e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007242:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8007244:	4b69      	ldr	r3, [pc, #420]	; (80073ec <HAL_SAI_MspInit+0x24c>)
 8007246:	f44f 7280 	mov.w	r2, #256	; 0x100
 800724a:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_HIGH;
 800724c:	4b67      	ldr	r3, [pc, #412]	; (80073ec <HAL_SAI_MspInit+0x24c>)
 800724e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007252:	621a      	str	r2, [r3, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007254:	4b65      	ldr	r3, [pc, #404]	; (80073ec <HAL_SAI_MspInit+0x24c>)
 8007256:	2204      	movs	r2, #4
 8007258:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai2_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800725a:	4b64      	ldr	r3, [pc, #400]	; (80073ec <HAL_SAI_MspInit+0x24c>)
 800725c:	2203      	movs	r2, #3
 800725e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai2_a.Init.MemBurst = DMA_MBURST_SINGLE;
 8007260:	4b62      	ldr	r3, [pc, #392]	; (80073ec <HAL_SAI_MspInit+0x24c>)
 8007262:	2200      	movs	r2, #0
 8007264:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai2_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8007266:	4b61      	ldr	r3, [pc, #388]	; (80073ec <HAL_SAI_MspInit+0x24c>)
 8007268:	2200      	movs	r2, #0
 800726a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 800726c:	485f      	ldr	r0, [pc, #380]	; (80073ec <HAL_SAI_MspInit+0x24c>)
 800726e:	f7f9 f9f1 	bl	8000654 <HAL_DMA_Init>
 8007272:	4603      	mov	r3, r0
 8007274:	2b00      	cmp	r3, #0
 8007276:	d004      	beq.n	8007282 <HAL_SAI_MspInit+0xe2>
    {
      _Error_Handler(__FILE__, __LINE__);
 8007278:	f240 11c1 	movw	r1, #449	; 0x1c1
 800727c:	485d      	ldr	r0, [pc, #372]	; (80073f4 <HAL_SAI_MspInit+0x254>)
 800727e:	f7ff fe11 	bl	8006ea4 <_Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	4a59      	ldr	r2, [pc, #356]	; (80073ec <HAL_SAI_MspInit+0x24c>)
 8007286:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800728a:	4a58      	ldr	r2, [pc, #352]	; (80073ec <HAL_SAI_MspInit+0x24c>)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	4a56      	ldr	r2, [pc, #344]	; (80073ec <HAL_SAI_MspInit+0x24c>)
 8007294:	67da      	str	r2, [r3, #124]	; 0x7c
 8007296:	4a55      	ldr	r2, [pc, #340]	; (80073ec <HAL_SAI_MspInit+0x24c>)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6393      	str	r3, [r2, #56]	; 0x38

    }
    if(hsai->Instance==SAI2_Block_B)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a55      	ldr	r2, [pc, #340]	; (80073f8 <HAL_SAI_MspInit+0x258>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	f040 8096 	bne.w	80073d4 <HAL_SAI_MspInit+0x234>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 80072a8:	4b4d      	ldr	r3, [pc, #308]	; (80073e0 <HAL_SAI_MspInit+0x240>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d116      	bne.n	80072de <HAL_SAI_MspInit+0x13e>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80072b0:	4a4c      	ldr	r2, [pc, #304]	; (80073e4 <HAL_SAI_MspInit+0x244>)
 80072b2:	4b4c      	ldr	r3, [pc, #304]	; (80073e4 <HAL_SAI_MspInit+0x244>)
 80072b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80072b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80072bc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80072c0:	4b48      	ldr	r3, [pc, #288]	; (80073e4 <HAL_SAI_MspInit+0x244>)
 80072c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80072c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80072ca:	60fb      	str	r3, [r7, #12]
 80072cc:	68fb      	ldr	r3, [r7, #12]

      /* Peripheral interrupt init*/
      HAL_NVIC_SetPriority(SAI2_IRQn, 0, 0);
 80072ce:	2200      	movs	r2, #0
 80072d0:	2100      	movs	r1, #0
 80072d2:	205b      	movs	r0, #91	; 0x5b
 80072d4:	f7f9 f95d 	bl	8000592 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI2_IRQn);
 80072d8:	205b      	movs	r0, #91	; 0x5b
 80072da:	f7f9 f976 	bl	80005ca <HAL_NVIC_EnableIRQ>
      }
    SAI2_client ++;
 80072de:	4b40      	ldr	r3, [pc, #256]	; (80073e0 <HAL_SAI_MspInit+0x240>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	3301      	adds	r3, #1
 80072e4:	4a3e      	ldr	r2, [pc, #248]	; (80073e0 <HAL_SAI_MspInit+0x240>)
 80072e6:	6013      	str	r3, [r2, #0]
    PA1     ------> SAI2_MCLK_B
    PE11     ------> SAI2_SD_B
    PE12     ------> SAI2_SCK_B
    PA12     ------> SAI2_FS_B 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80072e8:	2302      	movs	r3, #2
 80072ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072ec:	2302      	movs	r3, #2
 80072ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072f0:	2300      	movs	r3, #0
 80072f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072f4:	2303      	movs	r3, #3
 80072f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80072f8:	230a      	movs	r3, #10
 80072fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80072fc:	f107 0314 	add.w	r3, r7, #20
 8007300:	4619      	mov	r1, r3
 8007302:	483e      	ldr	r0, [pc, #248]	; (80073fc <HAL_SAI_MspInit+0x25c>)
 8007304:	f7fa fb02 	bl	800190c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007308:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800730c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800730e:	2302      	movs	r3, #2
 8007310:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007312:	2300      	movs	r3, #0
 8007314:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007316:	2303      	movs	r3, #3
 8007318:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800731a:	230a      	movs	r3, #10
 800731c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800731e:	f107 0314 	add.w	r3, r7, #20
 8007322:	4619      	mov	r1, r3
 8007324:	4836      	ldr	r0, [pc, #216]	; (8007400 <HAL_SAI_MspInit+0x260>)
 8007326:	f7fa faf1 	bl	800190c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800732a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800732e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007330:	2302      	movs	r3, #2
 8007332:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007334:	2300      	movs	r3, #0
 8007336:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007338:	2303      	movs	r3, #3
 800733a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SAI2;
 800733c:	2308      	movs	r3, #8
 800733e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007340:	f107 0314 	add.w	r3, r7, #20
 8007344:	4619      	mov	r1, r3
 8007346:	482d      	ldr	r0, [pc, #180]	; (80073fc <HAL_SAI_MspInit+0x25c>)
 8007348:	f7fa fae0 	bl	800190c <HAL_GPIO_Init>

    /* Peripheral DMA init*/
    
    hdma_sai2_b.Instance = DMA1_Stream1;
 800734c:	4b2d      	ldr	r3, [pc, #180]	; (8007404 <HAL_SAI_MspInit+0x264>)
 800734e:	4a2e      	ldr	r2, [pc, #184]	; (8007408 <HAL_SAI_MspInit+0x268>)
 8007350:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Request = DMA_REQUEST_SAI2_B;
 8007352:	4b2c      	ldr	r3, [pc, #176]	; (8007404 <HAL_SAI_MspInit+0x264>)
 8007354:	225a      	movs	r2, #90	; 0x5a
 8007356:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007358:	4b2a      	ldr	r3, [pc, #168]	; (8007404 <HAL_SAI_MspInit+0x264>)
 800735a:	2240      	movs	r2, #64	; 0x40
 800735c:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800735e:	4b29      	ldr	r3, [pc, #164]	; (8007404 <HAL_SAI_MspInit+0x264>)
 8007360:	2200      	movs	r2, #0
 8007362:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8007364:	4b27      	ldr	r3, [pc, #156]	; (8007404 <HAL_SAI_MspInit+0x264>)
 8007366:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800736a:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800736c:	4b25      	ldr	r3, [pc, #148]	; (8007404 <HAL_SAI_MspInit+0x264>)
 800736e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007372:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007374:	4b23      	ldr	r3, [pc, #140]	; (8007404 <HAL_SAI_MspInit+0x264>)
 8007376:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800737a:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 800737c:	4b21      	ldr	r3, [pc, #132]	; (8007404 <HAL_SAI_MspInit+0x264>)
 800737e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007382:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_HIGH;
 8007384:	4b1f      	ldr	r3, [pc, #124]	; (8007404 <HAL_SAI_MspInit+0x264>)
 8007386:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800738a:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800738c:	4b1d      	ldr	r3, [pc, #116]	; (8007404 <HAL_SAI_MspInit+0x264>)
 800738e:	2204      	movs	r2, #4
 8007390:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai2_b.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8007392:	4b1c      	ldr	r3, [pc, #112]	; (8007404 <HAL_SAI_MspInit+0x264>)
 8007394:	2203      	movs	r2, #3
 8007396:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai2_b.Init.MemBurst = DMA_MBURST_SINGLE;
 8007398:	4b1a      	ldr	r3, [pc, #104]	; (8007404 <HAL_SAI_MspInit+0x264>)
 800739a:	2200      	movs	r2, #0
 800739c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai2_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800739e:	4b19      	ldr	r3, [pc, #100]	; (8007404 <HAL_SAI_MspInit+0x264>)
 80073a0:	2200      	movs	r2, #0
 80073a2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 80073a4:	4817      	ldr	r0, [pc, #92]	; (8007404 <HAL_SAI_MspInit+0x264>)
 80073a6:	f7f9 f955 	bl	8000654 <HAL_DMA_Init>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d004      	beq.n	80073ba <HAL_SAI_MspInit+0x21a>
    {
      _Error_Handler(__FILE__, __LINE__);
 80073b0:	f44f 7101 	mov.w	r1, #516	; 0x204
 80073b4:	480f      	ldr	r0, [pc, #60]	; (80073f4 <HAL_SAI_MspInit+0x254>)
 80073b6:	f7ff fd75 	bl	8006ea4 <_Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	4a11      	ldr	r2, [pc, #68]	; (8007404 <HAL_SAI_MspInit+0x264>)
 80073be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80073c2:	4a10      	ldr	r2, [pc, #64]	; (8007404 <HAL_SAI_MspInit+0x264>)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	4a0e      	ldr	r2, [pc, #56]	; (8007404 <HAL_SAI_MspInit+0x264>)
 80073cc:	67da      	str	r2, [r3, #124]	; 0x7c
 80073ce:	4a0d      	ldr	r2, [pc, #52]	; (8007404 <HAL_SAI_MspInit+0x264>)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 80073d4:	bf00      	nop
 80073d6:	3728      	adds	r7, #40	; 0x28
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}
 80073dc:	40015c04 	.word	0x40015c04
 80073e0:	20000040 	.word	0x20000040
 80073e4:	58024400 	.word	0x58024400
 80073e8:	58020c00 	.word	0x58020c00
 80073ec:	200002ec 	.word	0x200002ec
 80073f0:	40020010 	.word	0x40020010
 80073f4:	080076b4 	.word	0x080076b4
 80073f8:	40015c24 	.word	0x40015c24
 80073fc:	58020000 	.word	0x58020000
 8007400:	58021000 	.word	0x58021000
 8007404:	200000d8 	.word	0x200000d8
 8007408:	40020028 	.word	0x40020028

0800740c <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 800740c:	b480      	push	{r7}
 800740e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007410:	bf00      	nop
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr
	...

0800741c <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800741c:	b480      	push	{r7}
 800741e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	#ifdef DEBUG
	R_H;
 8007420:	4b01      	ldr	r3, [pc, #4]	; (8007428 <HardFault_Handler+0xc>)
 8007422:	2240      	movs	r2, #64	; 0x40
 8007424:	835a      	strh	r2, [r3, #26]
	#endif


  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007426:	e7fe      	b.n	8007426 <HardFault_Handler+0xa>
 8007428:	58020c00 	.word	0x58020c00

0800742c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800742c:	b480      	push	{r7}
 800742e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007430:	e7fe      	b.n	8007430 <MemManage_Handler+0x4>

08007432 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8007432:	b480      	push	{r7}
 8007434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007436:	e7fe      	b.n	8007436 <BusFault_Handler+0x4>

08007438 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8007438:	b480      	push	{r7}
 800743a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800743c:	e7fe      	b.n	800743c <UsageFault_Handler+0x4>

0800743e <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 800743e:	b480      	push	{r7}
 8007440:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007442:	bf00      	nop
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr

0800744c <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 800744c:	b480      	push	{r7}
 800744e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007450:	bf00      	nop
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr

0800745a <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800745a:	b480      	push	{r7}
 800745c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800745e:	bf00      	nop
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr

08007468 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800746c:	f7f8 ff76 	bl	800035c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8007470:	f7f9 f8e2 	bl	8000638 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007474:	bf00      	nop
 8007476:	bd80      	pop	{r7, pc}

08007478 <DMA1_Stream0_IRQHandler>:

/**
* @brief This function handles DMA1 stream0 global interrupt.
*/
void DMA1_Stream0_IRQHandler(void)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */
  B_H;
 800747c:	4b06      	ldr	r3, [pc, #24]	; (8007498 <DMA1_Stream0_IRQHandler+0x20>)
 800747e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007482:	835a      	strh	r2, [r3, #26]
  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8007484:	4805      	ldr	r0, [pc, #20]	; (800749c <DMA1_Stream0_IRQHandler+0x24>)
 8007486:	f7f9 fd3f 	bl	8000f08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */
  B_L;
 800748a:	4b03      	ldr	r3, [pc, #12]	; (8007498 <DMA1_Stream0_IRQHandler+0x20>)
 800748c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007490:	831a      	strh	r2, [r3, #24]

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8007492:	bf00      	nop
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop
 8007498:	58021800 	.word	0x58021800
 800749c:	200002ec 	.word	0x200002ec

080074a0 <DMA1_Stream1_IRQHandler>:

/**
* @brief This function handles DMA1 stream1 global interrupt.
*/
void DMA1_Stream1_IRQHandler(void)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */
  B_H;
 80074a4:	4b06      	ldr	r3, [pc, #24]	; (80074c0 <DMA1_Stream1_IRQHandler+0x20>)
 80074a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074aa:	835a      	strh	r2, [r3, #26]

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 80074ac:	4805      	ldr	r0, [pc, #20]	; (80074c4 <DMA1_Stream1_IRQHandler+0x24>)
 80074ae:	f7f9 fd2b 	bl	8000f08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */
  B_L;
 80074b2:	4b03      	ldr	r3, [pc, #12]	; (80074c0 <DMA1_Stream1_IRQHandler+0x20>)
 80074b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074b8:	831a      	strh	r2, [r3, #24]
  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80074ba:	bf00      	nop
 80074bc:	bd80      	pop	{r7, pc}
 80074be:	bf00      	nop
 80074c0:	58021800 	.word	0x58021800
 80074c4:	200000d8 	.word	0x200000d8

080074c8 <FMC_IRQHandler>:

/**
* @brief This function handles FMC global interrupt.
*/
void FMC_IRQHandler(void)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_IRQn 0 */

  /* USER CODE END FMC_IRQn 0 */
  HAL_SDRAM_IRQHandler(&hsdram1);
 80074cc:	4802      	ldr	r0, [pc, #8]	; (80074d8 <FMC_IRQHandler+0x10>)
 80074ce:	f7fe f8cd 	bl	800566c <HAL_SDRAM_IRQHandler>
  /* USER CODE BEGIN FMC_IRQn 1 */

  /* USER CODE END FMC_IRQn 1 */
}
 80074d2:	bf00      	nop
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	bf00      	nop
 80074d8:	200003e8 	.word	0x200003e8

080074dc <SPI5_IRQHandler>:

/**
* @brief This function handles SPI5 global interrupt.
*/
void SPI5_IRQHandler(void)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI5_IRQn 0 */

  /* USER CODE END SPI5_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi5);
 80074e0:	4802      	ldr	r0, [pc, #8]	; (80074ec <SPI5_IRQHandler+0x10>)
 80074e2:	f7fe fbd3 	bl	8005c8c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI5_IRQn 1 */

  /* USER CODE END SPI5_IRQn 1 */
}
 80074e6:	bf00      	nop
 80074e8:	bd80      	pop	{r7, pc}
 80074ea:	bf00      	nop
 80074ec:	20000154 	.word	0x20000154

080074f0 <SAI2_IRQHandler>:

/**
* @brief This function handles SAI2 global interrupt.
*/
void SAI2_IRQHandler(void)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI2_IRQn 0 */

  /* USER CODE END SAI2_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA2);
 80074f4:	4803      	ldr	r0, [pc, #12]	; (8007504 <SAI2_IRQHandler+0x14>)
 80074f6:	f7fd fdb5 	bl	8005064 <HAL_SAI_IRQHandler>
  HAL_SAI_IRQHandler(&hsai_BlockB2);
 80074fa:	4803      	ldr	r0, [pc, #12]	; (8007508 <SAI2_IRQHandler+0x18>)
 80074fc:	f7fd fdb2 	bl	8005064 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI2_IRQn 1 */

  /* USER CODE END SAI2_IRQn 1 */
}
 8007500:	bf00      	nop
 8007502:	bd80      	pop	{r7, pc}
 8007504:	200001dc 	.word	0x200001dc
 8007508:	20000044 	.word	0x20000044

0800750c <LPTIM5_IRQHandler>:

/**
* @brief This function handles LPTIM5 global interrupt.
*/
void LPTIM5_IRQHandler(void)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM5_IRQn 0 */

  /* USER CODE END LPTIM5_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim5);
 8007510:	4802      	ldr	r0, [pc, #8]	; (800751c <LPTIM5_IRQHandler+0x10>)
 8007512:	f7fa fc61 	bl	8001dd8 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM5_IRQn 1 */

  /* USER CODE END LPTIM5_IRQn 1 */
}
 8007516:	bf00      	nop
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	200002ac 	.word	0x200002ac

08007520 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007520:	b480      	push	{r7}
 8007522:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007524:	4a26      	ldr	r2, [pc, #152]	; (80075c0 <SystemInit+0xa0>)
 8007526:	4b26      	ldr	r3, [pc, #152]	; (80075c0 <SystemInit+0xa0>)
 8007528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800752c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007530:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8007534:	4a23      	ldr	r2, [pc, #140]	; (80075c4 <SystemInit+0xa4>)
 8007536:	4b23      	ldr	r3, [pc, #140]	; (80075c4 <SystemInit+0xa4>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f043 0301 	orr.w	r3, r3, #1
 800753e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007540:	4b20      	ldr	r3, [pc, #128]	; (80075c4 <SystemInit+0xa4>)
 8007542:	2200      	movs	r2, #0
 8007544:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= (uint32_t)0xEAF6ED7F;
 8007546:	491f      	ldr	r1, [pc, #124]	; (80075c4 <SystemInit+0xa4>)
 8007548:	4b1e      	ldr	r3, [pc, #120]	; (80075c4 <SystemInit+0xa4>)
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	4b1e      	ldr	r3, [pc, #120]	; (80075c8 <SystemInit+0xa8>)
 800754e:	4013      	ands	r3, r2
 8007550:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8007552:	4b1c      	ldr	r3, [pc, #112]	; (80075c4 <SystemInit+0xa4>)
 8007554:	2200      	movs	r2, #0
 8007556:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8007558:	4b1a      	ldr	r3, [pc, #104]	; (80075c4 <SystemInit+0xa4>)
 800755a:	2200      	movs	r2, #0
 800755c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800755e:	4b19      	ldr	r3, [pc, #100]	; (80075c4 <SystemInit+0xa4>)
 8007560:	2200      	movs	r2, #0
 8007562:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8007564:	4b17      	ldr	r3, [pc, #92]	; (80075c4 <SystemInit+0xa4>)
 8007566:	2200      	movs	r2, #0
 8007568:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800756a:	4b16      	ldr	r3, [pc, #88]	; (80075c4 <SystemInit+0xa4>)
 800756c:	2200      	movs	r2, #0
 800756e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8007570:	4b14      	ldr	r3, [pc, #80]	; (80075c4 <SystemInit+0xa4>)
 8007572:	2200      	movs	r2, #0
 8007574:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8007576:	4b13      	ldr	r3, [pc, #76]	; (80075c4 <SystemInit+0xa4>)
 8007578:	2200      	movs	r2, #0
 800757a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 800757c:	4b11      	ldr	r3, [pc, #68]	; (80075c4 <SystemInit+0xa4>)
 800757e:	2200      	movs	r2, #0
 8007580:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8007582:	4b10      	ldr	r3, [pc, #64]	; (80075c4 <SystemInit+0xa4>)
 8007584:	2200      	movs	r2, #0
 8007586:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8007588:	4b0e      	ldr	r3, [pc, #56]	; (80075c4 <SystemInit+0xa4>)
 800758a:	2200      	movs	r2, #0
 800758c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800758e:	4b0d      	ldr	r3, [pc, #52]	; (80075c4 <SystemInit+0xa4>)
 8007590:	2200      	movs	r2, #0
 8007592:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007594:	4a0b      	ldr	r2, [pc, #44]	; (80075c4 <SystemInit+0xa4>)
 8007596:	4b0b      	ldr	r3, [pc, #44]	; (80075c4 <SystemInit+0xa4>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800759e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80075a0:	4b08      	ldr	r3, [pc, #32]	; (80075c4 <SystemInit+0xa4>)
 80075a2:	2200      	movs	r2, #0
 80075a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  *((__IO uint32_t*)0x51008108) = 0x00000001;
 80075a6:	4b09      	ldr	r3, [pc, #36]	; (80075cc <SystemInit+0xac>)
 80075a8:	2201      	movs	r2, #1
 80075aa:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal ITCMSRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80075ac:	4b04      	ldr	r3, [pc, #16]	; (80075c0 <SystemInit+0xa0>)
 80075ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80075b2:	609a      	str	r2, [r3, #8]
#endif

}
 80075b4:	bf00      	nop
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr
 80075be:	bf00      	nop
 80075c0:	e000ed00 	.word	0xe000ed00
 80075c4:	58024400 	.word	0x58024400
 80075c8:	eaf6ed7f 	.word	0xeaf6ed7f
 80075cc:	51008108 	.word	0x51008108

080075d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80075d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007608 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80075d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80075d6:	e003      	b.n	80075e0 <LoopCopyDataInit>

080075d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80075d8:	4b0c      	ldr	r3, [pc, #48]	; (800760c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80075da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80075dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80075de:	3104      	adds	r1, #4

080075e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80075e0:	480b      	ldr	r0, [pc, #44]	; (8007610 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80075e2:	4b0c      	ldr	r3, [pc, #48]	; (8007614 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80075e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80075e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80075e8:	d3f6      	bcc.n	80075d8 <CopyDataInit>
  ldr  r2, =_sbss
 80075ea:	4a0b      	ldr	r2, [pc, #44]	; (8007618 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80075ec:	e002      	b.n	80075f4 <LoopFillZerobss>

080075ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80075ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80075f0:	f842 3b04 	str.w	r3, [r2], #4

080075f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80075f4:	4b09      	ldr	r3, [pc, #36]	; (800761c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80075f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80075f8:	d3f9      	bcc.n	80075ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80075fa:	f7ff ff91 	bl	8007520 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80075fe:	f000 f811 	bl	8007624 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007602:	f7fe ff71 	bl	80064e8 <main>
  bx  lr    
 8007606:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007608:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800760c:	080076e8 	.word	0x080076e8
  ldr  r0, =_sdata
 8007610:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007614:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8007618:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 800761c:	2000049c 	.word	0x2000049c

08007620 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007620:	e7fe      	b.n	8007620 <ADC3_IRQHandler>
	...

08007624 <__libc_init_array>:
 8007624:	b570      	push	{r4, r5, r6, lr}
 8007626:	4e0d      	ldr	r6, [pc, #52]	; (800765c <__libc_init_array+0x38>)
 8007628:	4c0d      	ldr	r4, [pc, #52]	; (8007660 <__libc_init_array+0x3c>)
 800762a:	1ba4      	subs	r4, r4, r6
 800762c:	10a4      	asrs	r4, r4, #2
 800762e:	2500      	movs	r5, #0
 8007630:	42a5      	cmp	r5, r4
 8007632:	d109      	bne.n	8007648 <__libc_init_array+0x24>
 8007634:	4e0b      	ldr	r6, [pc, #44]	; (8007664 <__libc_init_array+0x40>)
 8007636:	4c0c      	ldr	r4, [pc, #48]	; (8007668 <__libc_init_array+0x44>)
 8007638:	f000 f824 	bl	8007684 <_init>
 800763c:	1ba4      	subs	r4, r4, r6
 800763e:	10a4      	asrs	r4, r4, #2
 8007640:	2500      	movs	r5, #0
 8007642:	42a5      	cmp	r5, r4
 8007644:	d105      	bne.n	8007652 <__libc_init_array+0x2e>
 8007646:	bd70      	pop	{r4, r5, r6, pc}
 8007648:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800764c:	4798      	blx	r3
 800764e:	3501      	adds	r5, #1
 8007650:	e7ee      	b.n	8007630 <__libc_init_array+0xc>
 8007652:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007656:	4798      	blx	r3
 8007658:	3501      	adds	r5, #1
 800765a:	e7f2      	b.n	8007642 <__libc_init_array+0x1e>
 800765c:	080076e0 	.word	0x080076e0
 8007660:	080076e0 	.word	0x080076e0
 8007664:	080076e0 	.word	0x080076e0
 8007668:	080076e4 	.word	0x080076e4

0800766c <memcpy>:
 800766c:	b510      	push	{r4, lr}
 800766e:	1e43      	subs	r3, r0, #1
 8007670:	440a      	add	r2, r1
 8007672:	4291      	cmp	r1, r2
 8007674:	d100      	bne.n	8007678 <memcpy+0xc>
 8007676:	bd10      	pop	{r4, pc}
 8007678:	f811 4b01 	ldrb.w	r4, [r1], #1
 800767c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007680:	e7f7      	b.n	8007672 <memcpy+0x6>
	...

08007684 <_init>:
 8007684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007686:	bf00      	nop
 8007688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800768a:	bc08      	pop	{r3}
 800768c:	469e      	mov	lr, r3
 800768e:	4770      	bx	lr

08007690 <_fini>:
 8007690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007692:	bf00      	nop
 8007694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007696:	bc08      	pop	{r3}
 8007698:	469e      	mov	lr, r3
 800769a:	4770      	bx	lr
