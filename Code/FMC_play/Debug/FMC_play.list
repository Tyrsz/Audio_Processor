
FMC_play.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f68  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08004200  08004200  00014200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004234  08004234  00014234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004238  08004238  00014238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  0800423c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000460  2000000c  08004248  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000046c  08004248  0002046c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001b826  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003080  00000000  00000000  0003b860  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008936  00000000  00000000  0003e8e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000ac8  00000000  00000000  00047218  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001580  00000000  00000000  00047ce0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00007580  00000000  00000000  00049260  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00005647  00000000  00000000  000507e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00055e27  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000022ac  00000000  00000000  00055ea4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2000000c 	.word	0x2000000c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080041e8 	.word	0x080041e8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000010 	.word	0x20000010
 80002d4:	080041e8 	.word	0x080041e8

080002d8 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80002d8:	4a0e      	ldr	r2, [pc, #56]	; (8000314 <HAL_InitTick+0x3c>)
 80002da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002de:	490e      	ldr	r1, [pc, #56]	; (8000318 <HAL_InitTick+0x40>)
 80002e0:	7812      	ldrb	r2, [r2, #0]
 80002e2:	fbb3 f3f2 	udiv	r3, r3, r2
{
 80002e6:	b510      	push	{r4, lr}
 80002e8:	4604      	mov	r4, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80002ea:	6808      	ldr	r0, [r1, #0]
 80002ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80002f0:	f000 f8aa 	bl	8000448 <HAL_SYSTICK_Config>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002f4:	b958      	cbnz	r0, 800030e <HAL_InitTick+0x36>
 80002f6:	2c0f      	cmp	r4, #15
 80002f8:	d809      	bhi.n	800030e <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80002fa:	2200      	movs	r2, #0
 80002fc:	4621      	mov	r1, r4
 80002fe:	f04f 30ff 	mov.w	r0, #4294967295
 8000302:	f000 f859 	bl	80003b8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000306:	4b05      	ldr	r3, [pc, #20]	; (800031c <HAL_InitTick+0x44>)
 8000308:	2000      	movs	r0, #0
 800030a:	601c      	str	r4, [r3, #0]
 800030c:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_ERROR;
 800030e:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 8000310:	bd10      	pop	{r4, pc}
 8000312:	bf00      	nop
 8000314:	20000000 	.word	0x20000000
 8000318:	20000008 	.word	0x20000008
 800031c:	20000004 	.word	0x20000004

08000320 <HAL_Init>:
{
 8000320:	b500      	push	{lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000322:	2003      	movs	r0, #3
{
 8000324:	b083      	sub	sp, #12
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000326:	f000 f833 	bl	8000390 <HAL_NVIC_SetPriorityGrouping>
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800032a:	2000      	movs	r0, #0
 800032c:	f7ff ffd4 	bl	80002d8 <HAL_InitTick>
 8000330:	b118      	cbz	r0, 800033a <HAL_Init+0x1a>
    return HAL_ERROR;
 8000332:	2001      	movs	r0, #1
}
 8000334:	b003      	add	sp, #12
 8000336:	f85d fb04 	ldr.w	pc, [sp], #4
 800033a:	9001      	str	r0, [sp, #4]
  HAL_MspInit();
 800033c:	f003 fc66 	bl	8003c0c <HAL_MspInit>
  return HAL_OK;
 8000340:	9801      	ldr	r0, [sp, #4]
}
 8000342:	b003      	add	sp, #12
 8000344:	f85d fb04 	ldr.w	pc, [sp], #4

08000348 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000348:	4a03      	ldr	r2, [pc, #12]	; (8000358 <HAL_IncTick+0x10>)
 800034a:	4b04      	ldr	r3, [pc, #16]	; (800035c <HAL_IncTick+0x14>)
 800034c:	6811      	ldr	r1, [r2, #0]
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	440b      	add	r3, r1
 8000352:	6013      	str	r3, [r2, #0]
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	20000028 	.word	0x20000028
 800035c:	20000000 	.word	0x20000000

08000360 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000360:	4b01      	ldr	r3, [pc, #4]	; (8000368 <HAL_GetTick+0x8>)
 8000362:	6818      	ldr	r0, [r3, #0]
}
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop
 8000368:	20000028 	.word	0x20000028

0800036c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800036c:	b538      	push	{r3, r4, r5, lr}
 800036e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000370:	f7ff fff6 	bl	8000360 <HAL_GetTick>
 8000374:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000376:	1c63      	adds	r3, r4, #1
 8000378:	d002      	beq.n	8000380 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800037a:	4b04      	ldr	r3, [pc, #16]	; (800038c <HAL_Delay+0x20>)
 800037c:	781b      	ldrb	r3, [r3, #0]
 800037e:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000380:	f7ff ffee 	bl	8000360 <HAL_GetTick>
 8000384:	1b40      	subs	r0, r0, r5
 8000386:	4284      	cmp	r4, r0
 8000388:	d8fa      	bhi.n	8000380 <HAL_Delay+0x14>
  {
  }
}
 800038a:	bd38      	pop	{r3, r4, r5, pc}
 800038c:	20000000 	.word	0x20000000

08000390 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000390:	4907      	ldr	r1, [pc, #28]	; (80003b0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000392:	0200      	lsls	r0, r0, #8
 8000394:	4b07      	ldr	r3, [pc, #28]	; (80003b4 <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000396:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000398:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800039c:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800039e:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 80003a2:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80003a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80003a8:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80003aa:	4318      	orrs	r0, r3
  SCB->AIRCR =  reg_value;
 80003ac:	60c8      	str	r0, [r1, #12]
 80003ae:	4770      	bx	lr
 80003b0:	e000ed00 	.word	0xe000ed00
 80003b4:	05fa0000 	.word	0x05fa0000

080003b8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80003b8:	4b19      	ldr	r3, [pc, #100]	; (8000420 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80003ba:	b470      	push	{r4, r5, r6}
 80003bc:	68dc      	ldr	r4, [r3, #12]
 80003be:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003c2:	f1c4 0607 	rsb	r6, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003c6:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003c8:	2e04      	cmp	r6, #4
 80003ca:	bf28      	it	cs
 80003cc:	2604      	movcs	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003ce:	2b06      	cmp	r3, #6
 80003d0:	d919      	bls.n	8000406 <HAL_NVIC_SetPriority+0x4e>
 80003d2:	3c03      	subs	r4, #3
 80003d4:	2501      	movs	r5, #1
 80003d6:	40a5      	lsls	r5, r4
 80003d8:	3d01      	subs	r5, #1
 80003da:	402a      	ands	r2, r5

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003dc:	2301      	movs	r3, #1
  if ((int32_t)(IRQn) >= 0)
 80003de:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003e0:	fa03 f306 	lsl.w	r3, r3, r6
 80003e4:	f103 33ff 	add.w	r3, r3, #4294967295
 80003e8:	ea01 0103 	and.w	r1, r1, r3
 80003ec:	fa01 f104 	lsl.w	r1, r1, r4
 80003f0:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80003f4:	db0a      	blt.n	800040c <HAL_NVIC_SetPriority+0x54>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003f6:	0109      	lsls	r1, r1, #4
 80003f8:	4b0a      	ldr	r3, [pc, #40]	; (8000424 <HAL_NVIC_SetPriority+0x6c>)
 80003fa:	b2c9      	uxtb	r1, r1
 80003fc:	4403      	add	r3, r0
 80003fe:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000402:	bc70      	pop	{r4, r5, r6}
 8000404:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000406:	2200      	movs	r2, #0
 8000408:	4614      	mov	r4, r2
 800040a:	e7e7      	b.n	80003dc <HAL_NVIC_SetPriority+0x24>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800040c:	f000 000f 	and.w	r0, r0, #15
 8000410:	0109      	lsls	r1, r1, #4
 8000412:	4b05      	ldr	r3, [pc, #20]	; (8000428 <HAL_NVIC_SetPriority+0x70>)
 8000414:	b2c9      	uxtb	r1, r1
 8000416:	4403      	add	r3, r0
 8000418:	7619      	strb	r1, [r3, #24]
 800041a:	bc70      	pop	{r4, r5, r6}
 800041c:	4770      	bx	lr
 800041e:	bf00      	nop
 8000420:	e000ed00 	.word	0xe000ed00
 8000424:	e000e100 	.word	0xe000e100
 8000428:	e000ecfc 	.word	0xe000ecfc

0800042c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800042c:	2800      	cmp	r0, #0
 800042e:	db07      	blt.n	8000440 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000430:	f000 011f 	and.w	r1, r0, #31
 8000434:	2301      	movs	r3, #1
 8000436:	0940      	lsrs	r0, r0, #5
 8000438:	4a02      	ldr	r2, [pc, #8]	; (8000444 <HAL_NVIC_EnableIRQ+0x18>)
 800043a:	408b      	lsls	r3, r1
 800043c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8000440:	4770      	bx	lr
 8000442:	bf00      	nop
 8000444:	e000e100 	.word	0xe000e100

08000448 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000448:	3801      	subs	r0, #1
 800044a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800044e:	d20d      	bcs.n	800046c <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000450:	4b07      	ldr	r3, [pc, #28]	; (8000470 <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000452:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000454:	2107      	movs	r1, #7
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000456:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000458:	25f0      	movs	r5, #240	; 0xf0
 800045a:	4c06      	ldr	r4, [pc, #24]	; (8000474 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800045c:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800045e:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000460:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000464:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000466:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8000468:	bc30      	pop	{r4, r5}
 800046a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800046c:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 800046e:	4770      	bx	lr
 8000470:	e000e010 	.word	0xe000e010
 8000474:	e000ed00 	.word	0xe000ed00

08000478 <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000478:	4a04      	ldr	r2, [pc, #16]	; (800048c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800047a:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800047c:	6813      	ldr	r3, [r2, #0]
 800047e:	bf0c      	ite	eq
 8000480:	f043 0304 	orreq.w	r3, r3, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000484:	f023 0304 	bicne.w	r3, r3, #4
 8000488:	6013      	str	r3, [r2, #0]
 800048a:	4770      	bx	lr
 800048c:	e000e010 	.word	0xe000e010

08000490 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop

08000494 <HAL_SYSTICK_IRQHandler>:
{
 8000494:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000496:	f7ff fffb 	bl	8000490 <HAL_SYSTICK_Callback>
 800049a:	bd08      	pop	{r3, pc}

0800049c <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = 0U;
  uint32_t stream_baseaddress = (uint32_t)hdma->Instance;

  if((stream_baseaddress <= ((uint32_t)BDMA_Channel7) ) && \
 800049c:	4a18      	ldr	r2, [pc, #96]	; (8000500 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>)
  uint32_t stream_baseaddress = (uint32_t)hdma->Instance;
 800049e:	6803      	ldr	r3, [r0, #0]
  if((stream_baseaddress <= ((uint32_t)BDMA_Channel7) ) && \
 80004a0:	441a      	add	r2, r3
 80004a2:	2a8c      	cmp	r2, #140	; 0x8c
{
 80004a4:	b430      	push	{r4, r5}
  if((stream_baseaddress <= ((uint32_t)BDMA_Channel7) ) && \
 80004a6:	d918      	bls.n	80004da <DMA_CalcDMAMUXChannelBaseAndMask+0x3e>
    hdma->DMAmuxChannelStatusMask = 1U << stream_number;
  }
  else
  {
    /*DMA1/DMA2 Streams are connected to DMAMUX1 channels*/
    stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80004a8:	b2da      	uxtb	r2, r3
 80004aa:	4c16      	ldr	r4, [pc, #88]	; (8000504 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)

    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80004ac:	4916      	ldr	r1, [pc, #88]	; (8000508 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
    stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80004ae:	3a10      	subs	r2, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80004b0:	4419      	add	r1, r3
    stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80004b2:	fba4 2302 	umull	r2, r3, r4, r2
     (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80004b6:	4a15      	ldr	r2, [pc, #84]	; (800050c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80004b8:	29a8      	cmp	r1, #168	; 0xa8
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1U << stream_number;
 80004ba:	f04f 0101 	mov.w	r1, #1
    stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80004be:	ea4f 1313 	mov.w	r3, r3, lsr #4
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80004c2:	4c13      	ldr	r4, [pc, #76]	; (8000510 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
      stream_number += 8U;
 80004c4:	bf98      	it	ls
 80004c6:	3308      	addls	r3, #8
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80004c8:	6644      	str	r4, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80004ca:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1U << stream_number;
 80004cc:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80004d0:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1U << stream_number;
 80004d2:	6683      	str	r3, [r0, #104]	; 0x68
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80004d4:	6602      	str	r2, [r0, #96]	; 0x60
  }
}
 80004d6:	bc30      	pop	{r4, r5}
 80004d8:	4770      	bx	lr
    stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	4d0d      	ldr	r5, [pc, #52]	; (8000514 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80004de:	4a0e      	ldr	r2, [pc, #56]	; (8000518 <DMA_CalcDMAMUXChannelBaseAndMask+0x7c>)
    hdma->DMAmuxChannelStatusMask = 1U << stream_number;
 80004e0:	2101      	movs	r1, #1
    stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80004e2:	3b08      	subs	r3, #8
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80004e4:	4c0d      	ldr	r4, [pc, #52]	; (800051c <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
    stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80004e6:	fba5 5303 	umull	r5, r3, r5, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80004ea:	6644      	str	r4, [r0, #100]	; 0x64
    stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80004ec:	091b      	lsrs	r3, r3, #4
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80004ee:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1U << stream_number;
 80004f0:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80004f4:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1U << stream_number;
 80004f6:	6683      	str	r3, [r0, #104]	; 0x68
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80004f8:	6602      	str	r2, [r0, #96]	; 0x60
}
 80004fa:	bc30      	pop	{r4, r5}
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	a7fdabf8 	.word	0xa7fdabf8
 8000504:	aaaaaaab 	.word	0xaaaaaaab
 8000508:	bffdfbf0 	.word	0xbffdfbf0
 800050c:	10008200 	.word	0x10008200
 8000510:	40020880 	.word	0x40020880
 8000514:	cccccccd 	.word	0xcccccccd
 8000518:	16009600 	.word	0x16009600
 800051c:	58025880 	.word	0x58025880

08000520 <HAL_DMA_Init>:
{
 8000520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000522:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000524:	f7ff ff1c 	bl	8000360 <HAL_GetTick>
  if(hdma == NULL)
 8000528:	2c00      	cmp	r4, #0
 800052a:	f000 80f2 	beq.w	8000712 <HAL_DMA_Init+0x1f2>
  if(IS_D2_DMA_INSTANCE(hdma) != RESET) /*DMA2/DMA1 stream , D2 domain*/
 800052e:	6823      	ldr	r3, [r4, #0]
 8000530:	4a8b      	ldr	r2, [pc, #556]	; (8000760 <HAL_DMA_Init+0x240>)
 8000532:	441a      	add	r2, r3
 8000534:	f5b2 6f95 	cmp.w	r2, #1192	; 0x4a8
 8000538:	d858      	bhi.n	80005ec <HAL_DMA_Init+0xcc>
    hdma->State = HAL_DMA_STATE_BUSY;
 800053a:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 800053c:	2100      	movs	r1, #0
 800053e:	4605      	mov	r5, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 8000540:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8000544:	681a      	ldr	r2, [r3, #0]
    __HAL_UNLOCK(hdma);
 8000546:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 800054a:	f022 0201 	bic.w	r2, r2, #1
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	e006      	b.n	8000560 <HAL_DMA_Init+0x40>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000552:	f7ff ff05 	bl	8000360 <HAL_GetTick>
 8000556:	1b40      	subs	r0, r0, r5
 8000558:	2805      	cmp	r0, #5
 800055a:	f200 8097 	bhi.w	800068c <HAL_DMA_Init+0x16c>
 800055e:	6823      	ldr	r3, [r4, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != RESET)
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	07d1      	lsls	r1, r2, #31
 8000564:	d4f5      	bmi.n	8000552 <HAL_DMA_Init+0x32>
    registerValue |=  hdma->Init.Direction           |
 8000566:	68e1      	ldr	r1, [r4, #12]
 8000568:	68a2      	ldr	r2, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800056a:	6920      	ldr	r0, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
 800056c:	430a      	orrs	r2, r1
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800056e:	6961      	ldr	r1, [r4, #20]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000570:	69a6      	ldr	r6, [r4, #24]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000572:	4302      	orrs	r2, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000574:	69e5      	ldr	r5, [r4, #28]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000576:	4f7b      	ldr	r7, [pc, #492]	; (8000764 <HAL_DMA_Init+0x244>)
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000578:	430a      	orrs	r2, r1
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800057a:	6819      	ldr	r1, [r3, #0]
            hdma->Init.Mode                | hdma->Init.Priority;
 800057c:	6a20      	ldr	r0, [r4, #32]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800057e:	4332      	orrs	r2, r6
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000580:	400f      	ands	r7, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000582:	6a61      	ldr	r1, [r4, #36]	; 0x24
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000584:	432a      	orrs	r2, r5
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000586:	2904      	cmp	r1, #4
            hdma->Init.Mode                | hdma->Init.Priority;
 8000588:	ea42 0200 	orr.w	r2, r2, r0
    registerValue |=  hdma->Init.Direction           |
 800058c:	ea42 0207 	orr.w	r2, r2, r7
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000590:	f000 8085 	beq.w	800069e <HAL_DMA_Init+0x17e>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8000594:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8000596:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000598:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 800059c:	4311      	orrs	r1, r2
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800059e:	b2da      	uxtb	r2, r3
 80005a0:	4d71      	ldr	r5, [pc, #452]	; (8000768 <HAL_DMA_Init+0x248>)
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80005a2:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80005a4:	3a10      	subs	r2, #16
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80005a6:	4871      	ldr	r0, [pc, #452]	; (800076c <HAL_DMA_Init+0x24c>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80005a8:	fba5 1202 	umull	r1, r2, r5, r2
 80005ac:	0912      	lsrs	r2, r2, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80005ae:	5c81      	ldrb	r1, [r0, r2]
  if (stream_number > 3U)
 80005b0:	2a03      	cmp	r2, #3
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80005b2:	4a6f      	ldr	r2, [pc, #444]	; (8000770 <HAL_DMA_Init+0x250>)
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80005b4:	4620      	mov	r0, r4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80005b6:	65e1      	str	r1, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80005b8:	ea02 0203 	and.w	r2, r2, r3
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80005bc:	f04f 033f 	mov.w	r3, #63	; 0x3f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80005c0:	bf88      	it	hi
 80005c2:	3204      	addhi	r2, #4
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80005c4:	408b      	lsls	r3, r1
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80005c6:	65a2      	str	r2, [r4, #88]	; 0x58
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80005c8:	6093      	str	r3, [r2, #8]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80005ca:	f7ff ff67 	bl	800049c <DMA_CalcDMAMUXChannelBaseAndMask>
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80005ce:	68a3      	ldr	r3, [r4, #8]
 80005d0:	2b80      	cmp	r3, #128	; 0x80
 80005d2:	d142      	bne.n	800065a <HAL_DMA_Init+0x13a>
     hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80005d4:	2300      	movs	r3, #0
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80005d6:	6e20      	ldr	r0, [r4, #96]	; 0x60
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80005d8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80005da:	6ea1      	ldr	r1, [r4, #104]	; 0x68
     hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80005dc:	6063      	str	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80005de:	6003      	str	r3, [r0, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80005e0:	6051      	str	r1, [r2, #4]
    hdma->DMAmuxRequestGen = 0U;
 80005e2:	2300      	movs	r3, #0
 80005e4:	66e3      	str	r3, [r4, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 80005e6:	6723      	str	r3, [r4, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80005e8:	6763      	str	r3, [r4, #116]	; 0x74
 80005ea:	e049      	b.n	8000680 <HAL_DMA_Init+0x160>
  else if(IS_D3_DMA_INSTANCE(hdma) != RESET) /*<BDMA channel , D3 domain*/
 80005ec:	4961      	ldr	r1, [pc, #388]	; (8000774 <HAL_DMA_Init+0x254>)
 80005ee:	4419      	add	r1, r3
 80005f0:	298c      	cmp	r1, #140	; 0x8c
 80005f2:	d876      	bhi.n	80006e2 <HAL_DMA_Init+0x1c2>
    hdma->State = HAL_DMA_STATE_BUSY;
 80005f4:	2002      	movs	r0, #2
    registerValue |=  D2_TO_D3_DMA_DIRECTION(hdma->Init.Direction)            |
 80005f6:	68a2      	ldr	r2, [r4, #8]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE  | BDMA_CCR_PSIZE  | \
 80005f8:	4f5f      	ldr	r7, [pc, #380]	; (8000778 <HAL_DMA_Init+0x258>)
    __HAL_UNLOCK(hdma);
 80005fa:	2500      	movs	r5, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 80005fc:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    registerValue |=  D2_TO_D3_DMA_DIRECTION(hdma->Init.Direction)            |
 8000600:	2a40      	cmp	r2, #64	; 0x40
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8000602:	6818      	ldr	r0, [r3, #0]
    __HAL_UNLOCK(hdma);
 8000604:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE  | BDMA_CCR_PSIZE  | \
 8000608:	ea07 0700 	and.w	r7, r7, r0
    registerValue |=  D2_TO_D3_DMA_DIRECTION(hdma->Init.Direction)            |
 800060c:	d045      	beq.n	800069a <HAL_DMA_Init+0x17a>
 800060e:	2a80      	cmp	r2, #128	; 0x80
 8000610:	bf08      	it	eq
 8000612:	f44f 4580 	moveq.w	r5, #16384	; 0x4000
                      D2_TO_D3_DMA_MEMORY_INC(hdma->Init.MemInc)              |
 8000616:	6922      	ldr	r2, [r4, #16]
                      D2_TO_D3_DMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8000618:	68e0      	ldr	r0, [r4, #12]
                      D2_TO_D3_DMA_MEMORY_INC(hdma->Init.MemInc)              |
 800061a:	08d2      	lsrs	r2, r2, #3
                      D2_TO_D3_DMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800061c:	6966      	ldr	r6, [r4, #20]
 800061e:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      D2_TO_D3_DMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8000622:	69a0      	ldr	r0, [r4, #24]
 8000624:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      D2_TO_D3_DMA_PRIORITY(hdma->Init.Priority);
 8000628:	6a26      	ldr	r6, [r4, #32]
 800062a:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      D2_TO_D3_DMA_MODE(hdma->Init.Mode)                      |
 800062e:	69e0      	ldr	r0, [r4, #28]
 8000630:	ea42 1216 	orr.w	r2, r2, r6, lsr #4
    hdma->StreamIndex = (((uint32_t)hdma->Instance - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8000634:	4e51      	ldr	r6, [pc, #324]	; (800077c <HAL_DMA_Init+0x25c>)
                      D2_TO_D3_DMA_MODE(hdma->Init.Mode)                      |
 8000636:	08c0      	lsrs	r0, r0, #3
 8000638:	433a      	orrs	r2, r7
    hdma->StreamIndex = (((uint32_t)hdma->Instance - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800063a:	fba6 6101 	umull	r6, r1, r6, r1
                      D2_TO_D3_DMA_MODE(hdma->Init.Mode)                      |
 800063e:	f000 0020 	and.w	r0, r0, #32
    hdma->StreamIndex = (((uint32_t)hdma->Instance - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8000642:	0909      	lsrs	r1, r1, #4
 8000644:	4302      	orrs	r2, r0
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000646:	4620      	mov	r0, r4
    hdma->StreamIndex = (((uint32_t)hdma->Instance - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8000648:	0089      	lsls	r1, r1, #2
    registerValue |=  D2_TO_D3_DMA_DIRECTION(hdma->Init.Direction)            |
 800064a:	432a      	orrs	r2, r5
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800064c:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)hdma->Instance - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800064e:	65e1      	str	r1, [r4, #92]	; 0x5c
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000650:	f7ff ff24 	bl	800049c <DMA_CalcDMAMUXChannelBaseAndMask>
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000654:	68a3      	ldr	r3, [r4, #8]
 8000656:	2b80      	cmp	r3, #128	; 0x80
 8000658:	d0bc      	beq.n	80005d4 <HAL_DMA_Init+0xb4>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800065a:	6863      	ldr	r3, [r4, #4]
 800065c:	6e25      	ldr	r5, [r4, #96]	; 0x60
 800065e:	b2da      	uxtb	r2, r3
  if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8000660:	3b01      	subs	r3, #1
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000662:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8000664:	6ea0      	ldr	r0, [r4, #104]	; 0x68
  if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8000666:	2b07      	cmp	r3, #7
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000668:	602a      	str	r2, [r5, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800066a:	6048      	str	r0, [r1, #4]
  if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800066c:	d8b9      	bhi.n	80005e2 <HAL_DMA_Init+0xc2>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_baseaddress = (uint32_t)hdma->Instance;
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800066e:	1e50      	subs	r0, r2, #1
 8000670:	2807      	cmp	r0, #7
 8000672:	d93d      	bls.n	80006f0 <HAL_DMA_Init+0x1d0>
 8000674:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8000676:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8000678:	6f22      	ldr	r2, [r4, #112]	; 0x70
     hdma->DMAmuxRequestGen->RGCR = 0U;
 800067a:	2100      	movs	r1, #0
 800067c:	6019      	str	r1, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800067e:	6050      	str	r0, [r2, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000680:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000682:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000684:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000686:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 800068a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800068c:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 800068e:	2303      	movs	r3, #3
        return HAL_ERROR;
 8000690:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000692:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8000694:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR;
 8000698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    registerValue |=  D2_TO_D3_DMA_DIRECTION(hdma->Init.Direction)            |
 800069a:	2510      	movs	r5, #16
 800069c:	e7bb      	b.n	8000616 <HAL_DMA_Init+0xf6>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800069e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80006a0:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 80006a2:	6aa7      	ldr	r7, [r4, #40]	; 0x28
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80006a4:	ea45 0001 	orr.w	r0, r5, r1
      registerValue |= hdma->Init.FIFOThreshold;
 80006a8:	f047 0104 	orr.w	r1, r7, #4
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80006ac:	4302      	orrs	r2, r0
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80006ae:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80006b0:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80006b2:	f022 0207 	bic.w	r2, r2, #7
      registerValue |= hdma->Init.FIFOThreshold;
 80006b6:	4311      	orrs	r1, r2
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80006b8:	2d00      	cmp	r5, #0
 80006ba:	f43f af70 	beq.w	800059e <HAL_DMA_Init+0x7e>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80006be:	2e00      	cmp	r6, #0
 80006c0:	d131      	bne.n	8000726 <HAL_DMA_Init+0x206>
    switch (hdma->Init.FIFOThreshold)
 80006c2:	2f01      	cmp	r7, #1
 80006c4:	d038      	beq.n	8000738 <HAL_DMA_Init+0x218>
 80006c6:	d302      	bcc.n	80006ce <HAL_DMA_Init+0x1ae>
 80006c8:	2f02      	cmp	r7, #2
 80006ca:	f47f af68 	bne.w	800059e <HAL_DMA_Init+0x7e>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80006ce:	01ea      	lsls	r2, r5, #7
 80006d0:	f57f af65 	bpl.w	800059e <HAL_DMA_Init+0x7e>
          hdma->State = HAL_DMA_STATE_READY;
 80006d4:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80006d6:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 80006d8:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80006da:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 80006dc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80006e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80006e2:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 80006e4:	2303      	movs	r3, #3
    return HAL_ERROR;
 80006e6:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80006e8:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80006ea:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_ERROR;
 80006ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  {
    if((stream_baseaddress <= ((uint32_t)BDMA_Channel7) ) && \
 80006f0:	6821      	ldr	r1, [r4, #0]
 80006f2:	4b20      	ldr	r3, [pc, #128]	; (8000774 <HAL_DMA_Init+0x254>)
 80006f4:	440b      	add	r3, r1
 80006f6:	2b8c      	cmp	r3, #140	; 0x8c
 80006f8:	d80d      	bhi.n	8000716 <HAL_DMA_Init+0x1f6>
      (stream_baseaddress >= ((uint32_t)BDMA_Channel0)))
    {
      /*BDMA Channels are connected to DMAMUX2 request generator blocks*/
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80006fa:	4b21      	ldr	r3, [pc, #132]	; (8000780 <HAL_DMA_Init+0x260>)

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80006fc:	4921      	ldr	r1, [pc, #132]	; (8000784 <HAL_DMA_Init+0x264>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80006fe:	4413      	add	r3, r2
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8000700:	460a      	mov	r2, r1
 8000702:	6721      	str	r1, [r4, #112]	; 0x70
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8000704:	009b      	lsls	r3, r3, #2
 8000706:	66e3      	str	r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
    }

    hdma->DMAmuxRequestGenStatusMask = 1U << (request - 1U);
 8000708:	2101      	movs	r1, #1
 800070a:	4081      	lsls	r1, r0
 800070c:	4608      	mov	r0, r1
 800070e:	6761      	str	r1, [r4, #116]	; 0x74
 8000710:	e7b3      	b.n	800067a <HAL_DMA_Init+0x15a>
    return HAL_ERROR;
 8000712:	2001      	movs	r0, #1
 8000714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8000716:	4b1c      	ldr	r3, [pc, #112]	; (8000788 <HAL_DMA_Init+0x268>)
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8000718:	491c      	ldr	r1, [pc, #112]	; (800078c <HAL_DMA_Init+0x26c>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800071a:	4413      	add	r3, r2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800071c:	6721      	str	r1, [r4, #112]	; 0x70
 800071e:	460a      	mov	r2, r1
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8000720:	009b      	lsls	r3, r3, #2
 8000722:	66e3      	str	r3, [r4, #108]	; 0x6c
 8000724:	e7f0      	b.n	8000708 <HAL_DMA_Init+0x1e8>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000726:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 800072a:	d00a      	beq.n	8000742 <HAL_DMA_Init+0x222>
    switch (hdma->Init.FIFOThreshold)
 800072c:	2f02      	cmp	r7, #2
 800072e:	d9d1      	bls.n	80006d4 <HAL_DMA_Init+0x1b4>
 8000730:	2f03      	cmp	r7, #3
 8000732:	f47f af34 	bne.w	800059e <HAL_DMA_Init+0x7e>
 8000736:	e7ca      	b.n	80006ce <HAL_DMA_Init+0x1ae>
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000738:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 800073c:	f47f af2f 	bne.w	800059e <HAL_DMA_Init+0x7e>
 8000740:	e7c8      	b.n	80006d4 <HAL_DMA_Init+0x1b4>
    switch (hdma->Init.FIFOThreshold)
 8000742:	2f03      	cmp	r7, #3
 8000744:	f63f af2b 	bhi.w	800059e <HAL_DMA_Init+0x7e>
 8000748:	a201      	add	r2, pc, #4	; (adr r2, 8000750 <HAL_DMA_Init+0x230>)
 800074a:	f852 f027 	ldr.w	pc, [r2, r7, lsl #2]
 800074e:	bf00      	nop
 8000750:	080006d5 	.word	0x080006d5
 8000754:	080006cf 	.word	0x080006cf
 8000758:	080006d5 	.word	0x080006d5
 800075c:	08000739 	.word	0x08000739
 8000760:	bffdfff0 	.word	0xbffdfff0
 8000764:	fe10803f 	.word	0xfe10803f
 8000768:	aaaaaaab 	.word	0xaaaaaaab
 800076c:	08004200 	.word	0x08004200
 8000770:	fffffc00 	.word	0xfffffc00
 8000774:	a7fdabf8 	.word	0xa7fdabf8
 8000778:	ffff800f 	.word	0xffff800f
 800077c:	cccccccd 	.word	0xcccccccd
 8000780:	1600963f 	.word	0x1600963f
 8000784:	58025940 	.word	0x58025940
 8000788:	1000823f 	.word	0x1000823f
 800078c:	40020940 	.word	0x40020940

08000790 <HAL_DMA_Abort>:
{
 8000790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000792:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000794:	f7ff fde4 	bl	8000360 <HAL_GetTick>
  if(hdma == NULL)
 8000798:	2c00      	cmp	r4, #0
 800079a:	d059      	beq.n	8000850 <HAL_DMA_Abort+0xc0>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800079c:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80007a0:	2b02      	cmp	r3, #2
 80007a2:	d006      	beq.n	80007b2 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80007a4:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 80007a6:	2300      	movs	r3, #0
    return HAL_ERROR;
 80007a8:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80007aa:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80007ac:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 80007b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(IS_D2_DMA_INSTANCE(hdma) != RESET) /* D2 Domain DMA : DMA1 or DMA2*/
 80007b2:	6825      	ldr	r5, [r4, #0]
 80007b4:	4606      	mov	r6, r0
 80007b6:	4b2a      	ldr	r3, [pc, #168]	; (8000860 <HAL_DMA_Abort+0xd0>)
 80007b8:	442b      	add	r3, r5
 80007ba:	f5b3 6f95 	cmp.w	r3, #1192	; 0x4a8
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80007be:	682b      	ldr	r3, [r5, #0]
    if(IS_D2_DMA_INSTANCE(hdma) != RESET) /* D2 Domain DMA : DMA1 or DMA2*/
 80007c0:	d932      	bls.n	8000828 <HAL_DMA_Abort+0x98>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80007c2:	f023 030e 	bic.w	r3, r3, #14
  DMA_Base_Registers *regs = NULL;
 80007c6:	2700      	movs	r7, #0
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80007c8:	6e22      	ldr	r2, [r4, #96]	; 0x60
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80007ca:	602b      	str	r3, [r5, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80007cc:	6813      	ldr	r3, [r2, #0]
 80007ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80007d2:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80007d4:	682b      	ldr	r3, [r5, #0]
 80007d6:	f023 0301 	bic.w	r3, r3, #1
 80007da:	602b      	str	r3, [r5, #0]
 80007dc:	e004      	b.n	80007e8 <HAL_DMA_Abort+0x58>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80007de:	f7ff fdbf 	bl	8000360 <HAL_GetTick>
 80007e2:	1b80      	subs	r0, r0, r6
 80007e4:	2805      	cmp	r0, #5
 80007e6:	d829      	bhi.n	800083c <HAL_DMA_Abort+0xac>
    while(((*enableRegister) & DMA_SxCR_EN) != RESET)
 80007e8:	682b      	ldr	r3, [r5, #0]
 80007ea:	07db      	lsls	r3, r3, #31
 80007ec:	d4f7      	bmi.n	80007de <HAL_DMA_Abort+0x4e>
    if(IS_D2_DMA_INSTANCE(hdma) != RESET) /* D2 Domain DMA : DMA1 or DMA2*/
 80007ee:	6822      	ldr	r2, [r4, #0]
 80007f0:	4b1b      	ldr	r3, [pc, #108]	; (8000860 <HAL_DMA_Abort+0xd0>)
 80007f2:	4413      	add	r3, r2
 80007f4:	f5b3 6f95 	cmp.w	r3, #1192	; 0x4a8
 80007f8:	d82c      	bhi.n	8000854 <HAL_DMA_Abort+0xc4>
      regs->IFCR = 0x3FU << hdma->StreamIndex;
 80007fa:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80007fc:	233f      	movs	r3, #63	; 0x3f
 80007fe:	4093      	lsls	r3, r2
 8000800:	60bb      	str	r3, [r7, #8]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000802:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000804:	6ea1      	ldr	r1, [r4, #104]	; 0x68
    if(hdma->DMAmuxRequestGen != 0U)
 8000806:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000808:	6051      	str	r1, [r2, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 800080a:	b133      	cbz	r3, 800081a <HAL_DMA_Abort+0x8a>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800080c:	681a      	ldr	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800080e:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8000810:	6f60      	ldr	r0, [r4, #116]	; 0x74
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000812:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000816:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000818:	6048      	str	r0, [r1, #4]
    __HAL_UNLOCK(hdma);
 800081a:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 800081c:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 800081e:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8000822:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8000828:	f023 031e 	bic.w	r3, r3, #30
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800082c:	6e22      	ldr	r2, [r4, #96]	; 0x60
      regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800082e:	6da7      	ldr	r7, [r4, #88]	; 0x58
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8000830:	602b      	str	r3, [r5, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8000832:	696b      	ldr	r3, [r5, #20]
 8000834:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000838:	616b      	str	r3, [r5, #20]
 800083a:	e7c7      	b.n	80007cc <HAL_DMA_Abort+0x3c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800083c:	2120      	movs	r1, #32
        __HAL_UNLOCK(hdma);
 800083e:	2200      	movs	r2, #0
        hdma->State = HAL_DMA_STATE_ERROR;
 8000840:	2303      	movs	r3, #3
        return HAL_ERROR;
 8000842:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000844:	6561      	str	r1, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8000846:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
 800084a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR;
 800084e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8000850:	2001      	movs	r0, #1
}
 8000852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      BDMA->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex));
 8000854:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8000856:	2301      	movs	r3, #1
 8000858:	4a02      	ldr	r2, [pc, #8]	; (8000864 <HAL_DMA_Abort+0xd4>)
 800085a:	408b      	lsls	r3, r1
 800085c:	6053      	str	r3, [r2, #4]
 800085e:	e7d0      	b.n	8000802 <HAL_DMA_Abort+0x72>
 8000860:	bffdfff0 	.word	0xbffdfff0
 8000864:	58025400 	.word	0x58025400

08000868 <HAL_DMA_Abort_IT>:
{
 8000868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hdma == NULL)
 800086a:	2800      	cmp	r0, #0
 800086c:	d041      	beq.n	80008f2 <HAL_DMA_Abort_IT+0x8a>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800086e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000872:	2b02      	cmp	r3, #2
 8000874:	d004      	beq.n	8000880 <HAL_DMA_Abort_IT+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000876:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 8000878:	2401      	movs	r4, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800087a:	6542      	str	r2, [r0, #84]	; 0x54
}
 800087c:	4620      	mov	r0, r4
 800087e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(IS_D2_DMA_INSTANCE(hdma) != RESET) /* D2 Domain DMA : DMA1 or DMA2*/
 8000880:	6802      	ldr	r2, [r0, #0]
 8000882:	4b1e      	ldr	r3, [pc, #120]	; (80008fc <HAL_DMA_Abort_IT+0x94>)
 8000884:	4413      	add	r3, r2
 8000886:	f5b3 6f95 	cmp.w	r3, #1192	; 0x4a8
 800088a:	d928      	bls.n	80008de <HAL_DMA_Abort_IT+0x76>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800088c:	6811      	ldr	r1, [r2, #0]
      BDMA->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex));
 800088e:	2301      	movs	r3, #1
 8000890:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8000892:	f021 010e 	bic.w	r1, r1, #14
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000896:	6e05      	ldr	r5, [r0, #96]	; 0x60
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000898:	6e46      	ldr	r6, [r0, #100]	; 0x64
      BDMA->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex));
 800089a:	40a3      	lsls	r3, r4
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800089c:	6011      	str	r1, [r2, #0]
      __HAL_DMA_DISABLE(hdma);
 800089e:	6811      	ldr	r1, [r2, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 80008a0:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
      __HAL_DMA_DISABLE(hdma);
 80008a2:	f021 0101 	bic.w	r1, r1, #1
      BDMA->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex));
 80008a6:	4f16      	ldr	r7, [pc, #88]	; (8000900 <HAL_DMA_Abort_IT+0x98>)
      __HAL_DMA_DISABLE(hdma);
 80008a8:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80008aa:	682a      	ldr	r2, [r5, #0]
 80008ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80008b0:	602a      	str	r2, [r5, #0]
      BDMA->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex));
 80008b2:	607b      	str	r3, [r7, #4]
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80008b4:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80008b6:	6073      	str	r3, [r6, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 80008b8:	b134      	cbz	r4, 80008c8 <HAL_DMA_Abort_IT+0x60>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80008ba:	6823      	ldr	r3, [r4, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80008bc:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80008be:	6f41      	ldr	r1, [r0, #116]	; 0x74
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80008c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80008c4:	6023      	str	r3, [r4, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80008c6:	6051      	str	r1, [r2, #4]
      __HAL_UNLOCK(hdma);
 80008c8:	2400      	movs	r4, #0
      hdma->State = HAL_DMA_STATE_READY;
 80008ca:	2201      	movs	r2, #1
      if(hdma->XferAbortCallback != NULL)
 80008cc:	6d03      	ldr	r3, [r0, #80]	; 0x50
      __HAL_UNLOCK(hdma);
 80008ce:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80008d2:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 80008d6:	b17b      	cbz	r3, 80008f8 <HAL_DMA_Abort_IT+0x90>
        hdma->XferAbortCallback(hdma);
 80008d8:	4798      	blx	r3
}
 80008da:	4620      	mov	r0, r4
 80008dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->State = HAL_DMA_STATE_ABORT;
 80008de:	2104      	movs	r1, #4
  return HAL_OK;
 80008e0:	2400      	movs	r4, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 80008e2:	f880 1035 	strb.w	r1, [r0, #53]	; 0x35
}
 80008e6:	4620      	mov	r0, r4
      __HAL_DMA_DISABLE(hdma);
 80008e8:	6811      	ldr	r1, [r2, #0]
 80008ea:	f021 0101 	bic.w	r1, r1, #1
 80008ee:	6011      	str	r1, [r2, #0]
}
 80008f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80008f2:	2401      	movs	r4, #1
}
 80008f4:	4620      	mov	r0, r4
 80008f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 80008f8:	461c      	mov	r4, r3
 80008fa:	e7bf      	b.n	800087c <HAL_DMA_Abort_IT+0x14>
 80008fc:	bffdfff0 	.word	0xbffdfff0
 8000900:	58025400 	.word	0x58025400

08000904 <HAL_DMA_IRQHandler>:
  if(IS_D2_DMA_INSTANCE(hdma) != RESET)  /*D2 domain DMA : DMA1 or DMA2*/
 8000904:	4a92      	ldr	r2, [pc, #584]	; (8000b50 <HAL_DMA_IRQHandler+0x24c>)
  __IO uint32_t count = 0U;
 8000906:	2100      	movs	r1, #0
  if(IS_D2_DMA_INSTANCE(hdma) != RESET)  /*D2 domain DMA : DMA1 or DMA2*/
 8000908:	6803      	ldr	r3, [r0, #0]
 800090a:	441a      	add	r2, r3
{
 800090c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(IS_D2_DMA_INSTANCE(hdma) != RESET)  /*D2 domain DMA : DMA1 or DMA2*/
 800090e:	f5b2 6f95 	cmp.w	r2, #1192	; 0x4a8
{
 8000912:	b083      	sub	sp, #12
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000914:	6d86      	ldr	r6, [r0, #88]	; 0x58
{
 8000916:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8000918:	9101      	str	r1, [sp, #4]
  tmpisr = regs->ISR;
 800091a:	6835      	ldr	r5, [r6, #0]
  if(IS_D2_DMA_INSTANCE(hdma) != RESET)  /*D2 domain DMA : DMA1 or DMA2*/
 800091c:	d85d      	bhi.n	80009da <HAL_DMA_IRQHandler+0xd6>
    if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800091e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8000920:	2108      	movs	r1, #8
  uint32_t timeout = SystemCoreClock / 9600U;
 8000922:	488c      	ldr	r0, [pc, #560]	; (8000b54 <HAL_DMA_IRQHandler+0x250>)
    if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000924:	4091      	lsls	r1, r2
  uint32_t timeout = SystemCoreClock / 9600U;
 8000926:	6807      	ldr	r7, [r0, #0]
    if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000928:	420d      	tst	r5, r1
 800092a:	d00b      	beq.n	8000944 <HAL_DMA_IRQHandler+0x40>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800092c:	6818      	ldr	r0, [r3, #0]
 800092e:	0740      	lsls	r0, r0, #29
 8000930:	d508      	bpl.n	8000944 <HAL_DMA_IRQHandler+0x40>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8000932:	6818      	ldr	r0, [r3, #0]
 8000934:	f020 0004 	bic.w	r0, r0, #4
 8000938:	6018      	str	r0, [r3, #0]
        regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800093a:	60b1      	str	r1, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800093c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800093e:	f041 0101 	orr.w	r1, r1, #1
 8000942:	6561      	str	r1, [r4, #84]	; 0x54
    if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000944:	4984      	ldr	r1, [pc, #528]	; (8000b58 <HAL_DMA_IRQHandler+0x254>)
 8000946:	4091      	lsls	r1, r2
 8000948:	420d      	tst	r5, r1
 800094a:	d007      	beq.n	800095c <HAL_DMA_IRQHandler+0x58>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800094c:	6958      	ldr	r0, [r3, #20]
 800094e:	0600      	lsls	r0, r0, #24
 8000950:	d504      	bpl.n	800095c <HAL_DMA_IRQHandler+0x58>
        regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000952:	60b1      	str	r1, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000954:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8000956:	f041 0102 	orr.w	r1, r1, #2
 800095a:	6561      	str	r1, [r4, #84]	; 0x54
    if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800095c:	497f      	ldr	r1, [pc, #508]	; (8000b5c <HAL_DMA_IRQHandler+0x258>)
 800095e:	4091      	lsls	r1, r2
 8000960:	420d      	tst	r5, r1
 8000962:	d007      	beq.n	8000974 <HAL_DMA_IRQHandler+0x70>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000964:	6818      	ldr	r0, [r3, #0]
 8000966:	0780      	lsls	r0, r0, #30
 8000968:	d504      	bpl.n	8000974 <HAL_DMA_IRQHandler+0x70>
        regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800096a:	60b1      	str	r1, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800096c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800096e:	f041 0104 	orr.w	r1, r1, #4
 8000972:	6561      	str	r1, [r4, #84]	; 0x54
    if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000974:	2110      	movs	r1, #16
 8000976:	4091      	lsls	r1, r2
 8000978:	420d      	tst	r5, r1
 800097a:	d14f      	bne.n	8000a1c <HAL_DMA_IRQHandler+0x118>
    if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800097c:	2120      	movs	r1, #32
 800097e:	4091      	lsls	r1, r2
 8000980:	420d      	tst	r5, r1
 8000982:	f040 80ce 	bne.w	8000b22 <HAL_DMA_IRQHandler+0x21e>
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000986:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000988:	b32b      	cbz	r3, 80009d6 <HAL_DMA_IRQHandler+0xd2>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800098a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800098c:	07dd      	lsls	r5, r3, #31
 800098e:	d51e      	bpl.n	80009ce <HAL_DMA_IRQHandler+0xca>
        __HAL_DMA_DISABLE(hdma);
 8000990:	6821      	ldr	r1, [r4, #0]
        hdma->State = HAL_DMA_STATE_ABORT;
 8000992:	2204      	movs	r2, #4
 8000994:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 8000998:	680b      	ldr	r3, [r1, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800099a:	4a71      	ldr	r2, [pc, #452]	; (8000b60 <HAL_DMA_IRQHandler+0x25c>)
        __HAL_DMA_DISABLE(hdma);
 800099c:	f023 0301 	bic.w	r3, r3, #1
 80009a0:	600b      	str	r3, [r1, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80009a2:	fba2 3207 	umull	r3, r2, r2, r7
 80009a6:	0a92      	lsrs	r2, r2, #10
 80009a8:	e002      	b.n	80009b0 <HAL_DMA_IRQHandler+0xac>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != RESET);
 80009aa:	680b      	ldr	r3, [r1, #0]
 80009ac:	07d8      	lsls	r0, r3, #31
 80009ae:	d504      	bpl.n	80009ba <HAL_DMA_IRQHandler+0xb6>
          if (++count > timeout)
 80009b0:	9b01      	ldr	r3, [sp, #4]
 80009b2:	3301      	adds	r3, #1
 80009b4:	429a      	cmp	r2, r3
 80009b6:	9301      	str	r3, [sp, #4]
 80009b8:	d2f7      	bcs.n	80009aa <HAL_DMA_IRQHandler+0xa6>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != RESET)
 80009ba:	680b      	ldr	r3, [r1, #0]
        __HAL_UNLOCK(hdma);
 80009bc:	2200      	movs	r2, #0
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != RESET)
 80009be:	07db      	lsls	r3, r3, #31
        __HAL_UNLOCK(hdma);
 80009c0:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_ERROR;
 80009c4:	bf4c      	ite	mi
 80009c6:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 80009c8:	2301      	movpl	r3, #1
 80009ca:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      if(hdma->XferErrorCallback != NULL)
 80009ce:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80009d0:	b10b      	cbz	r3, 80009d6 <HAL_DMA_IRQHandler+0xd2>
        hdma->XferErrorCallback(hdma);
 80009d2:	4620      	mov	r0, r4
 80009d4:	4798      	blx	r3
}
 80009d6:	b003      	add	sp, #12
 80009d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(IS_D3_DMA_INSTANCE(hdma) != RESET)  /*D3 domain BDMA */
 80009da:	4a62      	ldr	r2, [pc, #392]	; (8000b64 <HAL_DMA_IRQHandler+0x260>)
 80009dc:	441a      	add	r2, r3
 80009de:	2a8c      	cmp	r2, #140	; 0x8c
 80009e0:	d8f9      	bhi.n	80009d6 <HAL_DMA_IRQHandler+0xd2>
    if ((RESET != (BDMA->ISR & (BDMA_FLAG_HT0 << hdma->StreamIndex))) && (RESET != ((*ccr_reg) & BDMA_CCR_HTIE)))
 80009e2:	4961      	ldr	r1, [pc, #388]	; (8000b68 <HAL_DMA_IRQHandler+0x264>)
 80009e4:	2004      	movs	r0, #4
 80009e6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80009e8:	680d      	ldr	r5, [r1, #0]
 80009ea:	fa00 f102 	lsl.w	r1, r0, r2
 80009ee:	420d      	tst	r5, r1
 80009f0:	d052      	beq.n	8000a98 <HAL_DMA_IRQHandler+0x194>
 80009f2:	681d      	ldr	r5, [r3, #0]
 80009f4:	076f      	lsls	r7, r5, #29
 80009f6:	d54f      	bpl.n	8000a98 <HAL_DMA_IRQHandler+0x194>
        if(((*ccr_reg) & BDMA_CCR_CIRC) == 0U)
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	0696      	lsls	r6, r2, #26
 80009fc:	d406      	bmi.n	8000a0c <HAL_DMA_IRQHandler+0x108>
          (*ccr_reg) &= ~BDMA_CCR_HTIE;
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	f022 0204 	bic.w	r2, r2, #4
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8000a08:	fa00 f101 	lsl.w	r1, r0, r1
        BDMA->IFCR  |= (BDMA_ISR_HTIF0 << hdma->StreamIndex);
 8000a0c:	4a56      	ldr	r2, [pc, #344]	; (8000b68 <HAL_DMA_IRQHandler+0x264>)
       if(hdma->XferHalfCpltCallback != NULL)
 8000a0e:	6c25      	ldr	r5, [r4, #64]	; 0x40
        BDMA->IFCR  |= (BDMA_ISR_HTIF0 << hdma->StreamIndex);
 8000a10:	6853      	ldr	r3, [r2, #4]
 8000a12:	4319      	orrs	r1, r3
 8000a14:	6051      	str	r1, [r2, #4]
       if(hdma->XferHalfCpltCallback != NULL)
 8000a16:	2d00      	cmp	r5, #0
 8000a18:	d164      	bne.n	8000ae4 <HAL_DMA_IRQHandler+0x1e0>
 8000a1a:	e7dc      	b.n	80009d6 <HAL_DMA_IRQHandler+0xd2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000a1c:	6818      	ldr	r0, [r3, #0]
 8000a1e:	0700      	lsls	r0, r0, #28
 8000a20:	d5ac      	bpl.n	800097c <HAL_DMA_IRQHandler+0x78>
        regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000a22:	60b1      	str	r1, [r6, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000a24:	6819      	ldr	r1, [r3, #0]
 8000a26:	f411 2f80 	tst.w	r1, #262144	; 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == RESET)
 8000a2a:	6819      	ldr	r1, [r3, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000a2c:	d07d      	beq.n	8000b2a <HAL_DMA_IRQHandler+0x226>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == RESET)
 8000a2e:	0308      	lsls	r0, r1, #12
 8000a30:	f100 8089 	bmi.w	8000b46 <HAL_DMA_IRQHandler+0x242>
          if(hdma->XferHalfCpltCallback != NULL)
 8000a34:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000a36:	2900      	cmp	r1, #0
 8000a38:	d0a0      	beq.n	800097c <HAL_DMA_IRQHandler+0x78>
            hdma->XferHalfCpltCallback(hdma);
 8000a3a:	4620      	mov	r0, r4
 8000a3c:	4788      	blx	r1
    if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000a3e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000a40:	2120      	movs	r1, #32
 8000a42:	4091      	lsls	r1, r2
 8000a44:	420d      	tst	r5, r1
 8000a46:	d09e      	beq.n	8000986 <HAL_DMA_IRQHandler+0x82>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000a48:	6823      	ldr	r3, [r4, #0]
 8000a4a:	4841      	ldr	r0, [pc, #260]	; (8000b50 <HAL_DMA_IRQHandler+0x24c>)
 8000a4c:	4418      	add	r0, r3
 8000a4e:	f5b0 6f95 	cmp.w	r0, #1192	; 0x4a8
 8000a52:	d966      	bls.n	8000b22 <HAL_DMA_IRQHandler+0x21e>
 8000a54:	6818      	ldr	r0, [r3, #0]
 8000a56:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8000a5a:	2800      	cmp	r0, #0
 8000a5c:	d093      	beq.n	8000986 <HAL_DMA_IRQHandler+0x82>
        regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000a5e:	60b1      	str	r1, [r6, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8000a60:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
 8000a64:	2904      	cmp	r1, #4
 8000a66:	f000 8081 	beq.w	8000b6c <HAL_DMA_IRQHandler+0x268>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	0352      	lsls	r2, r2, #13
 8000a6e:	d463      	bmi.n	8000b38 <HAL_DMA_IRQHandler+0x234>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == RESET)
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8000a76:	d108      	bne.n	8000a8a <HAL_DMA_IRQHandler+0x186>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8000a78:	6819      	ldr	r1, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8000a7a:	2001      	movs	r0, #1
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8000a7c:	f021 0110 	bic.w	r1, r1, #16
 8000a80:	6019      	str	r1, [r3, #0]
            __HAL_UNLOCK(hdma);
 8000a82:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8000a86:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
          if(hdma->XferCpltCallback != NULL)
 8000a8a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	f43f af7a 	beq.w	8000986 <HAL_DMA_IRQHandler+0x82>
            hdma->XferCpltCallback(hdma);
 8000a92:	4620      	mov	r0, r4
 8000a94:	4798      	blx	r3
 8000a96:	e776      	b.n	8000986 <HAL_DMA_IRQHandler+0x82>
    else if ((RESET != (BDMA->ISR & (BDMA_FLAG_TC0 << hdma->StreamIndex))) && (RESET != ((*ccr_reg) & BDMA_CCR_TCIE)))
 8000a98:	4933      	ldr	r1, [pc, #204]	; (8000b68 <HAL_DMA_IRQHandler+0x264>)
 8000a9a:	2002      	movs	r0, #2
 8000a9c:	680d      	ldr	r5, [r1, #0]
 8000a9e:	fa00 f102 	lsl.w	r1, r0, r2
 8000aa2:	420d      	tst	r5, r1
 8000aa4:	d122      	bne.n	8000aec <HAL_DMA_IRQHandler+0x1e8>
    else if (( RESET != (BDMA->ISR & (BDMA_FLAG_TE0 << hdma->StreamIndex))) && (RESET != ((*ccr_reg) & BDMA_CCR_TEIE)))
 8000aa6:	4830      	ldr	r0, [pc, #192]	; (8000b68 <HAL_DMA_IRQHandler+0x264>)
 8000aa8:	2108      	movs	r1, #8
 8000aaa:	6805      	ldr	r5, [r0, #0]
 8000aac:	fa01 f202 	lsl.w	r2, r1, r2
 8000ab0:	422a      	tst	r2, r5
 8000ab2:	d090      	beq.n	80009d6 <HAL_DMA_IRQHandler+0xd2>
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	0712      	lsls	r2, r2, #28
 8000ab8:	d58d      	bpl.n	80009d6 <HAL_DMA_IRQHandler+0xd2>
      (*ccr_reg) &= ~(BDMA_CCR_TEIE | BDMA_CCR_TCIE | BDMA_CCR_HTIE);
 8000aba:	6819      	ldr	r1, [r3, #0]
      BDMA->IFCR  |= (BDMA_ISR_GIF0 << hdma->StreamIndex);
 8000abc:	2201      	movs	r2, #1
      if (hdma->XferErrorCallback != NULL)
 8000abe:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
      __HAL_UNLOCK(hdma);
 8000ac0:	2600      	movs	r6, #0
      (*ccr_reg) &= ~(BDMA_CCR_TEIE | BDMA_CCR_TCIE | BDMA_CCR_HTIE);
 8000ac2:	f021 010e 	bic.w	r1, r1, #14
 8000ac6:	6019      	str	r1, [r3, #0]
      BDMA->IFCR  |= (BDMA_ISR_GIF0 << hdma->StreamIndex);
 8000ac8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8000aca:	6841      	ldr	r1, [r0, #4]
 8000acc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad0:	430b      	orrs	r3, r1
 8000ad2:	6043      	str	r3, [r0, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000ad4:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 8000ad6:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8000ada:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 8000ade:	2d00      	cmp	r5, #0
 8000ae0:	f43f af79 	beq.w	80009d6 <HAL_DMA_IRQHandler+0xd2>
        hdma->XferErrorCallback(hdma);
 8000ae4:	4620      	mov	r0, r4
 8000ae6:	47a8      	blx	r5
}
 8000ae8:	b003      	add	sp, #12
 8000aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if ((RESET != (BDMA->ISR & (BDMA_FLAG_TC0 << hdma->StreamIndex))) && (RESET != ((*ccr_reg) & BDMA_CCR_TCIE)))
 8000aec:	681d      	ldr	r5, [r3, #0]
 8000aee:	07ad      	lsls	r5, r5, #30
 8000af0:	d5d9      	bpl.n	8000aa6 <HAL_DMA_IRQHandler+0x1a2>
      if(((*ccr_reg) & BDMA_CCR_CIRC) == 0U)
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	f012 0220 	ands.w	r2, r2, #32
 8000af8:	d10b      	bne.n	8000b12 <HAL_DMA_IRQHandler+0x20e>
        (*ccr_reg) &= ~(BDMA_CCR_TEIE | BDMA_CCR_TCIE);
 8000afa:	6819      	ldr	r1, [r3, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8000afc:	2501      	movs	r5, #1
        (*ccr_reg) &= ~(BDMA_CCR_TEIE | BDMA_CCR_TCIE);
 8000afe:	f021 010a 	bic.w	r1, r1, #10
 8000b02:	6019      	str	r1, [r3, #0]
 8000b04:	6de1      	ldr	r1, [r4, #92]	; 0x5c
      __HAL_UNLOCK(hdma);
 8000b06:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
 8000b0a:	fa00 f101 	lsl.w	r1, r0, r1
        hdma->State = HAL_DMA_STATE_READY;
 8000b0e:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
      BDMA->IFCR |= (BDMA_ISR_TCIF0 << hdma->StreamIndex);
 8000b12:	4a15      	ldr	r2, [pc, #84]	; (8000b68 <HAL_DMA_IRQHandler+0x264>)
      if(hdma->XferCpltCallback != NULL)
 8000b14:	6be5      	ldr	r5, [r4, #60]	; 0x3c
      BDMA->IFCR |= (BDMA_ISR_TCIF0 << hdma->StreamIndex);
 8000b16:	6853      	ldr	r3, [r2, #4]
 8000b18:	4319      	orrs	r1, r3
 8000b1a:	6051      	str	r1, [r2, #4]
      if(hdma->XferCpltCallback != NULL)
 8000b1c:	2d00      	cmp	r5, #0
 8000b1e:	d1e1      	bne.n	8000ae4 <HAL_DMA_IRQHandler+0x1e0>
 8000b20:	e759      	b.n	80009d6 <HAL_DMA_IRQHandler+0xd2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000b22:	6818      	ldr	r0, [r3, #0]
 8000b24:	f3c0 1000 	ubfx	r0, r0, #4, #1
 8000b28:	e797      	b.n	8000a5a <HAL_DMA_IRQHandler+0x156>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == RESET)
 8000b2a:	05c9      	lsls	r1, r1, #23
 8000b2c:	d482      	bmi.n	8000a34 <HAL_DMA_IRQHandler+0x130>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8000b2e:	6819      	ldr	r1, [r3, #0]
 8000b30:	f021 0108 	bic.w	r1, r1, #8
 8000b34:	6019      	str	r1, [r3, #0]
 8000b36:	e77d      	b.n	8000a34 <HAL_DMA_IRQHandler+0x130>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == RESET)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	031e      	lsls	r6, r3, #12
 8000b3c:	d4a5      	bmi.n	8000a8a <HAL_DMA_IRQHandler+0x186>
            if(hdma->XferM1CpltCallback != NULL)
 8000b3e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d1a6      	bne.n	8000a92 <HAL_DMA_IRQHandler+0x18e>
 8000b44:	e71f      	b.n	8000986 <HAL_DMA_IRQHandler+0x82>
            if(hdma->XferM1HalfCpltCallback != NULL)
 8000b46:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8000b48:	2900      	cmp	r1, #0
 8000b4a:	f47f af76 	bne.w	8000a3a <HAL_DMA_IRQHandler+0x136>
 8000b4e:	e715      	b.n	800097c <HAL_DMA_IRQHandler+0x78>
 8000b50:	bffdfff0 	.word	0xbffdfff0
 8000b54:	20000008 	.word	0x20000008
 8000b58:	00800001 	.word	0x00800001
 8000b5c:	00800004 	.word	0x00800004
 8000b60:	1b4e81b5 	.word	0x1b4e81b5
 8000b64:	a7fdabf8 	.word	0xa7fdabf8
 8000b68:	58025400 	.word	0x58025400
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000b6c:	6819      	ldr	r1, [r3, #0]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000b6e:	6c20      	ldr	r0, [r4, #64]	; 0x40
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000b70:	f021 0116 	bic.w	r1, r1, #22
 8000b74:	6019      	str	r1, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8000b76:	6959      	ldr	r1, [r3, #20]
 8000b78:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8000b7c:	6159      	str	r1, [r3, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000b7e:	b1a0      	cbz	r0, 8000baa <HAL_DMA_IRQHandler+0x2a6>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8000b80:	6819      	ldr	r1, [r3, #0]
 8000b82:	f021 0108 	bic.w	r1, r1, #8
 8000b86:	6019      	str	r1, [r3, #0]
          regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000b88:	233f      	movs	r3, #63	; 0x3f
          __HAL_UNLOCK(hdma);
 8000b8a:	2500      	movs	r5, #0
          hdma->State = HAL_DMA_STATE_READY;
 8000b8c:	2001      	movs	r0, #1
          if(hdma->XferAbortCallback != NULL)
 8000b8e:	6d21      	ldr	r1, [r4, #80]	; 0x50
          regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000b90:	fa03 f202 	lsl.w	r2, r3, r2
 8000b94:	60b2      	str	r2, [r6, #8]
          __HAL_UNLOCK(hdma);
 8000b96:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8000b9a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
          if(hdma->XferAbortCallback != NULL)
 8000b9e:	2900      	cmp	r1, #0
 8000ba0:	f43f af19 	beq.w	80009d6 <HAL_DMA_IRQHandler+0xd2>
            hdma->XferAbortCallback(hdma);
 8000ba4:	4620      	mov	r0, r4
 8000ba6:	4788      	blx	r1
 8000ba8:	e715      	b.n	80009d6 <HAL_DMA_IRQHandler+0xd2>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000baa:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8000bac:	2900      	cmp	r1, #0
 8000bae:	d1e7      	bne.n	8000b80 <HAL_DMA_IRQHandler+0x27c>
 8000bb0:	e7ea      	b.n	8000b88 <HAL_DMA_IRQHandler+0x284>
 8000bb2:	bf00      	nop

08000bb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
     
        /* Clear EXTI line configuration */
        temp = EXTI_Ptr->IMR1;
 8000bb8:	f8df c23c 	ldr.w	ip, [pc, #572]	; 8000df8 <HAL_GPIO_Init+0x244>
{
 8000bbc:	b083      	sub	sp, #12
  for(position = 0; position < GPIO_NUMBER; position++)
 8000bbe:	2500      	movs	r5, #0
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc0:	f8df 8238 	ldr.w	r8, [pc, #568]	; 8000dfc <HAL_GPIO_Init+0x248>
 8000bc4:	f8d1 e000 	ldr.w	lr, [r1]
 8000bc8:	e003      	b.n	8000bd2 <HAL_GPIO_Init+0x1e>
  for(position = 0; position < GPIO_NUMBER; position++)
 8000bca:	3501      	adds	r5, #1
 8000bcc:	2d10      	cmp	r5, #16
 8000bce:	f000 80c2 	beq.w	8000d56 <HAL_GPIO_Init+0x1a2>
    ioposition = ((uint32_t)0x01) << position;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	40ab      	lsls	r3, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bd6:	ea03 020e 	and.w	r2, r3, lr
    if(iocurrent == ioposition)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d1f5      	bne.n	8000bca <HAL_GPIO_Init+0x16>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bde:	684e      	ldr	r6, [r1, #4]
 8000be0:	f026 0910 	bic.w	r9, r6, #16
 8000be4:	f1b9 0f02 	cmp.w	r9, #2
 8000be8:	f040 80b8 	bne.w	8000d5c <HAL_GPIO_Init+0x1a8>
        temp = GPIOx->AFR[position >> 3];
 8000bec:	ea4f 09d5 	mov.w	r9, r5, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000bf0:	f005 0a07 	and.w	sl, r5, #7
 8000bf4:	f04f 0b0f 	mov.w	fp, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000bf8:	690c      	ldr	r4, [r1, #16]
 8000bfa:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000bfe:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8000c02:	f8d9 7020 	ldr.w	r7, [r9, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000c06:	fa0b fb0a 	lsl.w	fp, fp, sl
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000c0a:	fa04 f40a 	lsl.w	r4, r4, sl
 8000c0e:	ea4f 0a45 	mov.w	sl, r5, lsl #1
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000c12:	ea27 070b 	bic.w	r7, r7, fp
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000c16:	f04f 0b03 	mov.w	fp, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000c1a:	433c      	orrs	r4, r7
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000c1c:	fa0b fb0a 	lsl.w	fp, fp, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000c20:	f006 0703 	and.w	r7, r6, #3
        GPIOx->AFR[position >> 3] = temp;
 8000c24:	f8c9 4020 	str.w	r4, [r9, #32]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000c28:	ea6f 040b 	mvn.w	r4, fp
      temp = GPIOx->MODER;
 8000c2c:	f8d0 9000 	ldr.w	r9, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000c30:	fa07 f70a 	lsl.w	r7, r7, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000c34:	ea09 0904 	and.w	r9, r9, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000c38:	ea47 0709 	orr.w	r7, r7, r9
      GPIOx->MODER = temp;
 8000c3c:	6007      	str	r7, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 8000c3e:	6887      	ldr	r7, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000c40:	f3c6 1900 	ubfx	r9, r6, #4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000c44:	ea07 0b04 	and.w	fp, r7, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8000c48:	68cf      	ldr	r7, [r1, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000c4a:	fa09 f905 	lsl.w	r9, r9, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8000c4e:	fa07 f70a 	lsl.w	r7, r7, sl
 8000c52:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->OSPEEDR = temp;
 8000c56:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000c58:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c5a:	ea27 0303 	bic.w	r3, r7, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000c5e:	ea49 0303 	orr.w	r3, r9, r3
        GPIOx->OTYPER = temp;
 8000c62:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 8000c64:	68c7      	ldr	r7, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000c66:	688b      	ldr	r3, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000c68:	403c      	ands	r4, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000c6a:	fa03 f30a 	lsl.w	r3, r3, sl
 8000c6e:	4323      	orrs	r3, r4
      GPIOx->PUPDR = temp;
 8000c70:	60c3      	str	r3, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c72:	00f3      	lsls	r3, r6, #3
 8000c74:	d5a9      	bpl.n	8000bca <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c76:	f8d8 40f4 	ldr.w	r4, [r8, #244]	; 0xf4
 8000c7a:	f025 0703 	bic.w	r7, r5, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000c7e:	f005 0303 	and.w	r3, r5, #3
 8000c82:	f04f 090f 	mov.w	r9, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c86:	f044 0402 	orr.w	r4, r4, #2
 8000c8a:	f107 47b0 	add.w	r7, r7, #1476395008	; 0x58000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000c8e:	009b      	lsls	r3, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c90:	f8c8 40f4 	str.w	r4, [r8, #244]	; 0xf4
 8000c94:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000c98:	f8d8 40f4 	ldr.w	r4, [r8, #244]	; 0xf4
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000c9c:	fa09 f903 	lsl.w	r9, r9, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca0:	f004 0402 	and.w	r4, r4, #2
 8000ca4:	9401      	str	r4, [sp, #4]
 8000ca6:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000ca8:	68bc      	ldr	r4, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000caa:	ea24 0a09 	bic.w	sl, r4, r9
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000cae:	4c4d      	ldr	r4, [pc, #308]	; (8000de4 <HAL_GPIO_Init+0x230>)
 8000cb0:	42a0      	cmp	r0, r4
 8000cb2:	d06c      	beq.n	8000d8e <HAL_GPIO_Init+0x1da>
 8000cb4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000cb8:	42a0      	cmp	r0, r4
 8000cba:	d06a      	beq.n	8000d92 <HAL_GPIO_Init+0x1de>
 8000cbc:	4c4a      	ldr	r4, [pc, #296]	; (8000de8 <HAL_GPIO_Init+0x234>)
 8000cbe:	42a0      	cmp	r0, r4
 8000cc0:	d06c      	beq.n	8000d9c <HAL_GPIO_Init+0x1e8>
 8000cc2:	4c4a      	ldr	r4, [pc, #296]	; (8000dec <HAL_GPIO_Init+0x238>)
 8000cc4:	42a0      	cmp	r0, r4
 8000cc6:	d06e      	beq.n	8000da6 <HAL_GPIO_Init+0x1f2>
 8000cc8:	4c49      	ldr	r4, [pc, #292]	; (8000df0 <HAL_GPIO_Init+0x23c>)
 8000cca:	42a0      	cmp	r0, r4
 8000ccc:	d070      	beq.n	8000db0 <HAL_GPIO_Init+0x1fc>
 8000cce:	4c49      	ldr	r4, [pc, #292]	; (8000df4 <HAL_GPIO_Init+0x240>)
 8000cd0:	42a0      	cmp	r0, r4
 8000cd2:	d072      	beq.n	8000dba <HAL_GPIO_Init+0x206>
 8000cd4:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8000e00 <HAL_GPIO_Init+0x24c>
 8000cd8:	4548      	cmp	r0, r9
 8000cda:	d073      	beq.n	8000dc4 <HAL_GPIO_Init+0x210>
 8000cdc:	f8df 9124 	ldr.w	r9, [pc, #292]	; 8000e04 <HAL_GPIO_Init+0x250>
 8000ce0:	4548      	cmp	r0, r9
 8000ce2:	d074      	beq.n	8000dce <HAL_GPIO_Init+0x21a>
 8000ce4:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8000e08 <HAL_GPIO_Init+0x254>
 8000ce8:	4548      	cmp	r0, r9
 8000cea:	d075      	beq.n	8000dd8 <HAL_GPIO_Init+0x224>
 8000cec:	f8df 911c 	ldr.w	r9, [pc, #284]	; 8000e0c <HAL_GPIO_Init+0x258>
 8000cf0:	4548      	cmp	r0, r9
 8000cf2:	bf0c      	ite	eq
 8000cf4:	f04f 0909 	moveq.w	r9, #9
 8000cf8:	f04f 090a 	movne.w	r9, #10
 8000cfc:	fa09 f303 	lsl.w	r3, r9, r3
 8000d00:	ea43 030a 	orr.w	r3, r3, sl
        temp &= ~((uint32_t)iocurrent);
 8000d04:	43d4      	mvns	r4, r2
  for(position = 0; position < GPIO_NUMBER; position++)
 8000d06:	3501      	adds	r5, #1
        SYSCFG->EXTICR[position >> 2] = temp;
 8000d08:	60bb      	str	r3, [r7, #8]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d0a:	03f7      	lsls	r7, r6, #15
        temp = EXTI_Ptr->IMR1;
 8000d0c:	f8dc 3000 	ldr.w	r3, [ip]
        {
          temp |= iocurrent;
 8000d10:	bf4c      	ite	mi
 8000d12:	4313      	orrmi	r3, r2
        temp &= ~((uint32_t)iocurrent);
 8000d14:	4023      	andpl	r3, r4
        }
        EXTI_Ptr->IMR1 = temp;

        temp = EXTI_Ptr->EMR1;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d16:	03b7      	lsls	r7, r6, #14
          temp |= iocurrent;
        }
        EXTI_Ptr->EMR1 = temp;
             
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d18:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
        EXTI_Ptr->IMR1 = temp;
 8000d1c:	f8cc 3000 	str.w	r3, [ip]
        temp = EXTI_Ptr->EMR1;
 8000d20:	f8dc 3004 	ldr.w	r3, [ip, #4]
          temp |= iocurrent;
 8000d24:	bf4c      	ite	mi
 8000d26:	4313      	orrmi	r3, r2
        temp &= ~((uint32_t)iocurrent);
 8000d28:	4023      	andpl	r3, r4
        EXTI_Ptr->EMR1 = temp;
 8000d2a:	f8cc 3004 	str.w	r3, [ip, #4]
        temp = EXTI->RTSR1;
 8000d2e:	683b      	ldr	r3, [r7, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d30:	02f7      	lsls	r7, r6, #11
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8000d32:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
          temp |= iocurrent;
 8000d36:	bf4c      	ite	mi
 8000d38:	4313      	orrmi	r3, r2
        temp &= ~((uint32_t)iocurrent);
 8000d3a:	4023      	andpl	r3, r4

        temp = EXTI->FTSR1;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d3c:	02b6      	lsls	r6, r6, #10
        EXTI->RTSR1 = temp;
 8000d3e:	603b      	str	r3, [r7, #0]
        temp = EXTI->FTSR1;
 8000d40:	687b      	ldr	r3, [r7, #4]
        temp &= ~((uint32_t)iocurrent);
 8000d42:	bf54      	ite	pl
 8000d44:	ea04 0203 	andpl.w	r2, r4, r3
        {
          temp |= iocurrent;
 8000d48:	431a      	orrmi	r2, r3
        }
        EXTI->FTSR1 = temp;
 8000d4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  for(position = 0; position < GPIO_NUMBER; position++)
 8000d4e:	2d10      	cmp	r5, #16
        EXTI->FTSR1 = temp;
 8000d50:	605a      	str	r2, [r3, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000d52:	f47f af3e 	bne.w	8000bd2 <HAL_GPIO_Init+0x1e>
      }      
    }
  }
}
 8000d56:	b003      	add	sp, #12
 8000d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d5c:	ea4f 0a45 	mov.w	sl, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000d60:	2403      	movs	r4, #3
      temp = GPIOx->MODER;
 8000d62:	f8d0 b000 	ldr.w	fp, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d66:	f109 39ff 	add.w	r9, r9, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000d6a:	ea06 0704 	and.w	r7, r6, r4
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000d6e:	fa04 f40a 	lsl.w	r4, r4, sl
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d72:	f1b9 0f01 	cmp.w	r9, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000d76:	ea6f 0404 	mvn.w	r4, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000d7a:	fa07 f70a 	lsl.w	r7, r7, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000d7e:	ea0b 0b04 	and.w	fp, fp, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000d82:	ea47 070b 	orr.w	r7, r7, fp
      GPIOx->MODER = temp;
 8000d86:	6007      	str	r7, [r0, #0]
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d88:	f63f af6c 	bhi.w	8000c64 <HAL_GPIO_Init+0xb0>
 8000d8c:	e757      	b.n	8000c3e <HAL_GPIO_Init+0x8a>
 8000d8e:	2300      	movs	r3, #0
 8000d90:	e7b6      	b.n	8000d00 <HAL_GPIO_Init+0x14c>
 8000d92:	f04f 0901 	mov.w	r9, #1
 8000d96:	fa09 f303 	lsl.w	r3, r9, r3
 8000d9a:	e7b1      	b.n	8000d00 <HAL_GPIO_Init+0x14c>
 8000d9c:	f04f 0902 	mov.w	r9, #2
 8000da0:	fa09 f303 	lsl.w	r3, r9, r3
 8000da4:	e7ac      	b.n	8000d00 <HAL_GPIO_Init+0x14c>
 8000da6:	f04f 0903 	mov.w	r9, #3
 8000daa:	fa09 f303 	lsl.w	r3, r9, r3
 8000dae:	e7a7      	b.n	8000d00 <HAL_GPIO_Init+0x14c>
 8000db0:	f04f 0904 	mov.w	r9, #4
 8000db4:	fa09 f303 	lsl.w	r3, r9, r3
 8000db8:	e7a2      	b.n	8000d00 <HAL_GPIO_Init+0x14c>
 8000dba:	f04f 0905 	mov.w	r9, #5
 8000dbe:	fa09 f303 	lsl.w	r3, r9, r3
 8000dc2:	e79d      	b.n	8000d00 <HAL_GPIO_Init+0x14c>
 8000dc4:	f04f 0906 	mov.w	r9, #6
 8000dc8:	fa09 f303 	lsl.w	r3, r9, r3
 8000dcc:	e798      	b.n	8000d00 <HAL_GPIO_Init+0x14c>
 8000dce:	f04f 0907 	mov.w	r9, #7
 8000dd2:	fa09 f303 	lsl.w	r3, r9, r3
 8000dd6:	e793      	b.n	8000d00 <HAL_GPIO_Init+0x14c>
 8000dd8:	f04f 0908 	mov.w	r9, #8
 8000ddc:	fa09 f303 	lsl.w	r3, r9, r3
 8000de0:	e78e      	b.n	8000d00 <HAL_GPIO_Init+0x14c>
 8000de2:	bf00      	nop
 8000de4:	58020000 	.word	0x58020000
 8000de8:	58020800 	.word	0x58020800
 8000dec:	58020c00 	.word	0x58020c00
 8000df0:	58021000 	.word	0x58021000
 8000df4:	58021400 	.word	0x58021400
 8000df8:	58000080 	.word	0x58000080
 8000dfc:	58024400 	.word	0x58024400
 8000e00:	58021800 	.word	0x58021800
 8000e04:	58021c00 	.word	0x58021c00
 8000e08:	58022000 	.word	0x58022000
 8000e0c:	58022400 	.word	0x58022400

08000e10 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e10:	b90a      	cbnz	r2, 8000e16 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 8000e12:	8341      	strh	r1, [r0, #26]
 8000e14:	4770      	bx	lr
    GPIOx->BSRRL = GPIO_Pin;
 8000e16:	8301      	strh	r1, [r0, #24]
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop

08000e1c <HAL_LPTIM_Init>:
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
  uint32_t tmpcfgr = 0;

  /* Check the LPTIM handle allocation */
  if(hlptim == NULL)
 8000e1c:	2800      	cmp	r0, #0
 8000e1e:	d058      	beq.n	8000ed2 <HAL_LPTIM_Init+0xb6>
{
 8000e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }  
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));  
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
  
  if(hlptim->State == HAL_LPTIM_STATE_RESET)
 8000e22:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 8000e26:	4604      	mov	r4, r0
 8000e28:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d046      	beq.n	8000ebe <HAL_LPTIM_Init+0xa2>
    /* Init the low level hardware */
    HAL_LPTIM_MspInit(hlptim);
  }
  
  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8000e30:	2302      	movs	r3, #2
  
  if ((hlptim->Init.Clock.Source) ==  LPTIM_CLOCKSOURCE_ULPTIM)
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
  }
  if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 8000e32:	6962      	ldr	r2, [r4, #20]
  if ((hlptim->Init.Clock.Source) ==  LPTIM_CLOCKSOURCE_ULPTIM)
 8000e34:	e894 0082 	ldmia.w	r4, {r1, r7}
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8000e38:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 8000e3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
  if ((hlptim->Init.Clock.Source) ==  LPTIM_CLOCKSOURCE_ULPTIM)
 8000e40:	2f01      	cmp	r7, #1
  tmpcfgr = hlptim->Instance->CFGR;
 8000e42:	68c8      	ldr	r0, [r1, #12]
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8000e44:	bf08      	it	eq
 8000e46:	f020 001e 	biceq.w	r0, r0, #30
  if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d003      	beq.n	8000e56 <HAL_LPTIM_Init+0x3a>
  {
    tmpcfgr &= (uint32_t)(~ (LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8000e4e:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 8000e52:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE ));
  
  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8000e56:	68a3      	ldr	r3, [r4, #8]
              hlptim->Init.Clock.Prescaler |
              hlptim->Init.OutputPolarity  |
              hlptim->Init.UpdateMode      |
              hlptim->Init.CounterSource);
  
  if ((hlptim->Init.Clock.Source) ==  LPTIM_CLOCKSOURCE_ULPTIM)
 8000e58:	2f01      	cmp	r7, #1
              hlptim->Init.Clock.Prescaler |
 8000e5a:	6a25      	ldr	r5, [r4, #32]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8000e5c:	ea43 0307 	orr.w	r3, r3, r7
              hlptim->Init.OutputPolarity  |
 8000e60:	6a66      	ldr	r6, [r4, #36]	; 0x24
              hlptim->Init.Clock.Prescaler |
 8000e62:	ea43 0305 	orr.w	r3, r3, r5
              hlptim->Init.UpdateMode      |
 8000e66:	6aa5      	ldr	r5, [r4, #40]	; 0x28
              hlptim->Init.OutputPolarity  |
 8000e68:	ea43 0306 	orr.w	r3, r3, r6
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8000e6c:	4e1b      	ldr	r6, [pc, #108]	; (8000edc <HAL_LPTIM_Init+0xc0>)
              hlptim->Init.UpdateMode      |
 8000e6e:	ea43 0305 	orr.w	r3, r3, r5
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8000e72:	ea06 0600 	and.w	r6, r6, r0
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8000e76:	ea43 0306 	orr.w	r3, r3, r6
  if ((hlptim->Init.Clock.Source) ==  LPTIM_CLOCKSOURCE_ULPTIM)
 8000e7a:	d025      	beq.n	8000ec8 <HAL_LPTIM_Init+0xac>
  {
    tmpcfgr |=  (hlptim->Init.UltraLowPowerClock.Polarity |
                hlptim->Init.UltraLowPowerClock.SampleTime);
  } 
  
  if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 8000e7c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000e80:	4282      	cmp	r2, r0
 8000e82:	d004      	beq.n	8000e8e <HAL_LPTIM_Init+0x72>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8000e84:	69a5      	ldr	r5, [r4, #24]
                hlptim->Init.Trigger.ActiveEdge |
 8000e86:	69e0      	ldr	r0, [r4, #28]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8000e88:	432a      	orrs	r2, r5
                hlptim->Init.Trigger.ActiveEdge |
 8000e8a:	4302      	orrs	r2, r0
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8000e8c:	4313      	orrs	r3, r2
  
  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;

 /* Configure LPTIM input sources */
  if((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8000e8e:	4a14      	ldr	r2, [pc, #80]	; (8000ee0 <HAL_LPTIM_Init+0xc4>)
  hlptim->Instance->CFGR = tmpcfgr;
 8000e90:	60cb      	str	r3, [r1, #12]
  if((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8000e92:	4291      	cmp	r1, r2
 8000e94:	d00a      	beq.n	8000eac <HAL_LPTIM_Init+0x90>
 8000e96:	4b13      	ldr	r3, [pc, #76]	; (8000ee4 <HAL_LPTIM_Init+0xc8>)
 8000e98:	4299      	cmp	r1, r3
 8000e9a:	d007      	beq.n	8000eac <HAL_LPTIM_Init+0x90>
    /* Configure LPTIM1/2 Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
  }
  else
  {
  if(hlptim->Instance == LPTIM3)
 8000e9c:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <HAL_LPTIM_Init+0xcc>)
 8000e9e:	4299      	cmp	r1, r3
 8000ea0:	d019      	beq.n	8000ed6 <HAL_LPTIM_Init+0xba>
      /* Configure LPTIM2 Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
    }
  }
  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8000ea2:	2301      	movs	r3, #1
  
  /* Return function status */
  return HAL_OK;
 8000ea4:	2000      	movs	r0, #0
  hlptim->State = HAL_LPTIM_STATE_READY;
 8000ea6:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  return HAL_OK;
 8000eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8000eac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 8000eae:	2000      	movs	r0, #0
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8000eb0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	624b      	str	r3, [r1, #36]	; 0x24
  hlptim->State = HAL_LPTIM_STATE_READY;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  return HAL_OK;
 8000ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hlptim->Lock = HAL_UNLOCKED;
 8000ebe:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    HAL_LPTIM_MspInit(hlptim);
 8000ec2:	f002 fee5 	bl	8003c90 <HAL_LPTIM_MspInit>
 8000ec6:	e7b3      	b.n	8000e30 <HAL_LPTIM_Init+0x14>
    tmpcfgr |=  (hlptim->Init.UltraLowPowerClock.Polarity |
 8000ec8:	68e0      	ldr	r0, [r4, #12]
 8000eca:	6925      	ldr	r5, [r4, #16]
 8000ecc:	4328      	orrs	r0, r5
 8000ece:	4303      	orrs	r3, r0
 8000ed0:	e7d4      	b.n	8000e7c <HAL_LPTIM_Init+0x60>
    return HAL_ERROR;
 8000ed2:	2001      	movs	r0, #1
 8000ed4:	4770      	bx	lr
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8000ed6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000ed8:	624b      	str	r3, [r1, #36]	; 0x24
 8000eda:	e7e2      	b.n	8000ea2 <HAL_LPTIM_Init+0x86>
 8000edc:	ff19f1fe 	.word	0xff19f1fe
 8000ee0:	40002400 	.word	0x40002400
 8000ee4:	58002400 	.word	0x58002400
 8000ee8:	58002800 	.word	0x58002800

08000eec <HAL_LPTIM_CompareMatchCallback>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <HAL_LPTIM_AutoReloadMatchCallback>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <HAL_LPTIM_TriggerCallback>:
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <HAL_LPTIM_CompareWriteCallback>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <HAL_LPTIM_AutoReloadWriteCallback>:
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop

08000f00 <HAL_LPTIM_DirectionUpCallback>:
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop

08000f04 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode 
  * @param  hlptim : LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <HAL_LPTIM_IRQHandler>:
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8000f08:	6803      	ldr	r3, [r0, #0]
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	07d1      	lsls	r1, r2, #31
{
 8000f0e:	b510      	push	{r4, lr}
 8000f10:	4604      	mov	r4, r0
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8000f12:	d502      	bpl.n	8000f1a <HAL_LPTIM_IRQHandler+0x12>
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8000f14:	689a      	ldr	r2, [r3, #8]
 8000f16:	07d2      	lsls	r2, r2, #31
 8000f18:	d431      	bmi.n	8000f7e <HAL_LPTIM_IRQHandler+0x76>
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	0790      	lsls	r0, r2, #30
 8000f1e:	d502      	bpl.n	8000f26 <HAL_LPTIM_IRQHandler+0x1e>
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8000f20:	689a      	ldr	r2, [r3, #8]
 8000f22:	0791      	lsls	r1, r2, #30
 8000f24:	d431      	bmi.n	8000f8a <HAL_LPTIM_IRQHandler+0x82>
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	0752      	lsls	r2, r2, #29
 8000f2a:	d502      	bpl.n	8000f32 <HAL_LPTIM_IRQHandler+0x2a>
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8000f2c:	689a      	ldr	r2, [r3, #8]
 8000f2e:	0750      	lsls	r0, r2, #29
 8000f30:	d432      	bmi.n	8000f98 <HAL_LPTIM_IRQHandler+0x90>
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	0711      	lsls	r1, r2, #28
 8000f36:	d502      	bpl.n	8000f3e <HAL_LPTIM_IRQHandler+0x36>
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8000f38:	689a      	ldr	r2, [r3, #8]
 8000f3a:	0712      	lsls	r2, r2, #28
 8000f3c:	d433      	bmi.n	8000fa6 <HAL_LPTIM_IRQHandler+0x9e>
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	06d0      	lsls	r0, r2, #27
 8000f42:	d502      	bpl.n	8000f4a <HAL_LPTIM_IRQHandler+0x42>
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8000f44:	689a      	ldr	r2, [r3, #8]
 8000f46:	06d1      	lsls	r1, r2, #27
 8000f48:	d434      	bmi.n	8000fb4 <HAL_LPTIM_IRQHandler+0xac>
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	0692      	lsls	r2, r2, #26
 8000f4e:	d502      	bpl.n	8000f56 <HAL_LPTIM_IRQHandler+0x4e>
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8000f50:	689a      	ldr	r2, [r3, #8]
 8000f52:	0690      	lsls	r0, r2, #26
 8000f54:	d40c      	bmi.n	8000f70 <HAL_LPTIM_IRQHandler+0x68>
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	0651      	lsls	r1, r2, #25
 8000f5a:	d502      	bpl.n	8000f62 <HAL_LPTIM_IRQHandler+0x5a>
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8000f5c:	689a      	ldr	r2, [r3, #8]
 8000f5e:	0652      	lsls	r2, r2, #25
 8000f60:	d400      	bmi.n	8000f64 <HAL_LPTIM_IRQHandler+0x5c>
 8000f62:	bd10      	pop	{r4, pc}
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8000f64:	2240      	movs	r2, #64	; 0x40
      HAL_LPTIM_DirectionDownCallback(hlptim);      
 8000f66:	4620      	mov	r0, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8000f68:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_DirectionDownCallback(hlptim);      
 8000f6a:	f7ff ffcb 	bl	8000f04 <HAL_LPTIM_DirectionDownCallback>
 8000f6e:	bd10      	pop	{r4, pc}
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8000f70:	2220      	movs	r2, #32
      HAL_LPTIM_DirectionUpCallback(hlptim);      
 8000f72:	4620      	mov	r0, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8000f74:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_DirectionUpCallback(hlptim);      
 8000f76:	f7ff ffc3 	bl	8000f00 <HAL_LPTIM_DirectionUpCallback>
 8000f7a:	6823      	ldr	r3, [r4, #0]
 8000f7c:	e7eb      	b.n	8000f56 <HAL_LPTIM_IRQHandler+0x4e>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8000f7e:	2201      	movs	r2, #1
 8000f80:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_CompareMatchCallback(hlptim);      
 8000f82:	f7ff ffb3 	bl	8000eec <HAL_LPTIM_CompareMatchCallback>
 8000f86:	6823      	ldr	r3, [r4, #0]
 8000f88:	e7c7      	b.n	8000f1a <HAL_LPTIM_IRQHandler+0x12>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8000f8a:	2202      	movs	r2, #2
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);      
 8000f8c:	4620      	mov	r0, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8000f8e:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);      
 8000f90:	f7ff ffae 	bl	8000ef0 <HAL_LPTIM_AutoReloadMatchCallback>
 8000f94:	6823      	ldr	r3, [r4, #0]
 8000f96:	e7c6      	b.n	8000f26 <HAL_LPTIM_IRQHandler+0x1e>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8000f98:	2204      	movs	r2, #4
      HAL_LPTIM_TriggerCallback(hlptim);      
 8000f9a:	4620      	mov	r0, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8000f9c:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_TriggerCallback(hlptim);      
 8000f9e:	f7ff ffa9 	bl	8000ef4 <HAL_LPTIM_TriggerCallback>
 8000fa2:	6823      	ldr	r3, [r4, #0]
 8000fa4:	e7c5      	b.n	8000f32 <HAL_LPTIM_IRQHandler+0x2a>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8000fa6:	2208      	movs	r2, #8
      HAL_LPTIM_CompareWriteCallback(hlptim);      
 8000fa8:	4620      	mov	r0, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8000faa:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_CompareWriteCallback(hlptim);      
 8000fac:	f7ff ffa4 	bl	8000ef8 <HAL_LPTIM_CompareWriteCallback>
 8000fb0:	6823      	ldr	r3, [r4, #0]
 8000fb2:	e7c4      	b.n	8000f3e <HAL_LPTIM_IRQHandler+0x36>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8000fb4:	2210      	movs	r2, #16
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);      
 8000fb6:	4620      	mov	r0, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8000fb8:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);      
 8000fba:	f7ff ff9f 	bl	8000efc <HAL_LPTIM_AutoReloadWriteCallback>
 8000fbe:	6823      	ldr	r3, [r4, #0]
 8000fc0:	e7c3      	b.n	8000f4a <HAL_LPTIM_IRQHandler+0x42>
 8000fc2:	bf00      	nop

08000fc4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fc6:	6803      	ldr	r3, [r0, #0]
{
 8000fc8:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fca:	07d9      	lsls	r1, r3, #31
 8000fcc:	d530      	bpl.n	8001030 <HAL_RCC_OscConfig+0x6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000fce:	49a9      	ldr	r1, [pc, #676]	; (8001274 <HAL_RCC_OscConfig+0x2b0>)
 8000fd0:	690a      	ldr	r2, [r1, #16]
 8000fd2:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8000fd6:	2a10      	cmp	r2, #16
 8000fd8:	f000 810c 	beq.w	80011f4 <HAL_RCC_OscConfig+0x230>
 8000fdc:	690a      	ldr	r2, [r1, #16]
 8000fde:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8000fe2:	2a18      	cmp	r2, #24
 8000fe4:	f000 8100 	beq.w	80011e8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fe8:	6863      	ldr	r3, [r4, #4]
 8000fea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fee:	f000 81a2 	beq.w	8001336 <HAL_RCC_OscConfig+0x372>
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	f000 8109 	beq.w	800120a <HAL_RCC_OscConfig+0x246>
 8000ff8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ffc:	4b9d      	ldr	r3, [pc, #628]	; (8001274 <HAL_RCC_OscConfig+0x2b0>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	f000 81c6 	beq.w	8001390 <HAL_RCC_OscConfig+0x3cc>
 8001004:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001010:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001012:	f7ff f9a5 	bl	8000360 <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001016:	4d97      	ldr	r5, [pc, #604]	; (8001274 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8001018:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800101a:	e005      	b.n	8001028 <HAL_RCC_OscConfig+0x64>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800101c:	f7ff f9a0 	bl	8000360 <HAL_GetTick>
 8001020:	1b80      	subs	r0, r0, r6
 8001022:	2864      	cmp	r0, #100	; 0x64
 8001024:	f200 8171 	bhi.w	800130a <HAL_RCC_OscConfig+0x346>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001028:	682b      	ldr	r3, [r5, #0]
 800102a:	039b      	lsls	r3, r3, #14
 800102c:	d5f6      	bpl.n	800101c <HAL_RCC_OscConfig+0x58>
 800102e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001030:	0798      	lsls	r0, r3, #30
 8001032:	d531      	bpl.n	8001098 <HAL_RCC_OscConfig+0xd4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001034:	4b8f      	ldr	r3, [pc, #572]	; (8001274 <HAL_RCC_OscConfig+0x2b0>)
 8001036:	691a      	ldr	r2, [r3, #16]
 8001038:	f012 0f38 	tst.w	r2, #56	; 0x38
 800103c:	f000 80b9 	beq.w	80011b2 <HAL_RCC_OscConfig+0x1ee>
 8001040:	691a      	ldr	r2, [r3, #16]
 8001042:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8001046:	2a18      	cmp	r2, #24
 8001048:	f000 80af 	beq.w	80011aa <HAL_RCC_OscConfig+0x1e6>
    }
    
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800104c:	68e2      	ldr	r2, [r4, #12]
 800104e:	2a00      	cmp	r2, #0
 8001050:	f000 8177 	beq.w	8001342 <HAL_RCC_OscConfig+0x37e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001054:	4987      	ldr	r1, [pc, #540]	; (8001274 <HAL_RCC_OscConfig+0x2b0>)
 8001056:	680b      	ldr	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001058:	460d      	mov	r5, r1
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800105a:	f023 0319 	bic.w	r3, r3, #25
 800105e:	4313      	orrs	r3, r2
 8001060:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8001062:	f7ff f97d 	bl	8000360 <HAL_GetTick>
 8001066:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001068:	e005      	b.n	8001076 <HAL_RCC_OscConfig+0xb2>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800106a:	f7ff f979 	bl	8000360 <HAL_GetTick>
 800106e:	1b80      	subs	r0, r0, r6
 8001070:	2802      	cmp	r0, #2
 8001072:	f200 814a 	bhi.w	800130a <HAL_RCC_OscConfig+0x346>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001076:	682b      	ldr	r3, [r5, #0]
 8001078:	075f      	lsls	r7, r3, #29
 800107a:	d5f6      	bpl.n	800106a <HAL_RCC_OscConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800107c:	6869      	ldr	r1, [r5, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800107e:	f44f 337c 	mov.w	r3, #258048	; 0x3f000
 8001082:	fa93 f3a3 	rbit	r3, r3
 8001086:	fab3 f283 	clz	r2, r3
 800108a:	6923      	ldr	r3, [r4, #16]
 800108c:	f421 317c 	bic.w	r1, r1, #258048	; 0x3f000
 8001090:	4093      	lsls	r3, r2
 8001092:	430b      	orrs	r3, r1
 8001094:	606b      	str	r3, [r5, #4]
 8001096:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001098:	06d9      	lsls	r1, r3, #27
 800109a:	d531      	bpl.n	8001100 <HAL_RCC_OscConfig+0x13c>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_CSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800109c:	4975      	ldr	r1, [pc, #468]	; (8001274 <HAL_RCC_OscConfig+0x2b0>)
 800109e:	690a      	ldr	r2, [r1, #16]
 80010a0:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80010a4:	2a08      	cmp	r2, #8
 80010a6:	f000 811a 	beq.w	80012de <HAL_RCC_OscConfig+0x31a>
 80010aa:	690a      	ldr	r2, [r1, #16]
 80010ac:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80010b0:	2a18      	cmp	r2, #24
 80010b2:	f000 810e 	beq.w	80012d2 <HAL_RCC_OscConfig+0x30e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80010b6:	69e3      	ldr	r3, [r4, #28]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	f000 8128 	beq.w	800130e <HAL_RCC_OscConfig+0x34a>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80010be:	4b6d      	ldr	r3, [pc, #436]	; (8001274 <HAL_RCC_OscConfig+0x2b0>)
 80010c0:	681a      	ldr	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
 80010c2:	461d      	mov	r5, r3
        __HAL_RCC_CSI_ENABLE();
 80010c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010c8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80010ca:	f7ff f949 	bl	8000360 <HAL_GetTick>
 80010ce:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
 80010d0:	e005      	b.n	80010de <HAL_RCC_OscConfig+0x11a>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80010d2:	f7ff f945 	bl	8000360 <HAL_GetTick>
 80010d6:	1b80      	subs	r0, r0, r6
 80010d8:	2802      	cmp	r0, #2
 80010da:	f200 8116 	bhi.w	800130a <HAL_RCC_OscConfig+0x346>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
 80010de:	682b      	ldr	r3, [r5, #0]
 80010e0:	05db      	lsls	r3, r3, #23
 80010e2:	d5f6      	bpl.n	80010d2 <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80010e4:	6869      	ldr	r1, [r5, #4]
 80010e6:	f04f 43f8 	mov.w	r3, #2080374784	; 0x7c000000
 80010ea:	fa93 f3a3 	rbit	r3, r3
 80010ee:	fab3 f283 	clz	r2, r3
 80010f2:	6a23      	ldr	r3, [r4, #32]
 80010f4:	f021 41f8 	bic.w	r1, r1, #2080374784	; 0x7c000000
 80010f8:	4093      	lsls	r3, r2
 80010fa:	430b      	orrs	r3, r1
 80010fc:	606b      	str	r3, [r5, #4]
 80010fe:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001100:	071d      	lsls	r5, r3, #28
 8001102:	d517      	bpl.n	8001134 <HAL_RCC_OscConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001104:	6963      	ldr	r3, [r4, #20]
 8001106:	2b00      	cmp	r3, #0
 8001108:	f000 8096 	beq.w	8001238 <HAL_RCC_OscConfig+0x274>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800110c:	4b59      	ldr	r3, [pc, #356]	; (8001274 <HAL_RCC_OscConfig+0x2b0>)
 800110e:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001110:	461d      	mov	r5, r3
      __HAL_RCC_LSI_ENABLE();
 8001112:	f042 0201 	orr.w	r2, r2, #1
 8001116:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001118:	f7ff f922 	bl	8000360 <HAL_GetTick>
 800111c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800111e:	e005      	b.n	800112c <HAL_RCC_OscConfig+0x168>
      {
        if((int32_t) (HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001120:	f7ff f91e 	bl	8000360 <HAL_GetTick>
 8001124:	1b80      	subs	r0, r0, r6
 8001126:	2802      	cmp	r0, #2
 8001128:	f200 80ef 	bhi.w	800130a <HAL_RCC_OscConfig+0x346>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800112c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800112e:	0798      	lsls	r0, r3, #30
 8001130:	d5f6      	bpl.n	8001120 <HAL_RCC_OscConfig+0x15c>
 8001132:	6823      	ldr	r3, [r4, #0]
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001134:	069a      	lsls	r2, r3, #26
 8001136:	d517      	bpl.n	8001168 <HAL_RCC_OscConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
    
    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001138:	69a3      	ldr	r3, [r4, #24]
 800113a:	2b00      	cmp	r3, #0
 800113c:	f000 8115 	beq.w	800136a <HAL_RCC_OscConfig+0x3a6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001140:	4b4c      	ldr	r3, [pc, #304]	; (8001274 <HAL_RCC_OscConfig+0x2b0>)
 8001142:	681a      	ldr	r2, [r3, #0]
      
      /* Get time-out */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI48 is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001144:	461d      	mov	r5, r3
      __HAL_RCC_HSI48_ENABLE();
 8001146:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800114a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800114c:	f7ff f908 	bl	8000360 <HAL_GetTick>
 8001150:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001152:	e005      	b.n	8001160 <HAL_RCC_OscConfig+0x19c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001154:	f7ff f904 	bl	8000360 <HAL_GetTick>
 8001158:	1b80      	subs	r0, r0, r6
 800115a:	2802      	cmp	r0, #2
 800115c:	f200 80d5 	bhi.w	800130a <HAL_RCC_OscConfig+0x346>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001160:	682b      	ldr	r3, [r5, #0]
 8001162:	049f      	lsls	r7, r3, #18
 8001164:	d5f6      	bpl.n	8001154 <HAL_RCC_OscConfig+0x190>
 8001166:	6823      	ldr	r3, [r4, #0]
        }      
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001168:	0759      	lsls	r1, r3, #29
 800116a:	d478      	bmi.n	800125e <HAL_RCC_OscConfig+0x29a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800116c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800116e:	b1d2      	cbz	r2, 80011a6 <HAL_RCC_OscConfig+0x1e2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001170:	4b40      	ldr	r3, [pc, #256]	; (8001274 <HAL_RCC_OscConfig+0x2b0>)
 8001172:	6919      	ldr	r1, [r3, #16]
 8001174:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8001178:	2918      	cmp	r1, #24
 800117a:	d044      	beq.n	8001206 <HAL_RCC_OscConfig+0x242>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800117c:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800117e:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001180:	f000 810e 	beq.w	80013a0 <HAL_RCC_OscConfig+0x3dc>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001184:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001188:	461c      	mov	r4, r3
        __HAL_RCC_PLL_DISABLE();
 800118a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800118c:	f7ff f8e8 	bl	8000360 <HAL_GetTick>
 8001190:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001192:	e005      	b.n	80011a0 <HAL_RCC_OscConfig+0x1dc>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001194:	f7ff f8e4 	bl	8000360 <HAL_GetTick>
 8001198:	1b40      	subs	r0, r0, r5
 800119a:	2802      	cmp	r0, #2
 800119c:	f200 80b5 	bhi.w	800130a <HAL_RCC_OscConfig+0x346>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011a0:	6823      	ldr	r3, [r4, #0]
 80011a2:	019b      	lsls	r3, r3, #6
 80011a4:	d4f6      	bmi.n	8001194 <HAL_RCC_OscConfig+0x1d0>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80011a6:	2000      	movs	r0, #0
 80011a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80011aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ac:	0799      	lsls	r1, r3, #30
 80011ae:	f47f af4d 	bne.w	800104c <HAL_RCC_OscConfig+0x88>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011b2:	4b30      	ldr	r3, [pc, #192]	; (8001274 <HAL_RCC_OscConfig+0x2b0>)
 80011b4:	68e1      	ldr	r1, [r4, #12]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	075a      	lsls	r2, r3, #29
 80011ba:	d500      	bpl.n	80011be <HAL_RCC_OscConfig+0x1fa>
 80011bc:	b319      	cbz	r1, 8001206 <HAL_RCC_OscConfig+0x242>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80011be:	4a2d      	ldr	r2, [pc, #180]	; (8001274 <HAL_RCC_OscConfig+0x2b0>)
 80011c0:	6813      	ldr	r3, [r2, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011c2:	4615      	mov	r5, r2
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80011c4:	f023 0319 	bic.w	r3, r3, #25
 80011c8:	430b      	orrs	r3, r1
 80011ca:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80011cc:	f7ff f8c8 	bl	8000360 <HAL_GetTick>
 80011d0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011d2:	e005      	b.n	80011e0 <HAL_RCC_OscConfig+0x21c>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011d4:	f7ff f8c4 	bl	8000360 <HAL_GetTick>
 80011d8:	1b80      	subs	r0, r0, r6
 80011da:	2802      	cmp	r0, #2
 80011dc:	f200 8095 	bhi.w	800130a <HAL_RCC_OscConfig+0x346>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011e0:	682b      	ldr	r3, [r5, #0]
 80011e2:	075b      	lsls	r3, r3, #29
 80011e4:	d5f6      	bpl.n	80011d4 <HAL_RCC_OscConfig+0x210>
 80011e6:	e749      	b.n	800107c <HAL_RCC_OscConfig+0xb8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80011e8:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80011ea:	f002 0203 	and.w	r2, r2, #3
 80011ee:	2a02      	cmp	r2, #2
 80011f0:	f47f aefa 	bne.w	8000fe8 <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f4:	4a1f      	ldr	r2, [pc, #124]	; (8001274 <HAL_RCC_OscConfig+0x2b0>)
 80011f6:	6812      	ldr	r2, [r2, #0]
 80011f8:	0392      	lsls	r2, r2, #14
 80011fa:	f57f af19 	bpl.w	8001030 <HAL_RCC_OscConfig+0x6c>
 80011fe:	6862      	ldr	r2, [r4, #4]
 8001200:	2a00      	cmp	r2, #0
 8001202:	f47f af15 	bne.w	8001030 <HAL_RCC_OscConfig+0x6c>
      return HAL_ERROR;
 8001206:	2001      	movs	r0, #1
 8001208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800120a:	4b1a      	ldr	r3, [pc, #104]	; (8001274 <HAL_RCC_OscConfig+0x2b0>)
 800120c:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800120e:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001210:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800121c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800121e:	f7ff f89f 	bl	8000360 <HAL_GetTick>
 8001222:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001224:	e004      	b.n	8001230 <HAL_RCC_OscConfig+0x26c>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001226:	f7ff f89b 	bl	8000360 <HAL_GetTick>
 800122a:	1b80      	subs	r0, r0, r6
 800122c:	2864      	cmp	r0, #100	; 0x64
 800122e:	d86c      	bhi.n	800130a <HAL_RCC_OscConfig+0x346>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001230:	682b      	ldr	r3, [r5, #0]
 8001232:	039f      	lsls	r7, r3, #14
 8001234:	d4f7      	bmi.n	8001226 <HAL_RCC_OscConfig+0x262>
 8001236:	e6fa      	b.n	800102e <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_LSI_DISABLE();
 8001238:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <HAL_RCC_OscConfig+0x2b0>)
 800123a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800123c:	461d      	mov	r5, r3
      __HAL_RCC_LSI_DISABLE();
 800123e:	f022 0201 	bic.w	r2, r2, #1
 8001242:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001244:	f7ff f88c 	bl	8000360 <HAL_GetTick>
 8001248:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800124a:	e004      	b.n	8001256 <HAL_RCC_OscConfig+0x292>
        if((int32_t) (HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800124c:	f7ff f888 	bl	8000360 <HAL_GetTick>
 8001250:	1b80      	subs	r0, r0, r6
 8001252:	2802      	cmp	r0, #2
 8001254:	d859      	bhi.n	800130a <HAL_RCC_OscConfig+0x346>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001256:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001258:	0799      	lsls	r1, r3, #30
 800125a:	d4f7      	bmi.n	800124c <HAL_RCC_OscConfig+0x288>
 800125c:	e769      	b.n	8001132 <HAL_RCC_OscConfig+0x16e>
    PWR->CR1 |= PWR_CR1_DBP;
 800125e:	4b06      	ldr	r3, [pc, #24]	; (8001278 <HAL_RCC_OscConfig+0x2b4>)
 8001260:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001262:	461d      	mov	r5, r3
    PWR->CR1 |= PWR_CR1_DBP;
 8001264:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001268:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800126a:	f7ff f879 	bl	8000360 <HAL_GetTick>
 800126e:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001270:	e009      	b.n	8001286 <HAL_RCC_OscConfig+0x2c2>
 8001272:	bf00      	nop
 8001274:	58024400 	.word	0x58024400
 8001278:	58024800 	.word	0x58024800
      if((int32_t) (HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800127c:	f7ff f870 	bl	8000360 <HAL_GetTick>
 8001280:	1b80      	subs	r0, r0, r6
 8001282:	2864      	cmp	r0, #100	; 0x64
 8001284:	d841      	bhi.n	800130a <HAL_RCC_OscConfig+0x346>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001286:	682b      	ldr	r3, [r5, #0]
 8001288:	05da      	lsls	r2, r3, #23
 800128a:	d5f7      	bpl.n	800127c <HAL_RCC_OscConfig+0x2b8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800128c:	68a3      	ldr	r3, [r4, #8]
 800128e:	2b01      	cmp	r3, #1
 8001290:	f000 810b 	beq.w	80014aa <HAL_RCC_OscConfig+0x4e6>
 8001294:	2b00      	cmp	r3, #0
 8001296:	f000 80ee 	beq.w	8001476 <HAL_RCC_OscConfig+0x4b2>
 800129a:	2b05      	cmp	r3, #5
 800129c:	4b8a      	ldr	r3, [pc, #552]	; (80014c8 <HAL_RCC_OscConfig+0x504>)
 800129e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80012a0:	f000 8109 	beq.w	80014b6 <HAL_RCC_OscConfig+0x4f2>
 80012a4:	f022 0201 	bic.w	r2, r2, #1
 80012a8:	671a      	str	r2, [r3, #112]	; 0x70
 80012aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80012ac:	f022 0204 	bic.w	r2, r2, #4
 80012b0:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 80012b2:	f7ff f855 	bl	8000360 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012b6:	4d84      	ldr	r5, [pc, #528]	; (80014c8 <HAL_RCC_OscConfig+0x504>)
      tickstart = HAL_GetTick();
 80012b8:	4607      	mov	r7, r0
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012ba:	f241 3688 	movw	r6, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012be:	e004      	b.n	80012ca <HAL_RCC_OscConfig+0x306>
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012c0:	f7ff f84e 	bl	8000360 <HAL_GetTick>
 80012c4:	1bc0      	subs	r0, r0, r7
 80012c6:	42b0      	cmp	r0, r6
 80012c8:	d81f      	bhi.n	800130a <HAL_RCC_OscConfig+0x346>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012ca:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80012cc:	079b      	lsls	r3, r3, #30
 80012ce:	d5f7      	bpl.n	80012c0 <HAL_RCC_OscConfig+0x2fc>
 80012d0:	e74c      	b.n	800116c <HAL_RCC_OscConfig+0x1a8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_CSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80012d2:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80012d4:	f002 0203 	and.w	r2, r2, #3
 80012d8:	2a01      	cmp	r2, #1
 80012da:	f47f aeec 	bne.w	80010b6 <HAL_RCC_OscConfig+0xf2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80012de:	4a7a      	ldr	r2, [pc, #488]	; (80014c8 <HAL_RCC_OscConfig+0x504>)
 80012e0:	6812      	ldr	r2, [r2, #0]
 80012e2:	05d2      	lsls	r2, r2, #23
 80012e4:	d502      	bpl.n	80012ec <HAL_RCC_OscConfig+0x328>
 80012e6:	69e2      	ldr	r2, [r4, #28]
 80012e8:	2a80      	cmp	r2, #128	; 0x80
 80012ea:	d18c      	bne.n	8001206 <HAL_RCC_OscConfig+0x242>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80012ec:	4d76      	ldr	r5, [pc, #472]	; (80014c8 <HAL_RCC_OscConfig+0x504>)
 80012ee:	f04f 42f8 	mov.w	r2, #2080374784	; 0x7c000000
 80012f2:	6868      	ldr	r0, [r5, #4]
 80012f4:	fa92 f2a2 	rbit	r2, r2
 80012f8:	fab2 f182 	clz	r1, r2
 80012fc:	6a22      	ldr	r2, [r4, #32]
 80012fe:	f020 40f8 	bic.w	r0, r0, #2080374784	; 0x7c000000
 8001302:	408a      	lsls	r2, r1
 8001304:	4302      	orrs	r2, r0
 8001306:	606a      	str	r2, [r5, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001308:	e6fa      	b.n	8001100 <HAL_RCC_OscConfig+0x13c>
            return HAL_TIMEOUT;
 800130a:	2003      	movs	r0, #3
 800130c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        __HAL_RCC_CSI_DISABLE();
 800130e:	4b6e      	ldr	r3, [pc, #440]	; (80014c8 <HAL_RCC_OscConfig+0x504>)
 8001310:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
 8001312:	461d      	mov	r5, r3
        __HAL_RCC_CSI_DISABLE();
 8001314:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001318:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800131a:	f7ff f821 	bl	8000360 <HAL_GetTick>
 800131e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
 8001320:	e004      	b.n	800132c <HAL_RCC_OscConfig+0x368>
          if((int32_t) (HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001322:	f7ff f81d 	bl	8000360 <HAL_GetTick>
 8001326:	1b80      	subs	r0, r0, r6
 8001328:	2802      	cmp	r0, #2
 800132a:	d8ee      	bhi.n	800130a <HAL_RCC_OscConfig+0x346>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
 800132c:	682b      	ldr	r3, [r5, #0]
 800132e:	05df      	lsls	r7, r3, #23
 8001330:	d4f7      	bmi.n	8001322 <HAL_RCC_OscConfig+0x35e>
 8001332:	6823      	ldr	r3, [r4, #0]
 8001334:	e6e4      	b.n	8001100 <HAL_RCC_OscConfig+0x13c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001336:	4a64      	ldr	r2, [pc, #400]	; (80014c8 <HAL_RCC_OscConfig+0x504>)
 8001338:	6813      	ldr	r3, [r2, #0]
 800133a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800133e:	6013      	str	r3, [r2, #0]
 8001340:	e667      	b.n	8001012 <HAL_RCC_OscConfig+0x4e>
        __HAL_RCC_HSI_DISABLE();
 8001342:	4b61      	ldr	r3, [pc, #388]	; (80014c8 <HAL_RCC_OscConfig+0x504>)
 8001344:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001346:	461d      	mov	r5, r3
        __HAL_RCC_HSI_DISABLE();
 8001348:	f022 0201 	bic.w	r2, r2, #1
 800134c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800134e:	f7ff f807 	bl	8000360 <HAL_GetTick>
 8001352:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001354:	e004      	b.n	8001360 <HAL_RCC_OscConfig+0x39c>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001356:	f7ff f803 	bl	8000360 <HAL_GetTick>
 800135a:	1b80      	subs	r0, r0, r6
 800135c:	2802      	cmp	r0, #2
 800135e:	d8d4      	bhi.n	800130a <HAL_RCC_OscConfig+0x346>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001360:	682b      	ldr	r3, [r5, #0]
 8001362:	0758      	lsls	r0, r3, #29
 8001364:	d4f7      	bmi.n	8001356 <HAL_RCC_OscConfig+0x392>
 8001366:	6823      	ldr	r3, [r4, #0]
 8001368:	e696      	b.n	8001098 <HAL_RCC_OscConfig+0xd4>
      __HAL_RCC_HSI48_DISABLE();
 800136a:	4b57      	ldr	r3, [pc, #348]	; (80014c8 <HAL_RCC_OscConfig+0x504>)
 800136c:	681a      	ldr	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800136e:	461d      	mov	r5, r3
      __HAL_RCC_HSI48_DISABLE();
 8001370:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001374:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001376:	f7fe fff3 	bl	8000360 <HAL_GetTick>
 800137a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800137c:	e004      	b.n	8001388 <HAL_RCC_OscConfig+0x3c4>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800137e:	f7fe ffef 	bl	8000360 <HAL_GetTick>
 8001382:	1b80      	subs	r0, r0, r6
 8001384:	2802      	cmp	r0, #2
 8001386:	d8c0      	bhi.n	800130a <HAL_RCC_OscConfig+0x346>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001388:	682b      	ldr	r3, [r5, #0]
 800138a:	0498      	lsls	r0, r3, #18
 800138c:	d4f7      	bmi.n	800137e <HAL_RCC_OscConfig+0x3ba>
 800138e:	e6ea      	b.n	8001166 <HAL_RCC_OscConfig+0x1a2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001390:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	e638      	b.n	8001012 <HAL_RCC_OscConfig+0x4e>
        __HAL_RCC_PLL_DISABLE();
 80013a0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013a4:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 80013a6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80013a8:	f7fe ffda 	bl	8000360 <HAL_GetTick>
 80013ac:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013ae:	e004      	b.n	80013ba <HAL_RCC_OscConfig+0x3f6>
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013b0:	f7fe ffd6 	bl	8000360 <HAL_GetTick>
 80013b4:	1b80      	subs	r0, r0, r6
 80013b6:	2802      	cmp	r0, #2
 80013b8:	d8a7      	bhi.n	800130a <HAL_RCC_OscConfig+0x346>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013ba:	682b      	ldr	r3, [r5, #0]
 80013bc:	0199      	lsls	r1, r3, #6
 80013be:	d4f7      	bmi.n	80013b0 <HAL_RCC_OscConfig+0x3ec>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013c0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80013c2:	f64f 71f8 	movw	r1, #65528	; 0xfff8
 80013c6:	4b41      	ldr	r3, [pc, #260]	; (80014cc <HAL_RCC_OscConfig+0x508>)
 80013c8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80013ca:	4013      	ands	r3, r2
 80013cc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80013ce:	4303      	orrs	r3, r0
 80013d0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80013d4:	62ab      	str	r3, [r5, #40]	; 0x28
 80013d6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80013d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80013da:	1e50      	subs	r0, r2, #1
 80013dc:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80013de:	3b01      	subs	r3, #1
 80013e0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80013e2:	0400      	lsls	r0, r0, #16
 80013e4:	3e01      	subs	r6, #1
 80013e6:	025b      	lsls	r3, r3, #9
 80013e8:	3a01      	subs	r2, #1
 80013ea:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 80013ee:	f3c6 0608 	ubfx	r6, r6, #0, #9
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	0612      	lsls	r2, r2, #24
 80013f6:	4303      	orrs	r3, r0
 80013f8:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80013fc:	4333      	orrs	r3, r6
 80013fe:	4313      	orrs	r3, r2
 8001400:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001402:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8001404:	fa91 f3a1 	rbit	r3, r1
 8001408:	4931      	ldr	r1, [pc, #196]	; (80014d0 <HAL_RCC_OscConfig+0x50c>)
 800140a:	fab3 f283 	clz	r2, r3
 800140e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001410:	4001      	ands	r1, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001412:	4e2d      	ldr	r6, [pc, #180]	; (80014c8 <HAL_RCC_OscConfig+0x504>)
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001414:	4093      	lsls	r3, r2
 8001416:	430b      	orrs	r3, r1
 8001418:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800141a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800141c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800141e:	f023 030c 	bic.w	r3, r3, #12
 8001422:	4313      	orrs	r3, r2
 8001424:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001426:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001428:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800142a:	f023 0302 	bic.w	r3, r3, #2
 800142e:	4313      	orrs	r3, r2
 8001430:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001432:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001438:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800143a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800143c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001440:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001442:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001444:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001448:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 800144a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8001452:	682b      	ldr	r3, [r5, #0]
 8001454:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001458:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800145a:	f7fe ff81 	bl	8000360 <HAL_GetTick>
 800145e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001460:	e005      	b.n	800146e <HAL_RCC_OscConfig+0x4aa>
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001462:	f7fe ff7d 	bl	8000360 <HAL_GetTick>
 8001466:	1b00      	subs	r0, r0, r4
 8001468:	2802      	cmp	r0, #2
 800146a:	f63f af4e 	bhi.w	800130a <HAL_RCC_OscConfig+0x346>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800146e:	6833      	ldr	r3, [r6, #0]
 8001470:	019a      	lsls	r2, r3, #6
 8001472:	d5f6      	bpl.n	8001462 <HAL_RCC_OscConfig+0x49e>
 8001474:	e697      	b.n	80011a6 <HAL_RCC_OscConfig+0x1e2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001476:	4b14      	ldr	r3, [pc, #80]	; (80014c8 <HAL_RCC_OscConfig+0x504>)
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001478:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800147c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800147e:	461d      	mov	r5, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001480:	f022 0201 	bic.w	r2, r2, #1
 8001484:	671a      	str	r2, [r3, #112]	; 0x70
 8001486:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001488:	f022 0204 	bic.w	r2, r2, #4
 800148c:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 800148e:	f7fe ff67 	bl	8000360 <HAL_GetTick>
 8001492:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001494:	e005      	b.n	80014a2 <HAL_RCC_OscConfig+0x4de>
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001496:	f7fe ff63 	bl	8000360 <HAL_GetTick>
 800149a:	1b80      	subs	r0, r0, r6
 800149c:	42b8      	cmp	r0, r7
 800149e:	f63f af34 	bhi.w	800130a <HAL_RCC_OscConfig+0x346>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014a2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80014a4:	0798      	lsls	r0, r3, #30
 80014a6:	d4f6      	bmi.n	8001496 <HAL_RCC_OscConfig+0x4d2>
 80014a8:	e660      	b.n	800116c <HAL_RCC_OscConfig+0x1a8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014aa:	4a07      	ldr	r2, [pc, #28]	; (80014c8 <HAL_RCC_OscConfig+0x504>)
 80014ac:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80014ae:	f043 0301 	orr.w	r3, r3, #1
 80014b2:	6713      	str	r3, [r2, #112]	; 0x70
 80014b4:	e6fd      	b.n	80012b2 <HAL_RCC_OscConfig+0x2ee>
 80014b6:	f042 0204 	orr.w	r2, r2, #4
 80014ba:	671a      	str	r2, [r3, #112]	; 0x70
 80014bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80014be:	f042 0201 	orr.w	r2, r2, #1
 80014c2:	671a      	str	r2, [r3, #112]	; 0x70
 80014c4:	e6f5      	b.n	80012b2 <HAL_RCC_OscConfig+0x2ee>
 80014c6:	bf00      	nop
 80014c8:	58024400 	.word	0x58024400
 80014cc:	fffffc0c 	.word	0xfffffc0c
 80014d0:	ffff0007 	.word	0xffff0007

080014d4 <HAL_RCC_GetSysClockFreq>:
 uint32_t pllp = 1, pllsource = 0, pllm = 1 ,pllfracen =0 , hsivalue = 0;
 float fracn1=0, pllvco = 0;
 uint32_t sysclockfreq = 0;
  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014d4:	4a47      	ldr	r2, [pc, #284]	; (80015f4 <HAL_RCC_GetSysClockFreq+0x120>)
 80014d6:	6913      	ldr	r3, [r2, #16]
 80014d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80014dc:	2b10      	cmp	r3, #16
 80014de:	d04b      	beq.n	8001578 <HAL_RCC_GetSysClockFreq+0xa4>
 80014e0:	2b18      	cmp	r3, #24
 80014e2:	d007      	beq.n	80014f4 <HAL_RCC_GetSysClockFreq+0x20>
 80014e4:	b10b      	cbz	r3, 80014ea <HAL_RCC_GetSysClockFreq+0x16>
      }
      
    break;

  case 0x08:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80014e6:	4844      	ldr	r0, [pc, #272]	; (80015f8 <HAL_RCC_GetSysClockFreq+0x124>)
 80014e8:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80014ea:	6813      	ldr	r3, [r2, #0]
 80014ec:	0699      	lsls	r1, r3, #26
 80014ee:	d445      	bmi.n	800157c <HAL_RCC_GetSysClockFreq+0xa8>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80014f0:	4842      	ldr	r0, [pc, #264]	; (80015fc <HAL_RCC_GetSysClockFreq+0x128>)
  default:
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
 80014f2:	4770      	bx	lr
{
 80014f4:	b410      	push	{r4}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80014f6:	6a94      	ldr	r4, [r2, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80014f8:	6a90      	ldr	r0, [r2, #40]	; 0x28
    pllfracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80014fa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80014fc:	f004 0403 	and.w	r4, r4, #3
    fracn1 = (pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001500:	6b53      	ldr	r3, [r2, #52]	; 0x34
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001502:	f3c0 1005 	ubfx	r0, r0, #4, #6
    pllfracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8001506:	f001 0101 	and.w	r1, r1, #1
    switch (pllsource)
 800150a:	2c01      	cmp	r4, #1
    fracn1 = (pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800150c:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8001510:	fb01 f103 	mul.w	r1, r1, r3
 8001514:	ee07 1a90 	vmov	s15, r1
 8001518:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800151c:	d034      	beq.n	8001588 <HAL_RCC_GetSysClockFreq+0xb4>
 800151e:	d33e      	bcc.n	800159e <HAL_RCC_GetSysClockFreq+0xca>
 8001520:	2c02      	cmp	r4, #2
 8001522:	d131      	bne.n	8001588 <HAL_RCC_GetSysClockFreq+0xb4>
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8001524:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001526:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800152a:	ed9f 6a35 	vldr	s12, [pc, #212]	; 8001600 <HAL_RCC_GetSysClockFreq+0x12c>
 800152e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001532:	ee07 3a90 	vmov	s15, r3
 8001536:	4b33      	ldr	r3, [pc, #204]	; (8001604 <HAL_RCC_GetSysClockFreq+0x130>)
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8001538:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800153c:	fbb3 f3f0 	udiv	r3, r3, r0
 8001540:	eee7 7a06 	vfma.f32	s15, s14, s12
 8001544:	ee07 3a10 	vmov	s14, r3
 8001548:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800154c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001550:	ee67 7a87 	vmul.f32	s15, s15, s14
    pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1 ) ;
 8001554:	4b27      	ldr	r3, [pc, #156]	; (80015f4 <HAL_RCC_GetSysClockFreq+0x120>)
}
 8001556:	f85d 4b04 	ldr.w	r4, [sp], #4
    pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1 ) ;
 800155a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8001560:	3301      	adds	r3, #1
    sysclockfreq =  (uint32_t)(pllvco/pllp);
 8001562:	ee07 3a10 	vmov	s14, r3
 8001566:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800156a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800156e:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8001572:	ee17 0a90 	vmov	r0, s15
}
 8001576:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8001578:	4822      	ldr	r0, [pc, #136]	; (8001604 <HAL_RCC_GetSysClockFreq+0x130>)
 800157a:	4770      	bx	lr
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800157c:	6813      	ldr	r3, [r2, #0]
 800157e:	481f      	ldr	r0, [pc, #124]	; (80015fc <HAL_RCC_GetSysClockFreq+0x128>)
 8001580:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8001584:	40d8      	lsrs	r0, r3
 8001586:	4770      	bx	lr
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8001588:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800158a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800158e:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 8001600 <HAL_RCC_GetSysClockFreq+0x12c>
 8001592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001596:	ee07 3a90 	vmov	s15, r3
 800159a:	4b17      	ldr	r3, [pc, #92]	; (80015f8 <HAL_RCC_GetSysClockFreq+0x124>)
 800159c:	e7cc      	b.n	8001538 <HAL_RCC_GetSysClockFreq+0x64>
     if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800159e:	6813      	ldr	r3, [r2, #0]
 80015a0:	069b      	lsls	r3, r3, #26
 80015a2:	d51c      	bpl.n	80015de <HAL_RCC_GetSysClockFreq+0x10a>
        hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80015a4:	6811      	ldr	r1, [r2, #0]
        pllvco = ( hsivalue / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 80015a6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80015aa:	6b12      	ldr	r2, [r2, #48]	; 0x30
        hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80015ac:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 80015b0:	4b12      	ldr	r3, [pc, #72]	; (80015fc <HAL_RCC_GetSysClockFreq+0x128>)
        pllvco = ( hsivalue / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 80015b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80015b6:	eddf 5a12 	vldr	s11, [pc, #72]	; 8001600 <HAL_RCC_GetSysClockFreq+0x12c>
        hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80015ba:	40cb      	lsrs	r3, r1
        pllvco = ( hsivalue / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 80015bc:	ee07 2a90 	vmov	s15, r2
 80015c0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015c4:	fbb3 f3f0 	udiv	r3, r3, r0
 80015c8:	eee7 6a25 	vfma.f32	s13, s14, s11
 80015cc:	ee07 3a90 	vmov	s15, r3
 80015d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015d4:	ee36 7a86 	vadd.f32	s14, s13, s12
 80015d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015dc:	e7ba      	b.n	8001554 <HAL_RCC_GetSysClockFreq+0x80>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 80015de:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80015e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80015e4:	ed9f 6a06 	vldr	s12, [pc, #24]	; 8001600 <HAL_RCC_GetSysClockFreq+0x12c>
 80015e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015ec:	ee07 3a90 	vmov	s15, r3
 80015f0:	4b02      	ldr	r3, [pc, #8]	; (80015fc <HAL_RCC_GetSysClockFreq+0x128>)
 80015f2:	e7a1      	b.n	8001538 <HAL_RCC_GetSysClockFreq+0x64>
 80015f4:	58024400 	.word	0x58024400
 80015f8:	003d0900 	.word	0x003d0900
 80015fc:	03d09000 	.word	0x03d09000
 8001600:	39000000 	.word	0x39000000
 8001604:	00f42400 	.word	0x00f42400

08001608 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001608:	4a69      	ldr	r2, [pc, #420]	; (80017b0 <HAL_RCC_ClockConfig+0x1a8>)
 800160a:	6813      	ldr	r3, [r2, #0]
 800160c:	f003 0307 	and.w	r3, r3, #7
 8001610:	428b      	cmp	r3, r1
 8001612:	d20b      	bcs.n	800162c <HAL_RCC_ClockConfig+0x24>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001614:	6813      	ldr	r3, [r2, #0]
 8001616:	f023 0307 	bic.w	r3, r3, #7
 800161a:	430b      	orrs	r3, r1
 800161c:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800161e:	6813      	ldr	r3, [r2, #0]
 8001620:	f003 0307 	and.w	r3, r3, #7
 8001624:	4299      	cmp	r1, r3
 8001626:	d001      	beq.n	800162c <HAL_RCC_ClockConfig+0x24>
      return HAL_ERROR;
 8001628:	2001      	movs	r0, #1
}
 800162a:	4770      	bx	lr
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800162c:	6803      	ldr	r3, [r0, #0]
{
 800162e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001632:	079c      	lsls	r4, r3, #30
 8001634:	d506      	bpl.n	8001644 <HAL_RCC_ClockConfig+0x3c>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001636:	4c5f      	ldr	r4, [pc, #380]	; (80017b4 <HAL_RCC_ClockConfig+0x1ac>)
 8001638:	68c5      	ldr	r5, [r0, #12]
 800163a:	69a2      	ldr	r2, [r4, #24]
 800163c:	f022 020f 	bic.w	r2, r2, #15
 8001640:	432a      	orrs	r2, r5
 8001642:	61a2      	str	r2, [r4, #24]
 8001644:	4606      	mov	r6, r0
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001646:	07d8      	lsls	r0, r3, #31
 8001648:	460c      	mov	r4, r1
 800164a:	d52f      	bpl.n	80016ac <HAL_RCC_ClockConfig+0xa4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800164c:	4a59      	ldr	r2, [pc, #356]	; (80017b4 <HAL_RCC_ClockConfig+0x1ac>)
 800164e:	68b1      	ldr	r1, [r6, #8]
 8001650:	6993      	ldr	r3, [r2, #24]
 8001652:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001656:	430b      	orrs	r3, r1
 8001658:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800165a:	6873      	ldr	r3, [r6, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800165c:	6812      	ldr	r2, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800165e:	2b02      	cmp	r3, #2
 8001660:	f000 809e 	beq.w	80017a0 <HAL_RCC_ClockConfig+0x198>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001664:	2b03      	cmp	r3, #3
 8001666:	f000 8094 	beq.w	8001792 <HAL_RCC_ClockConfig+0x18a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800166a:	2b01      	cmp	r3, #1
 800166c:	f000 809c 	beq.w	80017a8 <HAL_RCC_ClockConfig+0x1a0>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001670:	0755      	lsls	r5, r2, #29
 8001672:	d52b      	bpl.n	80016cc <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001674:	4d4f      	ldr	r5, [pc, #316]	; (80017b4 <HAL_RCC_ClockConfig+0x1ac>)
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001676:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800167a:	692a      	ldr	r2, [r5, #16]
 800167c:	f022 0207 	bic.w	r2, r2, #7
 8001680:	4313      	orrs	r3, r2
 8001682:	612b      	str	r3, [r5, #16]
      tickstart = HAL_GetTick();
 8001684:	f7fe fe6c 	bl	8000360 <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001688:	6873      	ldr	r3, [r6, #4]
      tickstart = HAL_GetTick();
 800168a:	4607      	mov	r7, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800168c:	2b02      	cmp	r3, #2
 800168e:	d064      	beq.n	800175a <HAL_RCC_ClockConfig+0x152>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001690:	2b03      	cmp	r3, #3
 8001692:	d06d      	beq.n	8001770 <HAL_RCC_ClockConfig+0x168>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001694:	2b01      	cmp	r3, #1
 8001696:	d105      	bne.n	80016a4 <HAL_RCC_ClockConfig+0x9c>
 8001698:	e075      	b.n	8001786 <HAL_RCC_ClockConfig+0x17e>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800169a:	f7fe fe61 	bl	8000360 <HAL_GetTick>
 800169e:	1bc0      	subs	r0, r0, r7
 80016a0:	4540      	cmp	r0, r8
 80016a2:	d87a      	bhi.n	800179a <HAL_RCC_ClockConfig+0x192>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 80016a4:	692b      	ldr	r3, [r5, #16]
 80016a6:	f013 0f38 	tst.w	r3, #56	; 0x38
 80016aa:	d1f6      	bne.n	800169a <HAL_RCC_ClockConfig+0x92>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80016ac:	4a40      	ldr	r2, [pc, #256]	; (80017b0 <HAL_RCC_ClockConfig+0x1a8>)
 80016ae:	6813      	ldr	r3, [r2, #0]
 80016b0:	f003 0307 	and.w	r3, r3, #7
 80016b4:	429c      	cmp	r4, r3
 80016b6:	d20c      	bcs.n	80016d2 <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016b8:	6813      	ldr	r3, [r2, #0]
 80016ba:	f023 0307 	bic.w	r3, r3, #7
 80016be:	4323      	orrs	r3, r4
 80016c0:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016c2:	6813      	ldr	r3, [r2, #0]
 80016c4:	f003 0307 	and.w	r3, r3, #7
 80016c8:	429c      	cmp	r4, r3
 80016ca:	d002      	beq.n	80016d2 <HAL_RCC_ClockConfig+0xca>
      return HAL_ERROR;
 80016cc:	2001      	movs	r0, #1
 80016ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80016d2:	6833      	ldr	r3, [r6, #0]
 80016d4:	0758      	lsls	r0, r3, #29
 80016d6:	d506      	bpl.n	80016e6 <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80016d8:	4936      	ldr	r1, [pc, #216]	; (80017b4 <HAL_RCC_ClockConfig+0x1ac>)
 80016da:	6930      	ldr	r0, [r6, #16]
 80016dc:	698a      	ldr	r2, [r1, #24]
 80016de:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80016e2:	4302      	orrs	r2, r0
 80016e4:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016e6:	0719      	lsls	r1, r3, #28
 80016e8:	d506      	bpl.n	80016f8 <HAL_RCC_ClockConfig+0xf0>
    MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80016ea:	4932      	ldr	r1, [pc, #200]	; (80017b4 <HAL_RCC_ClockConfig+0x1ac>)
 80016ec:	6970      	ldr	r0, [r6, #20]
 80016ee:	69ca      	ldr	r2, [r1, #28]
 80016f0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80016f4:	4302      	orrs	r2, r0
 80016f6:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016f8:	06da      	lsls	r2, r3, #27
 80016fa:	d506      	bpl.n	800170a <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80016fc:	492d      	ldr	r1, [pc, #180]	; (80017b4 <HAL_RCC_ClockConfig+0x1ac>)
 80016fe:	69b0      	ldr	r0, [r6, #24]
 8001700:	69ca      	ldr	r2, [r1, #28]
 8001702:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001706:	4302      	orrs	r2, r0
 8001708:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800170a:	069b      	lsls	r3, r3, #26
 800170c:	d506      	bpl.n	800171c <HAL_RCC_ClockConfig+0x114>
    MODIFY_REG(RCC->D3CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB4CLKDivider) );
 800170e:	4a29      	ldr	r2, [pc, #164]	; (80017b4 <HAL_RCC_ClockConfig+0x1ac>)
 8001710:	69f1      	ldr	r1, [r6, #28]
 8001712:	6a13      	ldr	r3, [r2, #32]
 8001714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001718:	430b      	orrs	r3, r1
 800171a:	6213      	str	r3, [r2, #32]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> POSITION_VAL(RCC_D1CFGR_D1CPRE_0)];
 800171c:	f7ff feda 	bl	80014d4 <HAL_RCC_GetSysClockFreq>
 8001720:	4b24      	ldr	r3, [pc, #144]	; (80017b4 <HAL_RCC_ClockConfig+0x1ac>)
 8001722:	4601      	mov	r1, r0
 8001724:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	fa92 f2a2 	rbit	r2, r2
 800172e:	fab2 f282 	clz	r2, r2
 8001732:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001736:	4c20      	ldr	r4, [pc, #128]	; (80017b8 <HAL_RCC_ClockConfig+0x1b0>)
  HAL_InitTick (TICK_INT_PRIORITY);
 8001738:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> POSITION_VAL(RCC_D1CFGR_D1CPRE_0)];
 800173a:	40d3      	lsrs	r3, r2
 800173c:	4a1f      	ldr	r2, [pc, #124]	; (80017bc <HAL_RCC_ClockConfig+0x1b4>)
 800173e:	5ce3      	ldrb	r3, [r4, r3]
 8001740:	fa21 f303 	lsr.w	r3, r1, r3
 8001744:	6013      	str	r3, [r2, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001746:	f7fe fdc7 	bl	80002d8 <HAL_InitTick>
  return HAL_OK;
 800174a:	2000      	movs	r0, #0
}
 800174c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001750:	f7fe fe06 	bl	8000360 <HAL_GetTick>
 8001754:	1bc0      	subs	r0, r0, r7
 8001756:	4540      	cmp	r0, r8
 8001758:	d81f      	bhi.n	800179a <HAL_RCC_ClockConfig+0x192>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 800175a:	692b      	ldr	r3, [r5, #16]
 800175c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001760:	2b10      	cmp	r3, #16
 8001762:	d1f5      	bne.n	8001750 <HAL_RCC_ClockConfig+0x148>
 8001764:	e7a2      	b.n	80016ac <HAL_RCC_ClockConfig+0xa4>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001766:	f7fe fdfb 	bl	8000360 <HAL_GetTick>
 800176a:	1bc0      	subs	r0, r0, r7
 800176c:	4540      	cmp	r0, r8
 800176e:	d814      	bhi.n	800179a <HAL_RCC_ClockConfig+0x192>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001770:	692b      	ldr	r3, [r5, #16]
 8001772:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001776:	2b18      	cmp	r3, #24
 8001778:	d1f5      	bne.n	8001766 <HAL_RCC_ClockConfig+0x15e>
 800177a:	e797      	b.n	80016ac <HAL_RCC_ClockConfig+0xa4>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800177c:	f7fe fdf0 	bl	8000360 <HAL_GetTick>
 8001780:	1bc0      	subs	r0, r0, r7
 8001782:	4540      	cmp	r0, r8
 8001784:	d809      	bhi.n	800179a <HAL_RCC_ClockConfig+0x192>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_CSI)
 8001786:	692b      	ldr	r3, [r5, #16]
 8001788:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800178c:	2b08      	cmp	r3, #8
 800178e:	d1f5      	bne.n	800177c <HAL_RCC_ClockConfig+0x174>
 8001790:	e78c      	b.n	80016ac <HAL_RCC_ClockConfig+0xa4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001792:	0192      	lsls	r2, r2, #6
 8001794:	f53f af6e 	bmi.w	8001674 <HAL_RCC_ClockConfig+0x6c>
 8001798:	e798      	b.n	80016cc <HAL_RCC_ClockConfig+0xc4>
            return HAL_TIMEOUT;
 800179a:	2003      	movs	r0, #3
 800179c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017a0:	0391      	lsls	r1, r2, #14
 80017a2:	f53f af67 	bmi.w	8001674 <HAL_RCC_ClockConfig+0x6c>
 80017a6:	e791      	b.n	80016cc <HAL_RCC_ClockConfig+0xc4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
 80017a8:	05d7      	lsls	r7, r2, #23
 80017aa:	f53f af63 	bmi.w	8001674 <HAL_RCC_ClockConfig+0x6c>
 80017ae:	e78d      	b.n	80016cc <HAL_RCC_ClockConfig+0xc4>
 80017b0:	52002000 	.word	0x52002000
 80017b4:	58024400 	.word	0x58024400
 80017b8:	08004224 	.word	0x08004224
 80017bc:	20000008 	.word	0x20000008

080017c0 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2P_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLL2R_VALUE(pll2->PLL2R));
  assert_param(IS_RCC_PLL2Q_VALUE(pll2->PLL2Q));
  
  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80017c0:	4a2c      	ldr	r2, [pc, #176]	; (8001874 <RCCEx_PLL2_Config+0xb4>)
 80017c2:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80017c4:	f003 0303 	and.w	r3, r3, #3
 80017c8:	2b03      	cmp	r3, #3
 80017ca:	d050      	beq.n	800186e <RCCEx_PLL2_Config+0xae>
  
  
  else    
  {  
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80017cc:	6813      	ldr	r3, [r2, #0]
 80017ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
{
 80017d2:	b570      	push	{r4, r5, r6, lr}
    __HAL_RCC_PLL2_DISABLE();
 80017d4:	6013      	str	r3, [r2, #0]
 80017d6:	4606      	mov	r6, r0
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80017d8:	4614      	mov	r4, r2
    tickstart = HAL_GetTick();
 80017da:	f7fe fdc1 	bl	8000360 <HAL_GetTick>
 80017de:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80017e0:	e004      	b.n	80017ec <RCCEx_PLL2_Config+0x2c>
    {
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80017e2:	f7fe fdbd 	bl	8000360 <HAL_GetTick>
 80017e6:	1b40      	subs	r0, r0, r5
 80017e8:	2802      	cmp	r0, #2
 80017ea:	d83e      	bhi.n	800186a <RCCEx_PLL2_Config+0xaa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80017ec:	6823      	ldr	r3, [r4, #0]
 80017ee:	011a      	lsls	r2, r3, #4
 80017f0:	d4f7      	bmi.n	80017e2 <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }
    
    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80017f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80017f4:	6832      	ldr	r2, [r6, #0]
 80017f6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
 80017fa:	4d1e      	ldr	r5, [pc, #120]	; (8001874 <RCCEx_PLL2_Config+0xb4>)
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80017fc:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8001800:	62a3      	str	r3, [r4, #40]	; 0x28
 8001802:	68f2      	ldr	r2, [r6, #12]
 8001804:	68b3      	ldr	r3, [r6, #8]
 8001806:	1e51      	subs	r1, r2, #1
 8001808:	6870      	ldr	r0, [r6, #4]
 800180a:	3b01      	subs	r3, #1
 800180c:	6932      	ldr	r2, [r6, #16]
 800180e:	0409      	lsls	r1, r1, #16
 8001810:	3801      	subs	r0, #1
 8001812:	025b      	lsls	r3, r3, #9
 8001814:	3a01      	subs	r2, #1
 8001816:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 800181a:	f3c0 0008 	ubfx	r0, r0, #0, #9
 800181e:	b29b      	uxth	r3, r3
 8001820:	0612      	lsls	r2, r2, #24
 8001822:	430b      	orrs	r3, r1
 8001824:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001828:	4303      	orrs	r3, r0
 800182a:	4313      	orrs	r3, r2
 800182c:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800182e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001830:	6972      	ldr	r2, [r6, #20]
 8001832:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001836:	4313      	orrs	r3, r2
 8001838:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800183a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800183c:	69b2      	ldr	r2, [r6, #24]
 800183e:	f023 0320 	bic.w	r3, r3, #32
 8001842:	4313      	orrs	r3, r2
 8001844:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2_ENABLE();
 8001846:	6823      	ldr	r3, [r4, #0]
 8001848:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800184c:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800184e:	f7fe fd87 	bl	8000360 <HAL_GetTick>
 8001852:	4604      	mov	r4, r0
 8001854:	e004      	b.n	8001860 <RCCEx_PLL2_Config+0xa0>
    {
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8001856:	f7fe fd83 	bl	8000360 <HAL_GetTick>
 800185a:	1b00      	subs	r0, r0, r4
 800185c:	2802      	cmp	r0, #2
 800185e:	d804      	bhi.n	800186a <RCCEx_PLL2_Config+0xaa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
 8001860:	682b      	ldr	r3, [r5, #0]
 8001862:	011b      	lsls	r3, r3, #4
 8001864:	d5f7      	bpl.n	8001856 <RCCEx_PLL2_Config+0x96>
    }
    
  }
  
  
  return status;
 8001866:	2000      	movs	r0, #0
 8001868:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_TIMEOUT;
 800186a:	2003      	movs	r0, #3
 800186c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800186e:	2001      	movs	r0, #1
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	58024400 	.word	0x58024400

08001878 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3P_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLL3R_VALUE(pll3->PLL3R));
  assert_param(IS_RCC_PLL3Q_VALUE(pll3->PLL3Q));
  
  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001878:	4a2c      	ldr	r2, [pc, #176]	; (800192c <RCCEx_PLL3_Config+0xb4>)
 800187a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800187c:	f003 0303 	and.w	r3, r3, #3
 8001880:	2b03      	cmp	r3, #3
 8001882:	d050      	beq.n	8001926 <RCCEx_PLL3_Config+0xae>
  
  
  else    
  { 
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8001884:	6813      	ldr	r3, [r2, #0]
 8001886:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
{
 800188a:	b570      	push	{r4, r5, r6, lr}
    __HAL_RCC_PLL3_DISABLE();
 800188c:	6013      	str	r3, [r2, #0]
 800188e:	4606      	mov	r6, r0
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
 8001890:	4614      	mov	r4, r2
    tickstart = HAL_GetTick();
 8001892:	f7fe fd65 	bl	8000360 <HAL_GetTick>
 8001896:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
 8001898:	e004      	b.n	80018a4 <RCCEx_PLL3_Config+0x2c>
    {
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800189a:	f7fe fd61 	bl	8000360 <HAL_GetTick>
 800189e:	1b40      	subs	r0, r0, r5
 80018a0:	2802      	cmp	r0, #2
 80018a2:	d83e      	bhi.n	8001922 <RCCEx_PLL3_Config+0xaa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
 80018a4:	6823      	ldr	r3, [r4, #0]
 80018a6:	009a      	lsls	r2, r3, #2
 80018a8:	d4f7      	bmi.n	800189a <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }
    
    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80018aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80018ac:	6832      	ldr	r2, [r6, #0]
 80018ae:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
 80018b2:	4d1e      	ldr	r5, [pc, #120]	; (800192c <RCCEx_PLL3_Config+0xb4>)
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80018b4:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80018b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80018ba:	68f2      	ldr	r2, [r6, #12]
 80018bc:	68b3      	ldr	r3, [r6, #8]
 80018be:	1e51      	subs	r1, r2, #1
 80018c0:	6870      	ldr	r0, [r6, #4]
 80018c2:	3b01      	subs	r3, #1
 80018c4:	6932      	ldr	r2, [r6, #16]
 80018c6:	0409      	lsls	r1, r1, #16
 80018c8:	3801      	subs	r0, #1
 80018ca:	025b      	lsls	r3, r3, #9
 80018cc:	3a01      	subs	r2, #1
 80018ce:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 80018d2:	f3c0 0008 	ubfx	r0, r0, #0, #9
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	0612      	lsls	r2, r2, #24
 80018da:	430b      	orrs	r3, r1
 80018dc:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80018e0:	4303      	orrs	r3, r0
 80018e2:	4313      	orrs	r3, r2
 80018e4:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80018e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80018e8:	6972      	ldr	r2, [r6, #20]
 80018ea:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80018ee:	4313      	orrs	r3, r2
 80018f0:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80018f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80018f4:	69b2      	ldr	r2, [r6, #24]
 80018f6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80018fa:	4313      	orrs	r3, r2
 80018fc:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3_ENABLE();
 80018fe:	6823      	ldr	r3, [r4, #0]
 8001900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001904:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001906:	f7fe fd2b 	bl	8000360 <HAL_GetTick>
 800190a:	4604      	mov	r4, r0
 800190c:	e004      	b.n	8001918 <RCCEx_PLL3_Config+0xa0>
    {
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800190e:	f7fe fd27 	bl	8000360 <HAL_GetTick>
 8001912:	1b00      	subs	r0, r0, r4
 8001914:	2802      	cmp	r0, #2
 8001916:	d804      	bhi.n	8001922 <RCCEx_PLL3_Config+0xaa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
 8001918:	682b      	ldr	r3, [r5, #0]
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	d5f7      	bpl.n	800190e <RCCEx_PLL3_Config+0x96>
    }
    
  }
  
  
  return status;
 800191e:	2000      	movs	r0, #0
 8001920:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_TIMEOUT;
 8001922:	2003      	movs	r0, #3
 8001924:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001926:	2001      	movs	r0, #1
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	58024400 	.word	0x58024400

08001930 <HAL_RCCEx_PeriphCLKConfig>:
{
 8001930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX)
 8001934:	6803      	ldr	r3, [r0, #0]
{
 8001936:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX)
 8001938:	f013 6500 	ands.w	r5, r3, #134217728	; 0x8000000
 800193c:	d015      	beq.n	800196a <HAL_RCCEx_PeriphCLKConfig+0x3a>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800193e:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8001940:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8001944:	f000 850e 	beq.w	8002364 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8001948:	f240 8557 	bls.w	80023fa <HAL_RCCEx_PeriphCLKConfig+0xaca>
 800194c:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8001950:	f000 84bb 	beq.w	80022ca <HAL_RCCEx_PeriphCLKConfig+0x99a>
 8001954:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8001958:	f040 8596 	bne.w	8002488 <HAL_RCCEx_PeriphCLKConfig+0xb58>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800195c:	488d      	ldr	r0, [pc, #564]	; (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800195e:	2500      	movs	r5, #0
 8001960:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8001962:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8001966:	430a      	orrs	r2, r1
 8001968:	6502      	str	r2, [r0, #80]	; 0x50
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1)
 800196a:	05de      	lsls	r6, r3, #23
 800196c:	d50a      	bpl.n	8001984 <HAL_RCCEx_PeriphCLKConfig+0x54>
    switch(PeriphClkInit->Sai1ClockSelection)
 800196e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001970:	2a04      	cmp	r2, #4
 8001972:	f200 85b4 	bhi.w	80024de <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8001976:	e8df f012 	tbh	[pc, r2, lsl #1]
 800197a:	048a      	.short	0x048a
 800197c:	04790491 	.word	0x04790491
 8001980:	045a045a 	.word	0x045a045a
 8001984:	462e      	mov	r6, r5
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23)
 8001986:	0598      	lsls	r0, r3, #22
 8001988:	d51f      	bpl.n	80019ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
    switch(PeriphClkInit->Sai23ClockSelection)
 800198a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800198c:	2a80      	cmp	r2, #128	; 0x80
 800198e:	f000 84dc 	beq.w	800234a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8001992:	f200 8562 	bhi.w	800245a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8001996:	2a00      	cmp	r2, #0
 8001998:	f000 848b 	beq.w	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x982>
 800199c:	2a40      	cmp	r2, #64	; 0x40
 800199e:	f040 8563 	bne.w	8002468 <HAL_RCCEx_PeriphCLKConfig+0xb38>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80019a2:	4a7c      	ldr	r2, [pc, #496]	; (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 80019a4:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80019a6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80019a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80019ac:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 80019ae:	f7ff ff07 	bl	80017c0 <RCCEx_PLL2_Config>
 80019b2:	6823      	ldr	r3, [r4, #0]
 80019b4:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80019b6:	2e00      	cmp	r6, #0
 80019b8:	f040 8483 	bne.w	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x992>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80019bc:	4975      	ldr	r1, [pc, #468]	; (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80019be:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80019c0:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80019c2:	f422 72e0 	bic.w	r2, r2, #448	; 0x1c0
 80019c6:	4302      	orrs	r2, r0
 80019c8:	650a      	str	r2, [r1, #80]	; 0x50
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A)
 80019ca:	0559      	lsls	r1, r3, #21
 80019cc:	d523      	bpl.n	8001a16 <HAL_RCCEx_PeriphCLKConfig+0xe6>
    switch(PeriphClkInit->Sai4AClockSelection)
 80019ce:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 80019d2:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 80019d6:	f000 84dc 	beq.w	8002392 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80019da:	f200 8517 	bhi.w	800240c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80019de:	2a00      	cmp	r2, #0
 80019e0:	f000 848e 	beq.w	8002300 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80019e4:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80019e8:	f040 8518 	bne.w	800241c <HAL_RCCEx_PeriphCLKConfig+0xaec>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80019ec:	4a69      	ldr	r2, [pc, #420]	; (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 80019ee:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80019f0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80019f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80019f6:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 80019f8:	f7ff fee2 	bl	80017c0 <RCCEx_PLL2_Config>
 80019fc:	6823      	ldr	r3, [r4, #0]
 80019fe:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001a00:	2e00      	cmp	r6, #0
 8001a02:	f040 8485 	bne.w	8002310 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8001a06:	4963      	ldr	r1, [pc, #396]	; (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001a08:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 8001a0c:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8001a0e:	f422 0260 	bic.w	r2, r2, #14680064	; 0xe00000
 8001a12:	4302      	orrs	r2, r0
 8001a14:	658a      	str	r2, [r1, #88]	; 0x58
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B)
 8001a16:	051a      	lsls	r2, r3, #20
 8001a18:	d523      	bpl.n	8001a62 <HAL_RCCEx_PeriphCLKConfig+0x132>
    switch(PeriphClkInit->Sai4BClockSelection)
 8001a1a:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 8001a1e:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 8001a22:	f000 8485 	beq.w	8002330 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8001a26:	f200 850b 	bhi.w	8002440 <HAL_RCCEx_PeriphCLKConfig+0xb10>
 8001a2a:	2a00      	cmp	r2, #0
 8001a2c:	f000 845c 	beq.w	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 8001a30:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8001a34:	f040 850c 	bne.w	8002450 <HAL_RCCEx_PeriphCLKConfig+0xb20>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001a38:	4a56      	ldr	r2, [pc, #344]	; (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001a3a:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001a3c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001a3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a42:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001a44:	f7ff febc 	bl	80017c0 <RCCEx_PLL2_Config>
 8001a48:	6823      	ldr	r3, [r4, #0]
 8001a4a:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001a4c:	2e00      	cmp	r6, #0
 8001a4e:	f040 8453 	bne.w	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8001a52:	4950      	ldr	r1, [pc, #320]	; (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001a54:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 8001a58:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8001a5a:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8001a5e:	4302      	orrs	r2, r0
 8001a60:	658a      	str	r2, [r1, #88]	; 0x58
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI)
 8001a62:	019f      	lsls	r7, r3, #6
 8001a64:	d50e      	bpl.n	8001a84 <HAL_RCCEx_PeriphCLKConfig+0x154>
    switch(PeriphClkInit->QspiClockSelection)
 8001a66:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001a68:	2a10      	cmp	r2, #16
 8001a6a:	f000 83eb 	beq.w	8002244 <HAL_RCCEx_PeriphCLKConfig+0x914>
 8001a6e:	f240 8506 	bls.w	800247e <HAL_RCCEx_PeriphCLKConfig+0xb4e>
 8001a72:	2a20      	cmp	r2, #32
 8001a74:	f000 8390 	beq.w	8002198 <HAL_RCCEx_PeriphCLKConfig+0x868>
 8001a78:	2a30      	cmp	r2, #48	; 0x30
 8001a7a:	f000 8397 	beq.w	80021ac <HAL_RCCEx_PeriphCLKConfig+0x87c>
      ret = HAL_ERROR;
 8001a7e:	2601      	movs	r6, #1
      status |= ret;
 8001a80:	4335      	orrs	r5, r6
 8001a82:	b2ed      	uxtb	r5, r5
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123)
 8001a84:	04d8      	lsls	r0, r3, #19
 8001a86:	d521      	bpl.n	8001acc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    switch(PeriphClkInit->Spi123ClockSelection)
 8001a88:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001a8a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001a8e:	f000 8473 	beq.w	8002378 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8001a92:	f200 84c8 	bhi.w	8002426 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 8001a96:	2a00      	cmp	r2, #0
 8001a98:	f000 843e 	beq.w	8002318 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8001a9c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001aa0:	f040 84c9 	bne.w	8002436 <HAL_RCCEx_PeriphCLKConfig+0xb06>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001aa4:	4a3b      	ldr	r2, [pc, #236]	; (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001aa6:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001aa8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001aaa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001aae:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001ab0:	f7ff fe86 	bl	80017c0 <RCCEx_PLL2_Config>
 8001ab4:	6823      	ldr	r3, [r4, #0]
 8001ab6:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001ab8:	2e00      	cmp	r6, #0
 8001aba:	f040 8435 	bne.w	8002328 <HAL_RCCEx_PeriphCLKConfig+0x9f8>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8001abe:	4935      	ldr	r1, [pc, #212]	; (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001ac0:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8001ac2:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8001ac4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001ac8:	4302      	orrs	r2, r0
 8001aca:	650a      	str	r2, [r1, #80]	; 0x50
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45)
 8001acc:	0499      	lsls	r1, r3, #18
 8001ace:	d51f      	bpl.n	8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    switch(PeriphClkInit->Spi45ClockSelection)
 8001ad0:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001ad2:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8001ad6:	f000 83bb 	beq.w	8002250 <HAL_RCCEx_PeriphCLKConfig+0x920>
 8001ada:	f200 82f8 	bhi.w	80020ce <HAL_RCCEx_PeriphCLKConfig+0x79e>
 8001ade:	b16a      	cbz	r2, 8001afc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001ae0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001ae4:	f040 82ff 	bne.w	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8001ae8:	4a2a      	ldr	r2, [pc, #168]	; (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001aea:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8001aec:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001aee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001af2:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001af4:	f7ff fe64 	bl	80017c0 <RCCEx_PLL2_Config>
 8001af8:	6823      	ldr	r3, [r4, #0]
 8001afa:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001afc:	2e00      	cmp	r6, #0
 8001afe:	f040 82f3 	bne.w	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8001b02:	4924      	ldr	r1, [pc, #144]	; (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001b04:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001b06:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8001b08:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8001b0c:	4302      	orrs	r2, r0
 8001b0e:	650a      	str	r2, [r1, #80]	; 0x50
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6)
 8001b10:	045a      	lsls	r2, r3, #17
 8001b12:	d521      	bpl.n	8001b58 <HAL_RCCEx_PeriphCLKConfig+0x228>
    switch(PeriphClkInit->Spi6ClockSelection)
 8001b14:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 8001b18:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8001b1c:	f000 835d 	beq.w	80021da <HAL_RCCEx_PeriphCLKConfig+0x8aa>
 8001b20:	f200 8295 	bhi.w	800204e <HAL_RCCEx_PeriphCLKConfig+0x71e>
 8001b24:	b16a      	cbz	r2, 8001b42 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8001b26:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8001b2a:	f040 829c 	bne.w	8002066 <HAL_RCCEx_PeriphCLKConfig+0x736>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8001b2e:	4a19      	ldr	r2, [pc, #100]	; (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001b30:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8001b32:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001b34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b38:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001b3a:	f7ff fe41 	bl	80017c0 <RCCEx_PLL2_Config>
 8001b3e:	6823      	ldr	r3, [r4, #0]
 8001b40:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001b42:	2e00      	cmp	r6, #0
 8001b44:	f040 8290 	bne.w	8002068 <HAL_RCCEx_PeriphCLKConfig+0x738>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8001b48:	4912      	ldr	r1, [pc, #72]	; (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001b4a:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8001b4e:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8001b50:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8001b54:	4302      	orrs	r2, r0
 8001b56:	658a      	str	r2, [r1, #88]	; 0x58
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN)
 8001b58:	041f      	lsls	r7, r3, #16
 8001b5a:	d50e      	bpl.n	8001b7a <HAL_RCCEx_PeriphCLKConfig+0x24a>
    switch(PeriphClkInit->FdcanClockSelection)
 8001b5c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8001b5e:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8001b62:	f000 8346 	beq.w	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
 8001b66:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8001b6a:	f000 81be 	beq.w	8001eea <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 8001b6e:	2a00      	cmp	r2, #0
 8001b70:	f000 81c5 	beq.w	8001efe <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      ret = HAL_ERROR;
 8001b74:	2601      	movs	r6, #1
      status |= ret;
 8001b76:	4335      	orrs	r5, r6
 8001b78:	b2ed      	uxtb	r5, r5
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC)
 8001b7a:	01d8      	lsls	r0, r3, #7
 8001b7c:	d520      	bpl.n	8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x290>
    switch(PeriphClkInit->FmcClockSelection)
 8001b7e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001b80:	2a03      	cmp	r2, #3
 8001b82:	f200 82a0 	bhi.w	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x796>
 8001b86:	e8df f012 	tbh	[pc, r2, lsl #1]
 8001b8a:	0011      	.short	0x0011
 8001b8c:	000702e7 	.word	0x000702e7
 8001b90:	0011      	.short	0x0011
 8001b92:	bf00      	nop
 8001b94:	58024400 	.word	0x58024400
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8001b98:	4a47      	ldr	r2, [pc, #284]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001b9a:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8001b9c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001b9e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ba2:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001ba4:	f7ff fe0c 	bl	80017c0 <RCCEx_PLL2_Config>
 8001ba8:	6823      	ldr	r3, [r4, #0]
 8001baa:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001bac:	2e00      	cmp	r6, #0
 8001bae:	f040 828b 	bne.w	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x798>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8001bb2:	4941      	ldr	r1, [pc, #260]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001bb4:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001bb6:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8001bb8:	f022 0203 	bic.w	r2, r2, #3
 8001bbc:	4302      	orrs	r2, r0
 8001bbe:	64ca      	str	r2, [r1, #76]	; 0x4c
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC)
 8001bc0:	0259      	lsls	r1, r3, #9
 8001bc2:	f100 81d5 	bmi.w	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x640>
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16)
 8001bc6:	07df      	lsls	r7, r3, #31
 8001bc8:	d543      	bpl.n	8001c52 <HAL_RCCEx_PeriphCLKConfig+0x322>
    switch(PeriphClkInit->Usart16ClockSelection)
 8001bca:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8001bcc:	2a28      	cmp	r2, #40	; 0x28
 8001bce:	f200 8276 	bhi.w	80020be <HAL_RCCEx_PeriphCLKConfig+0x78e>
 8001bd2:	e8df f012 	tbh	[pc, r2, lsl #1]
 8001bd6:	0034      	.short	0x0034
 8001bd8:	02740274 	.word	0x02740274
 8001bdc:	02740274 	.word	0x02740274
 8001be0:	02740274 	.word	0x02740274
 8001be4:	02d20274 	.word	0x02d20274
 8001be8:	02740274 	.word	0x02740274
 8001bec:	02740274 	.word	0x02740274
 8001bf0:	02740274 	.word	0x02740274
 8001bf4:	00290274 	.word	0x00290274
 8001bf8:	02740274 	.word	0x02740274
 8001bfc:	02740274 	.word	0x02740274
 8001c00:	02740274 	.word	0x02740274
 8001c04:	00340274 	.word	0x00340274
 8001c08:	02740274 	.word	0x02740274
 8001c0c:	02740274 	.word	0x02740274
 8001c10:	02740274 	.word	0x02740274
 8001c14:	00340274 	.word	0x00340274
 8001c18:	02740274 	.word	0x02740274
 8001c1c:	02740274 	.word	0x02740274
 8001c20:	02740274 	.word	0x02740274
 8001c24:	00340274 	.word	0x00340274
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);  
 8001c28:	4a23      	ldr	r2, [pc, #140]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001c2a:	f104 0024 	add.w	r0, r4, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);  
 8001c2e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001c30:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c34:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001c36:	f7ff fe1f 	bl	8001878 <RCCEx_PLL3_Config>
 8001c3a:	6823      	ldr	r3, [r4, #0]
 8001c3c:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001c3e:	2e00      	cmp	r6, #0
 8001c40:	f040 823e 	bne.w	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x790>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8001c44:	491c      	ldr	r1, [pc, #112]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001c46:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8001c48:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8001c4a:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8001c4e:	4302      	orrs	r2, r0
 8001c50:	654a      	str	r2, [r1, #84]	; 0x54
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578)
 8001c52:	0798      	lsls	r0, r3, #30
 8001c54:	d520      	bpl.n	8001c98 <HAL_RCCEx_PeriphCLKConfig+0x368>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8001c56:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8001c58:	2a05      	cmp	r2, #5
 8001c5a:	f200 8208 	bhi.w	800206e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8001c5e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8001c62:	0011      	.short	0x0011
 8001c64:	00060281 	.word	0x00060281
 8001c68:	00110011 	.word	0x00110011
 8001c6c:	0011      	.short	0x0011
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);  
 8001c6e:	4a12      	ldr	r2, [pc, #72]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001c70:	f104 0024 	add.w	r0, r4, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);  
 8001c74:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001c76:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c7a:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001c7c:	f7ff fdfc 	bl	8001878 <RCCEx_PLL3_Config>
 8001c80:	6823      	ldr	r3, [r4, #0]
 8001c82:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001c84:	2e00      	cmp	r6, #0
 8001c86:	f040 81f3 	bne.w	8002070 <HAL_RCCEx_PeriphCLKConfig+0x740>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8001c8a:	490b      	ldr	r1, [pc, #44]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001c8c:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8001c8e:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8001c90:	f022 0207 	bic.w	r2, r2, #7
 8001c94:	4302      	orrs	r2, r0
 8001c96:	654a      	str	r2, [r1, #84]	; 0x54
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1)
 8001c98:	0759      	lsls	r1, r3, #29
 8001c9a:	d525      	bpl.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8001c9c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001ca0:	2a05      	cmp	r2, #5
 8001ca2:	f200 8208 	bhi.w	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x786>
 8001ca6:	e8df f012 	tbh	[pc, r2, lsl #1]
 8001caa:	0014      	.short	0x0014
 8001cac:	0009024c 	.word	0x0009024c
 8001cb0:	00140014 	.word	0x00140014
 8001cb4:	0014      	.short	0x0014
 8001cb6:	bf00      	nop
 8001cb8:	58024400 	.word	0x58024400
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);  
 8001cbc:	4ab1      	ldr	r2, [pc, #708]	; (8001f84 <HAL_RCCEx_PeriphCLKConfig+0x654>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001cbe:	f104 0024 	add.w	r0, r4, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);  
 8001cc2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001cc4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001cc8:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001cca:	f7ff fdd5 	bl	8001878 <RCCEx_PLL3_Config>
 8001cce:	6823      	ldr	r3, [r4, #0]
 8001cd0:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001cd2:	2e00      	cmp	r6, #0
 8001cd4:	f040 81f0 	bne.w	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x788>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001cd8:	49aa      	ldr	r1, [pc, #680]	; (8001f84 <HAL_RCCEx_PeriphCLKConfig+0x654>)
 8001cda:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8001cde:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8001ce0:	f022 0207 	bic.w	r2, r2, #7
 8001ce4:	4302      	orrs	r2, r0
 8001ce6:	658a      	str	r2, [r1, #88]	; 0x58
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1)
 8001ce8:	069a      	lsls	r2, r3, #26
 8001cea:	d521      	bpl.n	8001d30 <HAL_RCCEx_PeriphCLKConfig+0x400>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8001cec:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8001cf0:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8001cf4:	f000 8265 	beq.w	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x892>
 8001cf8:	f200 81cd 	bhi.w	8002096 <HAL_RCCEx_PeriphCLKConfig+0x766>
 8001cfc:	b16a      	cbz	r2, 8001d1a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8001cfe:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8001d02:	f040 81d4 	bne.w	80020ae <HAL_RCCEx_PeriphCLKConfig+0x77e>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001d06:	4a9f      	ldr	r2, [pc, #636]	; (8001f84 <HAL_RCCEx_PeriphCLKConfig+0x654>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001d08:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001d0a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001d0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001d10:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001d12:	f7ff fd55 	bl	80017c0 <RCCEx_PLL2_Config>
 8001d16:	6823      	ldr	r3, [r4, #0]
 8001d18:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001d1a:	2e00      	cmp	r6, #0
 8001d1c:	f040 81c8 	bne.w	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x780>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001d20:	4998      	ldr	r1, [pc, #608]	; (8001f84 <HAL_RCCEx_PeriphCLKConfig+0x654>)
 8001d22:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8001d26:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8001d28:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8001d2c:	4302      	orrs	r2, r0
 8001d2e:	654a      	str	r2, [r1, #84]	; 0x54
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2)
 8001d30:	065f      	lsls	r7, r3, #25
 8001d32:	d521      	bpl.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x448>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8001d34:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8001d38:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001d3c:	f000 825f 	beq.w	80021fe <HAL_RCCEx_PeriphCLKConfig+0x8ce>
 8001d40:	f200 8199 	bhi.w	8002076 <HAL_RCCEx_PeriphCLKConfig+0x746>
 8001d44:	b16a      	cbz	r2, 8001d62 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8001d46:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001d4a:	f040 81a0 	bne.w	800208e <HAL_RCCEx_PeriphCLKConfig+0x75e>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001d4e:	4a8d      	ldr	r2, [pc, #564]	; (8001f84 <HAL_RCCEx_PeriphCLKConfig+0x654>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001d50:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001d52:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001d54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001d58:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001d5a:	f7ff fd31 	bl	80017c0 <RCCEx_PLL2_Config>
 8001d5e:	6823      	ldr	r3, [r4, #0]
 8001d60:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001d62:	2e00      	cmp	r6, #0
 8001d64:	f040 8194 	bne.w	8002090 <HAL_RCCEx_PeriphCLKConfig+0x760>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001d68:	4986      	ldr	r1, [pc, #536]	; (8001f84 <HAL_RCCEx_PeriphCLKConfig+0x654>)
 8001d6a:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 8001d6e:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8001d70:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8001d74:	4302      	orrs	r2, r0
 8001d76:	658a      	str	r2, [r1, #88]	; 0x58
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345)
 8001d78:	0618      	lsls	r0, r3, #24
 8001d7a:	d521      	bpl.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8001d7c:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 8001d80:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8001d84:	f000 8247 	beq.w	8002216 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8001d88:	f200 8151 	bhi.w	800202e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
 8001d8c:	b16a      	cbz	r2, 8001daa <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8001d8e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001d92:	f040 8158 	bne.w	8002046 <HAL_RCCEx_PeriphCLKConfig+0x716>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001d96:	4a7b      	ldr	r2, [pc, #492]	; (8001f84 <HAL_RCCEx_PeriphCLKConfig+0x654>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001d98:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001d9a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001d9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001da0:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001da2:	f7ff fd0d 	bl	80017c0 <RCCEx_PLL2_Config>
 8001da6:	6823      	ldr	r3, [r4, #0]
 8001da8:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001daa:	2e00      	cmp	r6, #0
 8001dac:	f040 814c 	bne.w	8002048 <HAL_RCCEx_PeriphCLKConfig+0x718>
      __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8001db0:	4974      	ldr	r1, [pc, #464]	; (8001f84 <HAL_RCCEx_PeriphCLKConfig+0x654>)
 8001db2:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 8001db6:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8001db8:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001dbc:	4302      	orrs	r2, r0
 8001dbe:	658a      	str	r2, [r1, #88]	; 0x58
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123)
 8001dc0:	0719      	lsls	r1, r3, #28
 8001dc2:	d50b      	bpl.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x4ac>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8001dc4:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8001dc8:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8001dcc:	f000 82ff 	beq.w	80023ce <HAL_RCCEx_PeriphCLKConfig+0xa9e>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8001dd0:	486c      	ldr	r0, [pc, #432]	; (8001f84 <HAL_RCCEx_PeriphCLKConfig+0x654>)
 8001dd2:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8001dd4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	6542      	str	r2, [r0, #84]	; 0x54
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4)
 8001ddc:	06da      	lsls	r2, r3, #27
 8001dde:	d50b      	bpl.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8001de0:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8001de4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8001de8:	f000 82fc 	beq.w	80023e4 <HAL_RCCEx_PeriphCLKConfig+0xab4>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001dec:	4865      	ldr	r0, [pc, #404]	; (8001f84 <HAL_RCCEx_PeriphCLKConfig+0x654>)
 8001dee:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8001df0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001df4:	430a      	orrs	r2, r1
 8001df6:	6582      	str	r2, [r0, #88]	; 0x58
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC)
 8001df8:	031f      	lsls	r7, r3, #12
 8001dfa:	d50f      	bpl.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>
    switch(PeriphClkInit->AdcClockSelection)
 8001dfc:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 8001e00:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001e04:	f000 8086 	beq.w	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
 8001e08:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8001e0c:	f000 808d 	beq.w	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x5fa>
 8001e10:	2a00      	cmp	r2, #0
 8001e12:	f000 82d1 	beq.w	80023b8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      ret = HAL_ERROR;
 8001e16:	2601      	movs	r6, #1
      status |= ret;
 8001e18:	4335      	orrs	r5, r6
 8001e1a:	b2ed      	uxtb	r5, r5
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB)
 8001e1c:	0358      	lsls	r0, r3, #13
 8001e1e:	d510      	bpl.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x512>
    switch(PeriphClkInit->UsbClockSelection)
 8001e20:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8001e24:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8001e28:	f000 808b 	beq.w	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8001e2c:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8001e30:	f000 8092 	beq.w	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x628>
 8001e34:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8001e38:	f000 82b8 	beq.w	80023ac <HAL_RCCEx_PeriphCLKConfig+0xa7c>
      ret = HAL_ERROR;
 8001e3c:	2601      	movs	r6, #1
      status |= ret;
 8001e3e:	4335      	orrs	r5, r6
 8001e40:	b2ed      	uxtb	r5, r5
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC)
 8001e42:	03d9      	lsls	r1, r3, #15
 8001e44:	d50a      	bpl.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    switch(PeriphClkInit->SdmmcClockSelection)
 8001e46:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8001e48:	2a00      	cmp	r2, #0
 8001e4a:	f000 815f 	beq.w	800210c <HAL_RCCEx_PeriphCLKConfig+0x7dc>
 8001e4e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001e52:	f000 816b 	beq.w	800212c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      ret = HAL_ERROR;
 8001e56:	2601      	movs	r6, #1
      status |= ret;
 8001e58:	4335      	orrs	r5, r6
 8001e5a:	b2ed      	uxtb	r5, r5
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC)
 8001e5c:	009a      	lsls	r2, r3, #2
 8001e5e:	f100 80cd 	bmi.w	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x6cc>
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG)
 8001e62:	039f      	lsls	r7, r3, #14
 8001e64:	d511      	bpl.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch(PeriphClkInit->RngClockSelection)
 8001e66:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8001e68:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001e6c:	f000 813f 	beq.w	80020ee <HAL_RCCEx_PeriphCLKConfig+0x7be>
 8001e70:	f240 818e 	bls.w	8002190 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8001e74:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8001e78:	f000 813e 	beq.w	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 8001e7c:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001e80:	f000 813a 	beq.w	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      ret = HAL_ERROR;
 8001e84:	2601      	movs	r6, #1
      status |= ret;
 8001e86:	4335      	orrs	r5, r6
 8001e88:	b2ed      	uxtb	r5, r5
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1)
 8001e8a:	02de      	lsls	r6, r3, #11
 8001e8c:	d506      	bpl.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x56c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001e8e:	493d      	ldr	r1, [pc, #244]	; (8001f84 <HAL_RCCEx_PeriphCLKConfig+0x654>)
 8001e90:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8001e92:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8001e94:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001e98:	4302      	orrs	r2, r0
 8001e9a:	650a      	str	r2, [r1, #80]	; 0x50
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1)
 8001e9c:	00d8      	lsls	r0, r3, #3
 8001e9e:	d507      	bpl.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8001ea0:	4938      	ldr	r1, [pc, #224]	; (8001f84 <HAL_RCCEx_PeriphCLKConfig+0x654>)
 8001ea2:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 8001ea6:	690a      	ldr	r2, [r1, #16]
 8001ea8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001eac:	4302      	orrs	r2, r0
 8001eae:	610a      	str	r2, [r1, #16]
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1)
 8001eb0:	0299      	lsls	r1, r3, #10
 8001eb2:	d506      	bpl.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0x592>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001eb4:	4933      	ldr	r1, [pc, #204]	; (8001f84 <HAL_RCCEx_PeriphCLKConfig+0x654>)
 8001eb6:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8001eb8:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8001eba:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001ebe:	4302      	orrs	r2, r0
 8001ec0:	650a      	str	r2, [r1, #80]	; 0x50
  if((PeriphClkInit->PeriphClockSelection) & (RCC_PERIPHCLK_TIM))
 8001ec2:	005a      	lsls	r2, r3, #1
 8001ec4:	d509      	bpl.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x5aa>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001ec6:	4a2f      	ldr	r2, [pc, #188]	; (8001f84 <HAL_RCCEx_PeriphCLKConfig+0x654>)
 8001ec8:	6911      	ldr	r1, [r2, #16]
 8001eca:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8001ece:	6111      	str	r1, [r2, #16]
 8001ed0:	6911      	ldr	r1, [r2, #16]
 8001ed2:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 8001ed6:	4301      	orrs	r1, r0
 8001ed8:	6111      	str	r1, [r2, #16]
  if((PeriphClkInit->PeriphClockSelection) & (RCC_PERIPHCLK_CKPER))
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f2c0 809b 	blt.w	8002016 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
 8001ee0:	1c28      	adds	r0, r5, #0
 8001ee2:	bf18      	it	ne
 8001ee4:	2001      	movne	r0, #1
}
 8001ee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8001eea:	4a26      	ldr	r2, [pc, #152]	; (8001f84 <HAL_RCCEx_PeriphCLKConfig+0x654>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001eec:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8001eee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001ef0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ef4:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001ef6:	f7ff fc63 	bl	80017c0 <RCCEx_PLL2_Config>
 8001efa:	6823      	ldr	r3, [r4, #0]
 8001efc:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001efe:	2e00      	cmp	r6, #0
 8001f00:	f47f ae39 	bne.w	8001b76 <HAL_RCCEx_PeriphCLKConfig+0x246>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001f04:	491f      	ldr	r1, [pc, #124]	; (8001f84 <HAL_RCCEx_PeriphCLKConfig+0x654>)
 8001f06:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001f08:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8001f0a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f0e:	4302      	orrs	r2, r0
 8001f10:	650a      	str	r2, [r1, #80]	; 0x50
 8001f12:	e632      	b.n	8001b7a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 8001f14:	4a1b      	ldr	r2, [pc, #108]	; (8001f84 <HAL_RCCEx_PeriphCLKConfig+0x654>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001f16:	f104 0024 	add.w	r0, r4, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 8001f1a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001f1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f20:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001f22:	f7ff fca9 	bl	8001878 <RCCEx_PLL3_Config>
 8001f26:	6823      	ldr	r3, [r4, #0]
 8001f28:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001f2a:	2e00      	cmp	r6, #0
 8001f2c:	f47f af74 	bne.w	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f30:	4914      	ldr	r1, [pc, #80]	; (8001f84 <HAL_RCCEx_PeriphCLKConfig+0x654>)
 8001f32:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 8001f36:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8001f38:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001f3c:	4302      	orrs	r2, r0
 8001f3e:	658a      	str	r2, [r1, #88]	; 0x58
 8001f40:	e76c      	b.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8001f42:	4a10      	ldr	r2, [pc, #64]	; (8001f84 <HAL_RCCEx_PeriphCLKConfig+0x654>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001f44:	f104 0024 	add.w	r0, r4, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8001f48:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001f4a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f4e:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001f50:	f7ff fc92 	bl	8001878 <RCCEx_PLL3_Config>
 8001f54:	6823      	ldr	r3, [r4, #0]
 8001f56:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001f58:	2e00      	cmp	r6, #0
 8001f5a:	f47f af70 	bne.w	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x50e>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f5e:	4909      	ldr	r1, [pc, #36]	; (8001f84 <HAL_RCCEx_PeriphCLKConfig+0x654>)
 8001f60:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8001f64:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8001f66:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001f6a:	4302      	orrs	r2, r0
 8001f6c:	654a      	str	r2, [r1, #84]	; 0x54
 8001f6e:	e768      	b.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x512>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f70:	4b05      	ldr	r3, [pc, #20]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001f72:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001f74:	461f      	mov	r7, r3
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f7a:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001f7c:	f7fe f9f0 	bl	8000360 <HAL_GetTick>
 8001f80:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001f82:	e00a      	b.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8001f84:	58024400 	.word	0x58024400
 8001f88:	58024800 	.word	0x58024800
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f8c:	f7fe f9e8 	bl	8000360 <HAL_GetTick>
 8001f90:	eba0 0008 	sub.w	r0, r0, r8
 8001f94:	2864      	cmp	r0, #100	; 0x64
 8001f96:	f200 826c 	bhi.w	8002472 <HAL_RCCEx_PeriphCLKConfig+0xb42>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	05da      	lsls	r2, r3, #23
 8001f9e:	d5f5      	bpl.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x65c>
    if(ret == HAL_OK)
 8001fa0:	2e00      	cmp	r6, #0
 8001fa2:	f040 8267 	bne.w	8002474 <HAL_RCCEx_PeriphCLKConfig+0xb44>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8001fa6:	4ab0      	ldr	r2, [pc, #704]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 8001fa8:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8001fac:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001fae:	4059      	eors	r1, r3
 8001fb0:	f411 7f40 	tst.w	r1, #768	; 0x300
 8001fb4:	d00b      	beq.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x69e>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fb6:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8001fb8:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fba:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8001fbe:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8001fc2:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001fc4:	6f10      	ldr	r0, [r2, #112]	; 0x70
 8001fc6:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8001fca:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8001fcc:	6711      	str	r1, [r2, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8001fce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fd2:	f000 826a 	beq.w	80024aa <HAL_RCCEx_PeriphCLKConfig+0xb7a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fd6:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001fda:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001fde:	f000 825a 	beq.w	8002496 <HAL_RCCEx_PeriphCLKConfig+0xb66>
 8001fe2:	49a1      	ldr	r1, [pc, #644]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 8001fe4:	690a      	ldr	r2, [r1, #16]
 8001fe6:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8001fea:	610a      	str	r2, [r1, #16]
 8001fec:	4a9e      	ldr	r2, [pc, #632]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 8001fee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ff2:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001ff4:	430b      	orrs	r3, r1
 8001ff6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ff8:	6823      	ldr	r3, [r4, #0]
 8001ffa:	e5e4      	b.n	8001bc6 <HAL_RCCEx_PeriphCLKConfig+0x296>
    __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 8001ffc:	4a9a      	ldr	r2, [pc, #616]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x938>)
    status |= RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001ffe:	f104 0024 	add.w	r0, r4, #36	; 0x24
    __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 8002002:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002004:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002008:	62d3      	str	r3, [r2, #44]	; 0x2c
    status |= RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 800200a:	f7ff fc35 	bl	8001878 <RCCEx_PLL3_Config>
 800200e:	4305      	orrs	r5, r0
 8002010:	6823      	ldr	r3, [r4, #0]
 8002012:	b2ed      	uxtb	r5, r5
 8002014:	e725      	b.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x532>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8002016:	4a94      	ldr	r2, [pc, #592]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 8002018:	1c28      	adds	r0, r5, #0
 800201a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800201c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800201e:	bf18      	it	ne
 8002020:	2001      	movne	r0, #1
 8002022:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002026:	430b      	orrs	r3, r1
 8002028:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 800202a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->Lptim345ClockSelection)
 800202e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002032:	f43f aeba 	beq.w	8001daa <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8002036:	f5b2 4f20 	cmp.w	r2, #40960	; 0xa000
 800203a:	f43f aeb6 	beq.w	8001daa <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800203e:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 8002042:	f43f aeb2 	beq.w	8001daa <HAL_RCCEx_PeriphCLKConfig+0x47a>
      ret = HAL_ERROR;
 8002046:	2601      	movs	r6, #1
      status |= ret;
 8002048:	4335      	orrs	r5, r6
 800204a:	b2ed      	uxtb	r5, r5
 800204c:	e6b8      	b.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>
    switch(PeriphClkInit->Spi6ClockSelection)
 800204e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8002052:	f43f ad76 	beq.w	8001b42 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8002056:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800205a:	f43f ad72 	beq.w	8001b42 <HAL_RCCEx_PeriphCLKConfig+0x212>
 800205e:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8002062:	f43f ad6e 	beq.w	8001b42 <HAL_RCCEx_PeriphCLKConfig+0x212>
      ret = HAL_ERROR;
 8002066:	2601      	movs	r6, #1
      status |= ret;
 8002068:	4335      	orrs	r5, r6
 800206a:	b2ed      	uxtb	r5, r5
 800206c:	e574      	b.n	8001b58 <HAL_RCCEx_PeriphCLKConfig+0x228>
      ret = HAL_ERROR;
 800206e:	2601      	movs	r6, #1
      status |= ret;
 8002070:	4335      	orrs	r5, r6
 8002072:	b2ed      	uxtb	r5, r5
 8002074:	e610      	b.n	8001c98 <HAL_RCCEx_PeriphCLKConfig+0x368>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002076:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800207a:	f43f ae72 	beq.w	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800207e:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 8002082:	f43f ae6e 	beq.w	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8002086:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 800208a:	f43f ae6a 	beq.w	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x432>
      ret = HAL_ERROR;
 800208e:	2601      	movs	r6, #1
      status |= ret;
 8002090:	4335      	orrs	r5, r6
 8002092:	b2ed      	uxtb	r5, r5
 8002094:	e670      	b.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x448>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002096:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800209a:	f43f ae3e 	beq.w	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800209e:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80020a2:	f43f ae3a 	beq.w	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80020a6:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 80020aa:	f43f ae36 	beq.w	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      ret = HAL_ERROR;
 80020ae:	2601      	movs	r6, #1
      status |= ret;
 80020b0:	4335      	orrs	r5, r6
 80020b2:	b2ed      	uxtb	r5, r5
 80020b4:	e63c      	b.n	8001d30 <HAL_RCCEx_PeriphCLKConfig+0x400>
      ret = HAL_ERROR;
 80020b6:	2601      	movs	r6, #1
      status |= ret;
 80020b8:	4335      	orrs	r5, r6
 80020ba:	b2ed      	uxtb	r5, r5
 80020bc:	e614      	b.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      ret = HAL_ERROR;
 80020be:	2601      	movs	r6, #1
      status |= ret;
 80020c0:	4335      	orrs	r5, r6
 80020c2:	b2ed      	uxtb	r5, r5
 80020c4:	e5c5      	b.n	8001c52 <HAL_RCCEx_PeriphCLKConfig+0x322>
      ret = HAL_ERROR;
 80020c6:	2601      	movs	r6, #1
      status |= ret;
 80020c8:	4335      	orrs	r5, r6
 80020ca:	b2ed      	uxtb	r5, r5
 80020cc:	e578      	b.n	8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x290>
    switch(PeriphClkInit->Spi45ClockSelection)
 80020ce:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 80020d2:	f43f ad13 	beq.w	8001afc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80020d6:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80020da:	f43f ad0f 	beq.w	8001afc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80020de:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 80020e2:	f43f ad0b 	beq.w	8001afc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      ret = HAL_ERROR;
 80020e6:	2601      	movs	r6, #1
      status |= ret;
 80020e8:	4335      	orrs	r5, r6
 80020ea:	b2ed      	uxtb	r5, r5
 80020ec:	e510      	b.n	8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80020ee:	485e      	ldr	r0, [pc, #376]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 80020f0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80020f2:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80020f6:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 80020f8:	2e00      	cmp	r6, #0
 80020fa:	f47f aec4 	bne.w	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x556>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80020fe:	485a      	ldr	r0, [pc, #360]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 8002100:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8002102:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8002106:	430a      	orrs	r2, r1
 8002108:	6542      	str	r2, [r0, #84]	; 0x54
 800210a:	e6be      	b.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x55a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);        
 800210c:	4956      	ldr	r1, [pc, #344]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 800210e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8002110:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002114:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8002116:	2e00      	cmp	r6, #0
 8002118:	f47f ae9e 	bne.w	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x528>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800211c:	4952      	ldr	r1, [pc, #328]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 800211e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002120:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8002122:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002126:	4302      	orrs	r2, r0
 8002128:	64ca      	str	r2, [r1, #76]	; 0x4c
 800212a:	e697      	b.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800212c:	4a4e      	ldr	r2, [pc, #312]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x938>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 800212e:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8002130:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002132:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002136:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8002138:	f7ff fb42 	bl	80017c0 <RCCEx_PLL2_Config>
 800213c:	6823      	ldr	r3, [r4, #0]
 800213e:	4606      	mov	r6, r0
      break;
 8002140:	e7e9      	b.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8002142:	4a49      	ldr	r2, [pc, #292]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x938>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8002144:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8002146:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002148:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800214c:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 800214e:	f7ff fb37 	bl	80017c0 <RCCEx_PLL2_Config>
 8002152:	6823      	ldr	r3, [r4, #0]
 8002154:	4606      	mov	r6, r0
      break;
 8002156:	e5bc      	b.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002158:	4943      	ldr	r1, [pc, #268]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 800215a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800215c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002160:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8002162:	e523      	b.n	8001bac <HAL_RCCEx_PeriphCLKConfig+0x27c>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8002164:	4a40      	ldr	r2, [pc, #256]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x938>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8002166:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8002168:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800216a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800216e:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8002170:	f7ff fb26 	bl	80017c0 <RCCEx_PLL2_Config>
 8002174:	6823      	ldr	r3, [r4, #0]
 8002176:	4606      	mov	r6, r0
      break;
 8002178:	e584      	b.n	8001c84 <HAL_RCCEx_PeriphCLKConfig+0x354>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800217a:	4a3b      	ldr	r2, [pc, #236]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x938>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 800217c:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800217e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002180:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002184:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8002186:	f7ff fb1b 	bl	80017c0 <RCCEx_PLL2_Config>
 800218a:	6823      	ldr	r3, [r4, #0]
 800218c:	4606      	mov	r6, r0
      break;
 800218e:	e556      	b.n	8001c3e <HAL_RCCEx_PeriphCLKConfig+0x30e>
    switch(PeriphClkInit->RngClockSelection)
 8002190:	2a00      	cmp	r2, #0
 8002192:	f47f ae77 	bne.w	8001e84 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8002196:	e7af      	b.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8002198:	4a33      	ldr	r2, [pc, #204]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x938>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 800219a:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800219c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800219e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021a2:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 80021a4:	f7ff fb0c 	bl	80017c0 <RCCEx_PLL2_Config>
 80021a8:	6823      	ldr	r3, [r4, #0]
 80021aa:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80021ac:	2e00      	cmp	r6, #0
 80021ae:	f47f ac67 	bne.w	8001a80 <HAL_RCCEx_PeriphCLKConfig+0x150>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80021b2:	492d      	ldr	r1, [pc, #180]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 80021b4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80021b6:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80021b8:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80021bc:	4302      	orrs	r2, r0
 80021be:	64ca      	str	r2, [r1, #76]	; 0x4c
 80021c0:	e460      	b.n	8001a84 <HAL_RCCEx_PeriphCLKConfig+0x154>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 80021c2:	4a29      	ldr	r2, [pc, #164]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x938>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 80021c4:	f104 0024 	add.w	r0, r4, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 80021c8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80021ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021ce:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 80021d0:	f7ff fb52 	bl	8001878 <RCCEx_PLL3_Config>
 80021d4:	6823      	ldr	r3, [r4, #0]
 80021d6:	4606      	mov	r6, r0
      break;
 80021d8:	e59f      	b.n	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);  
 80021da:	4a23      	ldr	r2, [pc, #140]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x938>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 80021dc:	f104 0024 	add.w	r0, r4, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);  
 80021e0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80021e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021e6:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 80021e8:	f7ff fb46 	bl	8001878 <RCCEx_PLL3_Config>
 80021ec:	6823      	ldr	r3, [r4, #0]
 80021ee:	4606      	mov	r6, r0
      break;
 80021f0:	e4a7      	b.n	8001b42 <HAL_RCCEx_PeriphCLKConfig+0x212>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);        
 80021f2:	491d      	ldr	r1, [pc, #116]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 80021f4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80021f6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80021fa:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80021fc:	e67f      	b.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 80021fe:	4a1a      	ldr	r2, [pc, #104]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x938>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8002200:	f104 0024 	add.w	r0, r4, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 8002204:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002206:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800220a:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 800220c:	f7ff fb34 	bl	8001878 <RCCEx_PLL3_Config>
 8002210:	6823      	ldr	r3, [r4, #0]
 8002212:	4606      	mov	r6, r0
      break;
 8002214:	e5a5      	b.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x432>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 8002216:	4a14      	ldr	r2, [pc, #80]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x938>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8002218:	f104 0024 	add.w	r0, r4, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 800221c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800221e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002222:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8002224:	f7ff fb28 	bl	8001878 <RCCEx_PLL3_Config>
 8002228:	6823      	ldr	r3, [r4, #0]
 800222a:	4606      	mov	r6, r0
      break;
 800222c:	e5bd      	b.n	8001daa <HAL_RCCEx_PeriphCLKConfig+0x47a>
    switch(PeriphClkInit->Sai1ClockSelection)
 800222e:	462e      	mov	r6, r5
    if(ret == HAL_OK)
 8002230:	bb4e      	cbnz	r6, 8002286 <HAL_RCCEx_PeriphCLKConfig+0x956>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002232:	490d      	ldr	r1, [pc, #52]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 8002234:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002236:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8002238:	f022 0207 	bic.w	r2, r2, #7
 800223c:	4302      	orrs	r2, r0
 800223e:	650a      	str	r2, [r1, #80]	; 0x50
 8002240:	f7ff bba1 	b.w	8001986 <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002244:	4908      	ldr	r1, [pc, #32]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 8002246:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8002248:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800224c:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800224e:	e7ad      	b.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x87c>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);  
 8002250:	4a05      	ldr	r2, [pc, #20]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x938>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8002252:	f104 0024 	add.w	r0, r4, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);  
 8002256:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002258:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800225c:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 800225e:	f7ff fb0b 	bl	8001878 <RCCEx_PLL3_Config>
 8002262:	6823      	ldr	r3, [r4, #0]
 8002264:	4606      	mov	r6, r0
      break;
 8002266:	e449      	b.n	8001afc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002268:	58024400 	.word	0x58024400
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);  
 800226c:	4a9d      	ldr	r2, [pc, #628]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0xbb4>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 800226e:	f104 0024 	add.w	r0, r4, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);  
 8002272:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002274:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002278:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 800227a:	f7ff fafd 	bl	8001878 <RCCEx_PLL3_Config>
 800227e:	4606      	mov	r6, r0
 8002280:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8002282:	2e00      	cmp	r6, #0
 8002284:	d0d5      	beq.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x902>
      status |= ret;
 8002286:	4335      	orrs	r5, r6
 8002288:	b2ed      	uxtb	r5, r5
 800228a:	f7ff bb7c 	b.w	8001986 <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800228e:	4995      	ldr	r1, [pc, #596]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0xbb4>)
      break;
 8002290:	462e      	mov	r6, r5
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002292:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8002294:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002298:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800229a:	e7c9      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x900>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800229c:	4a91      	ldr	r2, [pc, #580]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0xbb4>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 800229e:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80022a0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80022a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80022a6:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 80022a8:	f7ff fa8a 	bl	80017c0 <RCCEx_PLL2_Config>
 80022ac:	6823      	ldr	r3, [r4, #0]
 80022ae:	4606      	mov	r6, r0
      break;
 80022b0:	e7be      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x900>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80022b2:	498c      	ldr	r1, [pc, #560]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0xbb4>)
 80022b4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80022b6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80022ba:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 80022bc:	2e00      	cmp	r6, #0
 80022be:	f43f ab7d 	beq.w	80019bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      status |= ret;
 80022c2:	4335      	orrs	r5, r6
 80022c4:	b2ed      	uxtb	r5, r5
 80022c6:	f7ff bb80 	b.w	80019ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 80022ca:	4a86      	ldr	r2, [pc, #536]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0xbb4>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 80022cc:	3024      	adds	r0, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 80022ce:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80022d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022d4:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 80022d6:	f7ff facf 	bl	8001878 <RCCEx_PLL3_Config>
 80022da:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80022dc:	2d00      	cmp	r5, #0
 80022de:	f000 80d6 	beq.w	800248e <HAL_RCCEx_PeriphCLKConfig+0xb5e>
 80022e2:	6823      	ldr	r3, [r4, #0]
 80022e4:	f7ff bb41 	b.w	800196a <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80022e8:	497e      	ldr	r1, [pc, #504]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0xbb4>)
 80022ea:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80022ec:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80022f0:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 80022f2:	2e00      	cmp	r6, #0
 80022f4:	f43f abad 	beq.w	8001a52 <HAL_RCCEx_PeriphCLKConfig+0x122>
      status |= ret;
 80022f8:	4335      	orrs	r5, r6
 80022fa:	b2ed      	uxtb	r5, r5
 80022fc:	f7ff bbb1 	b.w	8001a62 <HAL_RCCEx_PeriphCLKConfig+0x132>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002300:	4978      	ldr	r1, [pc, #480]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0xbb4>)
 8002302:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8002304:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002308:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800230a:	2e00      	cmp	r6, #0
 800230c:	f43f ab7b 	beq.w	8001a06 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      status |= ret;
 8002310:	4335      	orrs	r5, r6
 8002312:	b2ed      	uxtb	r5, r5
 8002314:	f7ff bb7f 	b.w	8001a16 <HAL_RCCEx_PeriphCLKConfig+0xe6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002318:	4972      	ldr	r1, [pc, #456]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0xbb4>)
 800231a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800231c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002320:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8002322:	2e00      	cmp	r6, #0
 8002324:	f43f abcb 	beq.w	8001abe <HAL_RCCEx_PeriphCLKConfig+0x18e>
      status |= ret;
 8002328:	4335      	orrs	r5, r6
 800232a:	b2ed      	uxtb	r5, r5
 800232c:	f7ff bbce 	b.w	8001acc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);  
 8002330:	4a6c      	ldr	r2, [pc, #432]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0xbb4>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8002332:	f104 0024 	add.w	r0, r4, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);  
 8002336:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002338:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800233c:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 800233e:	f7ff fa9b 	bl	8001878 <RCCEx_PLL3_Config>
 8002342:	6823      	ldr	r3, [r4, #0]
 8002344:	4606      	mov	r6, r0
      break;
 8002346:	f7ff bb81 	b.w	8001a4c <HAL_RCCEx_PeriphCLKConfig+0x11c>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);  
 800234a:	4a66      	ldr	r2, [pc, #408]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0xbb4>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 800234c:	f104 0024 	add.w	r0, r4, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);  
 8002350:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002352:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002356:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8002358:	f7ff fa8e 	bl	8001878 <RCCEx_PLL3_Config>
 800235c:	6823      	ldr	r3, [r4, #0]
 800235e:	4606      	mov	r6, r0
      break;
 8002360:	f7ff bb29 	b.w	80019b6 <HAL_RCCEx_PeriphCLKConfig+0x86>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8002364:	4a5f      	ldr	r2, [pc, #380]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0xbb4>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8002366:	3004      	adds	r0, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8002368:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800236a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800236e:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8002370:	f7ff fa26 	bl	80017c0 <RCCEx_PLL2_Config>
 8002374:	4605      	mov	r5, r0
      break;
 8002376:	e7b1      	b.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x9ac>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);  
 8002378:	4a5a      	ldr	r2, [pc, #360]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0xbb4>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 800237a:	f104 0024 	add.w	r0, r4, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);  
 800237e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002380:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002384:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8002386:	f7ff fa77 	bl	8001878 <RCCEx_PLL3_Config>
 800238a:	6823      	ldr	r3, [r4, #0]
 800238c:	4606      	mov	r6, r0
      break;
 800238e:	f7ff bb93 	b.w	8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);  
 8002392:	4a54      	ldr	r2, [pc, #336]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0xbb4>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8002394:	f104 0024 	add.w	r0, r4, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);  
 8002398:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800239a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800239e:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 80023a0:	f7ff fa6a 	bl	8001878 <RCCEx_PLL3_Config>
 80023a4:	6823      	ldr	r3, [r4, #0]
 80023a6:	4606      	mov	r6, r0
      break;
 80023a8:	f7ff bb2a 	b.w	8001a00 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023ac:	494d      	ldr	r1, [pc, #308]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0xbb4>)
 80023ae:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80023b0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80023b4:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80023b6:	e5cf      	b.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x628>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80023b8:	4a4a      	ldr	r2, [pc, #296]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0xbb4>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 80023ba:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80023bc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80023be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80023c2:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 80023c4:	f7ff f9fc 	bl	80017c0 <RCCEx_PLL2_Config>
 80023c8:	6823      	ldr	r3, [r4, #0]
 80023ca:	4606      	mov	r6, r0
      break;
 80023cc:	e5ad      	b.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x5fa>
      RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 80023ce:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80023d2:	f7ff fa51 	bl	8001878 <RCCEx_PLL3_Config>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80023d6:	4a43      	ldr	r2, [pc, #268]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0xbb4>)
 80023d8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80023da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80023e0:	6823      	ldr	r3, [r4, #0]
 80023e2:	e4fb      	b.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x4ac>
      RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 80023e4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80023e8:	f7ff fa46 	bl	8001878 <RCCEx_PLL3_Config>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80023ec:	4a3d      	ldr	r2, [pc, #244]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0xbb4>)
 80023ee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80023f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023f4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80023f6:	6823      	ldr	r3, [r4, #0]
 80023f8:	e4fe      	b.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
    switch(PeriphClkInit->SpdifrxClockSelection)
 80023fa:	2a00      	cmp	r2, #0
 80023fc:	d144      	bne.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0xb58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023fe:	4839      	ldr	r0, [pc, #228]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0xbb4>)
 8002400:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002402:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8002406:	62c1      	str	r1, [r0, #44]	; 0x2c
      break;
 8002408:	f7ff baa8 	b.w	800195c <HAL_RCCEx_PeriphCLKConfig+0x2c>
    switch(PeriphClkInit->Sai4AClockSelection)
 800240c:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 8002410:	f43f aaf6 	beq.w	8001a00 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8002414:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8002418:	f43f aaf2 	beq.w	8001a00 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      ret = HAL_ERROR;
 800241c:	2601      	movs	r6, #1
      status |= ret;
 800241e:	4335      	orrs	r5, r6
 8002420:	b2ed      	uxtb	r5, r5
 8002422:	f7ff baf8 	b.w	8001a16 <HAL_RCCEx_PeriphCLKConfig+0xe6>
    switch(PeriphClkInit->Spi123ClockSelection)
 8002426:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 800242a:	f43f ab45 	beq.w	8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x188>
 800242e:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8002432:	f43f ab41 	beq.w	8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      ret = HAL_ERROR;
 8002436:	2601      	movs	r6, #1
      status |= ret;
 8002438:	4335      	orrs	r5, r6
 800243a:	b2ed      	uxtb	r5, r5
 800243c:	f7ff bb46 	b.w	8001acc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    switch(PeriphClkInit->Sai4BClockSelection)
 8002440:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 8002444:	f43f ab02 	beq.w	8001a4c <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8002448:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 800244c:	f43f aafe 	beq.w	8001a4c <HAL_RCCEx_PeriphCLKConfig+0x11c>
      ret = HAL_ERROR;
 8002450:	2601      	movs	r6, #1
      status |= ret;
 8002452:	4335      	orrs	r5, r6
 8002454:	b2ed      	uxtb	r5, r5
 8002456:	f7ff bb04 	b.w	8001a62 <HAL_RCCEx_PeriphCLKConfig+0x132>
    switch(PeriphClkInit->Sai23ClockSelection)
 800245a:	2ac0      	cmp	r2, #192	; 0xc0
 800245c:	f43f aaab 	beq.w	80019b6 <HAL_RCCEx_PeriphCLKConfig+0x86>
 8002460:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8002464:	f43f aaa7 	beq.w	80019b6 <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = HAL_ERROR;
 8002468:	2601      	movs	r6, #1
      status |= ret;
 800246a:	4335      	orrs	r5, r6
 800246c:	b2ed      	uxtb	r5, r5
 800246e:	f7ff baac 	b.w	80019ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        ret = HAL_TIMEOUT;
 8002472:	2603      	movs	r6, #3
      status |= ret;
 8002474:	4335      	orrs	r5, r6
 8002476:	6823      	ldr	r3, [r4, #0]
 8002478:	b2ed      	uxtb	r5, r5
 800247a:	f7ff bba4 	b.w	8001bc6 <HAL_RCCEx_PeriphCLKConfig+0x296>
    switch(PeriphClkInit->QspiClockSelection)
 800247e:	2a00      	cmp	r2, #0
 8002480:	f43f ae94 	beq.w	80021ac <HAL_RCCEx_PeriphCLKConfig+0x87c>
 8002484:	f7ff bafb 	b.w	8001a7e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      ret = HAL_ERROR;
 8002488:	2501      	movs	r5, #1
 800248a:	f7ff ba6e 	b.w	800196a <HAL_RCCEx_PeriphCLKConfig+0x3a>
 800248e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002490:	6823      	ldr	r3, [r4, #0]
 8002492:	f7ff ba63 	b.w	800195c <HAL_RCCEx_PeriphCLKConfig+0x2c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002496:	4813      	ldr	r0, [pc, #76]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0xbb4>)
 8002498:	4a13      	ldr	r2, [pc, #76]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>)
 800249a:	6901      	ldr	r1, [r0, #16]
 800249c:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 80024a0:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 80024a4:	430a      	orrs	r2, r1
 80024a6:	6102      	str	r2, [r0, #16]
 80024a8:	e5a0      	b.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x6bc>
        tickstart = HAL_GetTick();
 80024aa:	f7fd ff59 	bl	8000360 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ae:	4f0d      	ldr	r7, [pc, #52]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0xbb4>)
        tickstart = HAL_GetTick();
 80024b0:	4681      	mov	r9, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024b2:	f241 3888 	movw	r8, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b6:	e005      	b.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0xb94>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024b8:	f7fd ff52 	bl	8000360 <HAL_GetTick>
 80024bc:	eba0 0009 	sub.w	r0, r0, r9
 80024c0:	4540      	cmp	r0, r8
 80024c2:	d805      	bhi.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024c6:	079b      	lsls	r3, r3, #30
 80024c8:	d5f6      	bpl.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 80024ca:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80024ce:	e582      	b.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
        status |= ret;
 80024d0:	f045 0503 	orr.w	r5, r5, #3
 80024d4:	6823      	ldr	r3, [r4, #0]
            ret = HAL_TIMEOUT;
 80024d6:	2603      	movs	r6, #3
        status |= ret;
 80024d8:	b2ed      	uxtb	r5, r5
 80024da:	f7ff bb74 	b.w	8001bc6 <HAL_RCCEx_PeriphCLKConfig+0x296>
      ret = HAL_ERROR;
 80024de:	2601      	movs	r6, #1
 80024e0:	e6d1      	b.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x956>
 80024e2:	bf00      	nop
 80024e4:	58024400 	.word	0x58024400
 80024e8:	00ffffcf 	.word	0x00ffffcf

080024ec <HAL_RCCEx_GetPLL2ClockFreq>:
{
 80024ec:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80024ee:	4c49      	ldr	r4, [pc, #292]	; (8002614 <HAL_RCCEx_GetPLL2ClockFreq+0x128>)
 80024f0:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 80024f2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 80024f4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80024f6:	f005 0503 	and.w	r5, r5, #3
  fracn2 =(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80024fa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 80024fc:	f3c1 3105 	ubfx	r1, r1, #12, #6
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 8002500:	f002 0210 	and.w	r2, r2, #16
  switch (pllsource)
 8002504:	2d01      	cmp	r5, #1
  fracn2 =(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8002506:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 800250a:	fb02 f203 	mul.w	r2, r2, r3
 800250e:	ee07 2a90 	vmov	s15, r2
 8002512:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  switch (pllsource)
 8002516:	d002      	beq.n	800251e <HAL_RCCEx_GetPLL2ClockFreq+0x32>
 8002518:	d351      	bcc.n	80025be <HAL_RCCEx_GetPLL2ClockFreq+0xd2>
 800251a:	2d02      	cmp	r5, #2
 800251c:	d044      	beq.n	80025a8 <HAL_RCCEx_GetPLL2ClockFreq+0xbc>
    pll2vco = (CSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 800251e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002520:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002524:	ed9f 6a3c 	vldr	s12, [pc, #240]	; 8002618 <HAL_RCCEx_GetPLL2ClockFreq+0x12c>
 8002528:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800252c:	ee07 3a90 	vmov	s15, r3
 8002530:	4b3a      	ldr	r3, [pc, #232]	; (800261c <HAL_RCCEx_GetPLL2ClockFreq+0x130>)
 8002532:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002536:	fbb3 f3f1 	udiv	r3, r3, r1
 800253a:	eee7 7a06 	vfma.f32	s15, s14, s12
 800253e:	ee07 3a10 	vmov	s14, r3
 8002542:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002546:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800254a:	ee67 7a87 	vmul.f32	s15, s15, s14
  PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9) + 1  )) ;
 800254e:	4a31      	ldr	r2, [pc, #196]	; (8002614 <HAL_RCCEx_GetPLL2ClockFreq+0x128>)
 8002550:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002552:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002556:	3301      	adds	r3, #1
 8002558:	ee07 3a10 	vmov	s14, r3
 800255c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8002560:	bc30      	pop	{r4, r5}
  PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9) + 1  )) ;
 8002562:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002566:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800256a:	edc0 6a00 	vstr	s13, [r0]
  PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + 1 )) ;
 800256e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002570:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8002574:	3301      	adds	r3, #1
 8002576:	ee07 3a10 	vmov	s14, r3
 800257a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800257e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002582:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8002586:	edc0 6a01 	vstr	s13, [r0, #4]
  PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + 1 )) ;
 800258a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800258c:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8002590:	3301      	adds	r3, #1
 8002592:	ee07 3a10 	vmov	s14, r3
 8002596:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800259a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800259e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80025a2:	edc0 6a02 	vstr	s13, [r0, #8]
}
 80025a6:	4770      	bx	lr
    pll2vco = (HSE_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 80025a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80025aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025ae:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8002618 <HAL_RCCEx_GetPLL2ClockFreq+0x12c>
 80025b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025b6:	ee07 3a90 	vmov	s15, r3
 80025ba:	4b19      	ldr	r3, [pc, #100]	; (8002620 <HAL_RCCEx_GetPLL2ClockFreq+0x134>)
 80025bc:	e7b9      	b.n	8002532 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80025be:	6823      	ldr	r3, [r4, #0]
 80025c0:	069b      	lsls	r3, r3, #26
 80025c2:	d51c      	bpl.n	80025fe <HAL_RCCEx_GetPLL2ClockFreq+0x112>
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80025c4:	6823      	ldr	r3, [r4, #0]
      pll2vco = ( hsivalue / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 80025c6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80025ca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80025cc:	f3c3 04c1 	ubfx	r4, r3, #3, #2
 80025d0:	4b14      	ldr	r3, [pc, #80]	; (8002624 <HAL_RCCEx_GetPLL2ClockFreq+0x138>)
      pll2vco = ( hsivalue / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 80025d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025d6:	eddf 5a10 	vldr	s11, [pc, #64]	; 8002618 <HAL_RCCEx_GetPLL2ClockFreq+0x12c>
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80025da:	40e3      	lsrs	r3, r4
      pll2vco = ( hsivalue / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 80025dc:	ee07 2a90 	vmov	s15, r2
 80025e0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80025e4:	fbb3 f3f1 	udiv	r3, r3, r1
 80025e8:	eee7 6a25 	vfma.f32	s13, s14, s11
 80025ec:	ee07 3a90 	vmov	s15, r3
 80025f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025f4:	ee36 7a86 	vadd.f32	s14, s13, s12
 80025f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025fc:	e7a7      	b.n	800254e <HAL_RCCEx_GetPLL2ClockFreq+0x62>
      pll2vco = (HSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 80025fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002600:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002604:	ed9f 6a04 	vldr	s12, [pc, #16]	; 8002618 <HAL_RCCEx_GetPLL2ClockFreq+0x12c>
 8002608:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800260c:	ee07 3a90 	vmov	s15, r3
 8002610:	4b04      	ldr	r3, [pc, #16]	; (8002624 <HAL_RCCEx_GetPLL2ClockFreq+0x138>)
 8002612:	e78e      	b.n	8002532 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 8002614:	58024400 	.word	0x58024400
 8002618:	39000000 	.word	0x39000000
 800261c:	003d0900 	.word	0x003d0900
 8002620:	00f42400 	.word	0x00f42400
 8002624:	03d09000 	.word	0x03d09000

08002628 <HAL_RCCEx_GetPLL3ClockFreq>:
{
 8002628:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800262a:	4c49      	ldr	r4, [pc, #292]	; (8002750 <HAL_RCCEx_GetPLL3ClockFreq+0x128>)
 800262c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800262e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 8002630:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002632:	f005 0503 	and.w	r5, r5, #3
  fracn3 = (pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8002636:	6c63      	ldr	r3, [r4, #68]	; 0x44
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8002638:	f3c1 5105 	ubfx	r1, r1, #20, #6
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 800263c:	f402 7280 	and.w	r2, r2, #256	; 0x100
  switch (pllsource)
 8002640:	2d01      	cmp	r5, #1
  fracn3 = (pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8002642:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8002646:	fb02 f203 	mul.w	r2, r2, r3
 800264a:	ee07 2a90 	vmov	s15, r2
 800264e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  switch (pllsource)
 8002652:	d002      	beq.n	800265a <HAL_RCCEx_GetPLL3ClockFreq+0x32>
 8002654:	d351      	bcc.n	80026fa <HAL_RCCEx_GetPLL3ClockFreq+0xd2>
 8002656:	2d02      	cmp	r5, #2
 8002658:	d044      	beq.n	80026e4 <HAL_RCCEx_GetPLL3ClockFreq+0xbc>
    pll3vco = (CSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 800265a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800265c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002660:	ed9f 6a3c 	vldr	s12, [pc, #240]	; 8002754 <HAL_RCCEx_GetPLL3ClockFreq+0x12c>
 8002664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002668:	ee07 3a90 	vmov	s15, r3
 800266c:	4b3a      	ldr	r3, [pc, #232]	; (8002758 <HAL_RCCEx_GetPLL3ClockFreq+0x130>)
 800266e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002672:	fbb3 f3f1 	udiv	r3, r3, r1
 8002676:	eee7 7a06 	vfma.f32	s15, s14, s12
 800267a:	ee07 3a10 	vmov	s14, r3
 800267e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002682:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002686:	ee67 7a87 	vmul.f32	s15, s15, s14
  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + 1 )) ;
 800268a:	4a31      	ldr	r2, [pc, #196]	; (8002750 <HAL_RCCEx_GetPLL3ClockFreq+0x128>)
 800268c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800268e:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002692:	3301      	adds	r3, #1
 8002694:	ee07 3a10 	vmov	s14, r3
 8002698:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800269c:	bc30      	pop	{r4, r5}
  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + 1 )) ;
 800269e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80026a2:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80026a6:	edc0 6a00 	vstr	s13, [r0]
  PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + 1 )) ;
 80026aa:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80026ac:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80026b0:	3301      	adds	r3, #1
 80026b2:	ee07 3a10 	vmov	s14, r3
 80026b6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80026ba:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80026be:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80026c2:	edc0 6a01 	vstr	s13, [r0, #4]
  PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + 1 )) ;
 80026c6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80026c8:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80026cc:	3301      	adds	r3, #1
 80026ce:	ee07 3a10 	vmov	s14, r3
 80026d2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80026d6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80026da:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80026de:	edc0 6a02 	vstr	s13, [r0, #8]
}
 80026e2:	4770      	bx	lr
    pll3vco = (HSE_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 80026e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80026e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80026ea:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8002754 <HAL_RCCEx_GetPLL3ClockFreq+0x12c>
 80026ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026f2:	ee07 3a90 	vmov	s15, r3
 80026f6:	4b19      	ldr	r3, [pc, #100]	; (800275c <HAL_RCCEx_GetPLL3ClockFreq+0x134>)
 80026f8:	e7b9      	b.n	800266e <HAL_RCCEx_GetPLL3ClockFreq+0x46>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80026fa:	6823      	ldr	r3, [r4, #0]
 80026fc:	069b      	lsls	r3, r3, #26
 80026fe:	d51c      	bpl.n	800273a <HAL_RCCEx_GetPLL3ClockFreq+0x112>
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002700:	6823      	ldr	r3, [r4, #0]
      pll3vco = (hsivalue / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8002702:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002706:	6c22      	ldr	r2, [r4, #64]	; 0x40
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002708:	f3c3 04c1 	ubfx	r4, r3, #3, #2
 800270c:	4b14      	ldr	r3, [pc, #80]	; (8002760 <HAL_RCCEx_GetPLL3ClockFreq+0x138>)
      pll3vco = (hsivalue / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 800270e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002712:	eddf 5a10 	vldr	s11, [pc, #64]	; 8002754 <HAL_RCCEx_GetPLL3ClockFreq+0x12c>
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002716:	40e3      	lsrs	r3, r4
      pll3vco = (hsivalue / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8002718:	ee07 2a90 	vmov	s15, r2
 800271c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002720:	fbb3 f3f1 	udiv	r3, r3, r1
 8002724:	eee7 6a25 	vfma.f32	s13, s14, s11
 8002728:	ee07 3a90 	vmov	s15, r3
 800272c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002730:	ee36 7a86 	vadd.f32	s14, s13, s12
 8002734:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002738:	e7a7      	b.n	800268a <HAL_RCCEx_GetPLL3ClockFreq+0x62>
      pll3vco = (HSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 800273a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800273c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002740:	ed9f 6a04 	vldr	s12, [pc, #16]	; 8002754 <HAL_RCCEx_GetPLL3ClockFreq+0x12c>
 8002744:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002748:	ee07 3a90 	vmov	s15, r3
 800274c:	4b04      	ldr	r3, [pc, #16]	; (8002760 <HAL_RCCEx_GetPLL3ClockFreq+0x138>)
 800274e:	e78e      	b.n	800266e <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 8002750:	58024400 	.word	0x58024400
 8002754:	39000000 	.word	0x39000000
 8002758:	003d0900 	.word	0x003d0900
 800275c:	00f42400 	.word	0x00f42400
 8002760:	03d09000 	.word	0x03d09000

08002764 <HAL_RCCEx_GetPLL1ClockFreq>:
{
 8002764:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002766:	4c49      	ldr	r4, [pc, #292]	; (800288c <HAL_RCCEx_GetPLL1ClockFreq+0x128>)
 8002768:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800276a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800276c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800276e:	f005 0503 	and.w	r5, r5, #3
  fracn1 = (pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002772:	6b63      	ldr	r3, [r4, #52]	; 0x34
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8002774:	f3c1 1105 	ubfx	r1, r1, #4, #6
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8002778:	f002 0201 	and.w	r2, r2, #1
  switch (pllsource)
 800277c:	2d01      	cmp	r5, #1
  fracn1 = (pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800277e:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8002782:	fb02 f203 	mul.w	r2, r2, r3
 8002786:	ee07 2a90 	vmov	s15, r2
 800278a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  switch (pllsource)
 800278e:	d002      	beq.n	8002796 <HAL_RCCEx_GetPLL1ClockFreq+0x32>
 8002790:	d351      	bcc.n	8002836 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
 8002792:	2d02      	cmp	r5, #2
 8002794:	d044      	beq.n	8002820 <HAL_RCCEx_GetPLL1ClockFreq+0xbc>
    pll1vco = (CSI_VALUE / pll1m) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8002796:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002798:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800279c:	ed9f 6a3c 	vldr	s12, [pc, #240]	; 8002890 <HAL_RCCEx_GetPLL1ClockFreq+0x12c>
 80027a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027a4:	ee07 3a90 	vmov	s15, r3
 80027a8:	4b3a      	ldr	r3, [pc, #232]	; (8002894 <HAL_RCCEx_GetPLL1ClockFreq+0x130>)
 80027aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80027b2:	eee7 7a06 	vfma.f32	s15, s14, s12
 80027b6:	ee07 3a10 	vmov	s14, r3
 80027ba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80027be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027c2:	ee67 7a87 	vmul.f32	s15, s15, s14
  PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(pll1vco/(((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + 1 )) ;
 80027c6:	4a31      	ldr	r2, [pc, #196]	; (800288c <HAL_RCCEx_GetPLL1ClockFreq+0x128>)
 80027c8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80027ca:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80027ce:	3301      	adds	r3, #1
 80027d0:	ee07 3a10 	vmov	s14, r3
 80027d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 80027d8:	bc30      	pop	{r4, r5}
  PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(pll1vco/(((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + 1 )) ;
 80027da:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80027de:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80027e2:	edc0 6a00 	vstr	s13, [r0]
  PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(pll1vco/(((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + 1 )) ;
 80027e6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80027e8:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80027ec:	3301      	adds	r3, #1
 80027ee:	ee07 3a10 	vmov	s14, r3
 80027f2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80027f6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80027fa:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80027fe:	edc0 6a01 	vstr	s13, [r0, #4]
  PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(pll1vco/(((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + 1 )) ;
 8002802:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002804:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8002808:	3301      	adds	r3, #1
 800280a:	ee07 3a10 	vmov	s14, r3
 800280e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002812:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002816:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800281a:	edc0 6a02 	vstr	s13, [r0, #8]
}
 800281e:	4770      	bx	lr
    pll1vco = (HSE_VALUE / pll1m) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8002820:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002822:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002826:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8002890 <HAL_RCCEx_GetPLL1ClockFreq+0x12c>
 800282a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800282e:	ee07 3a90 	vmov	s15, r3
 8002832:	4b19      	ldr	r3, [pc, #100]	; (8002898 <HAL_RCCEx_GetPLL1ClockFreq+0x134>)
 8002834:	e7b9      	b.n	80027aa <HAL_RCCEx_GetPLL1ClockFreq+0x46>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002836:	6823      	ldr	r3, [r4, #0]
 8002838:	069b      	lsls	r3, r3, #26
 800283a:	d51c      	bpl.n	8002876 <HAL_RCCEx_GetPLL1ClockFreq+0x112>
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800283c:	6823      	ldr	r3, [r4, #0]
      pll1vco = (hsivalue / pll1m) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 800283e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002842:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002844:	f3c3 04c1 	ubfx	r4, r3, #3, #2
 8002848:	4b14      	ldr	r3, [pc, #80]	; (800289c <HAL_RCCEx_GetPLL1ClockFreq+0x138>)
      pll1vco = (hsivalue / pll1m) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 800284a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800284e:	eddf 5a10 	vldr	s11, [pc, #64]	; 8002890 <HAL_RCCEx_GetPLL1ClockFreq+0x12c>
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002852:	40e3      	lsrs	r3, r4
      pll1vco = (hsivalue / pll1m) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8002854:	ee07 2a90 	vmov	s15, r2
 8002858:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800285c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002860:	eee7 6a25 	vfma.f32	s13, s14, s11
 8002864:	ee07 3a90 	vmov	s15, r3
 8002868:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800286c:	ee36 7a86 	vadd.f32	s14, s13, s12
 8002870:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002874:	e7a7      	b.n	80027c6 <HAL_RCCEx_GetPLL1ClockFreq+0x62>
      pll1vco = (HSI_VALUE / pll1m) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8002876:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002878:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800287c:	ed9f 6a04 	vldr	s12, [pc, #16]	; 8002890 <HAL_RCCEx_GetPLL1ClockFreq+0x12c>
 8002880:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002884:	ee07 3a90 	vmov	s15, r3
 8002888:	4b04      	ldr	r3, [pc, #16]	; (800289c <HAL_RCCEx_GetPLL1ClockFreq+0x138>)
 800288a:	e78e      	b.n	80027aa <HAL_RCCEx_GetPLL1ClockFreq+0x46>
 800288c:	58024400 	.word	0x58024400
 8002890:	39000000 	.word	0x39000000
 8002894:	003d0900 	.word	0x003d0900
 8002898:	00f42400 	.word	0x00f42400
 800289c:	03d09000 	.word	0x03d09000

080028a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  switch (PeriphClk)
 80028a0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
{
 80028a4:	b500      	push	{lr}
 80028a6:	b085      	sub	sp, #20
  switch (PeriphClk)
 80028a8:	d060      	beq.n	800296c <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 80028aa:	d816      	bhi.n	80028da <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80028ac:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80028b0:	d03a      	beq.n	8002928 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
 80028b2:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80028b6:	d122      	bne.n	80028fe <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80028b8:	4a4c      	ldr	r2, [pc, #304]	; (80029ec <HAL_RCCEx_GetPeriphCLKFreq+0x14c>)
 80028ba:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80028bc:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 80028c0:	2b80      	cmp	r3, #128	; 0x80
 80028c2:	d04c      	beq.n	800295e <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 80028c4:	d860      	bhi.n	8002988 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 80028c6:	b343      	cbz	r3, 800291a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80028c8:	2b40      	cmp	r3, #64	; 0x40
 80028ca:	d118      	bne.n	80028fe <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80028cc:	a801      	add	r0, sp, #4
 80028ce:	f7ff fe0d 	bl	80024ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80028d2:	9801      	ldr	r0, [sp, #4]
}
 80028d4:	b005      	add	sp, #20
 80028d6:	f85d fb04 	ldr.w	pc, [sp], #4
  switch (PeriphClk)
 80028da:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 80028de:	d012      	beq.n	8002906 <HAL_RCCEx_GetPeriphCLKFreq+0x66>
 80028e0:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80028e4:	d10b      	bne.n	80028fe <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80028e6:	4a41      	ldr	r2, [pc, #260]	; (80029ec <HAL_RCCEx_GetPeriphCLKFreq+0x14c>)
 80028e8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80028ea:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 80028ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028f2:	d034      	beq.n	800295e <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 80028f4:	d82c      	bhi.n	8002950 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
 80028f6:	b183      	cbz	r3, 800291a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80028f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028fc:	d0e6      	beq.n	80028cc <HAL_RCCEx_GetPeriphCLKFreq+0x2c>
  uint32_t frequency = 0;
 80028fe:	2000      	movs	r0, #0
}
 8002900:	b005      	add	sp, #20
 8002902:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8002906:	4a39      	ldr	r2, [pc, #228]	; (80029ec <HAL_RCCEx_GetPeriphCLKFreq+0x14c>)
 8002908:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800290a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 800290e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002912:	d024      	beq.n	800295e <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 8002914:	d83e      	bhi.n	8002994 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8002916:	2b00      	cmp	r3, #0
 8002918:	d153      	bne.n	80029c2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800291a:	a801      	add	r0, sp, #4
 800291c:	f7ff ff22 	bl	8002764 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8002920:	9802      	ldr	r0, [sp, #8]
}
 8002922:	b005      	add	sp, #20
 8002924:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8002928:	4b30      	ldr	r3, [pc, #192]	; (80029ec <HAL_RCCEx_GetPeriphCLKFreq+0x14c>)
 800292a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800292c:	f003 0307 	and.w	r3, r3, #7
      switch (saiclocksource)
 8002930:	2b04      	cmp	r3, #4
 8002932:	d8e4      	bhi.n	80028fe <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8002934:	a201      	add	r2, pc, #4	; (adr r2, 800293c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>)
 8002936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800293a:	bf00      	nop
 800293c:	0800291b 	.word	0x0800291b
 8002940:	080028cd 	.word	0x080028cd
 8002944:	0800295f 	.word	0x0800295f
 8002948:	08002957 	.word	0x08002957
 800294c:	080029cb 	.word	0x080029cb
      switch (srcclk)
 8002950:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002954:	d131      	bne.n	80029ba <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
          frequency = EXTERNAL_CLOCK_VALUE;
 8002956:	4826      	ldr	r0, [pc, #152]	; (80029f0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
}
 8002958:	b005      	add	sp, #20
 800295a:	f85d fb04 	ldr.w	pc, [sp], #4
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800295e:	a801      	add	r0, sp, #4
 8002960:	f7ff fe62 	bl	8002628 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8002964:	9801      	ldr	r0, [sp, #4]
}
 8002966:	b005      	add	sp, #20
 8002968:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800296c:	4a1f      	ldr	r2, [pc, #124]	; (80029ec <HAL_RCCEx_GetPeriphCLKFreq+0x14c>)
 800296e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002970:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 8002974:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002978:	d0f1      	beq.n	800295e <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 800297a:	d812      	bhi.n	80029a2 <HAL_RCCEx_GetPeriphCLKFreq+0x102>
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0cc      	beq.n	800291a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8002980:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002984:	d0a2      	beq.n	80028cc <HAL_RCCEx_GetPeriphCLKFreq+0x2c>
 8002986:	e7ba      	b.n	80028fe <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
      switch (saiclocksource)
 8002988:	2bc0      	cmp	r3, #192	; 0xc0
 800298a:	d0e4      	beq.n	8002956 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800298c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002990:	d00d      	beq.n	80029ae <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8002992:	e7b4      	b.n	80028fe <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
      switch (saiclocksource)
 8002994:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002998:	d0dd      	beq.n	8002956 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800299a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800299e:	d006      	beq.n	80029ae <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 80029a0:	e7ad      	b.n	80028fe <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
      switch (saiclocksource)
 80029a2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80029a6:	d0d6      	beq.n	8002956 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 80029a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80029ac:	d1a7      	bne.n	80028fe <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80029ae:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80029b0:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 80029b4:	d10e      	bne.n	80029d4 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
            frequency = HSI_VALUE;
 80029b6:	480f      	ldr	r0, [pc, #60]	; (80029f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80029b8:	e7a2      	b.n	8002900 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
      switch (srcclk)
 80029ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029be:	d0f6      	beq.n	80029ae <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 80029c0:	e79d      	b.n	80028fe <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
      switch (saiclocksource)
 80029c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029c6:	d081      	beq.n	80028cc <HAL_RCCEx_GetPeriphCLKFreq+0x2c>
 80029c8:	e799      	b.n	80028fe <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80029ca:	4b08      	ldr	r3, [pc, #32]	; (80029ec <HAL_RCCEx_GetPeriphCLKFreq+0x14c>)
 80029cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== 0)
 80029ce:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 80029d2:	d0f0      	beq.n	80029b6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80029d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029d8:	d005      	beq.n	80029e6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80029da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
            frequency = HSE_VALUE;
 80029de:	4806      	ldr	r0, [pc, #24]	; (80029f8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80029e0:	bf18      	it	ne
 80029e2:	2000      	movne	r0, #0
 80029e4:	e78c      	b.n	8002900 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
            frequency = CSI_VALUE;
 80029e6:	4805      	ldr	r0, [pc, #20]	; (80029fc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80029e8:	e78a      	b.n	8002900 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 80029ea:	bf00      	nop
 80029ec:	58024400 	.word	0x58024400
 80029f0:	00bb8000 	.word	0x00bb8000
 80029f4:	03d09000 	.word	0x03d09000
 80029f8:	00f42400 	.word	0x00f42400
 80029fc:	003d0900 	.word	0x003d0900

08002a00 <HAL_SAI_Init>:
  uint32_t ckstr_bits  = 0;
  uint32_t syncen_bits = 0;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 8002a00:	2800      	cmp	r0, #0
 8002a02:	f000 8170 	beq.w	8002ce6 <HAL_SAI_Init+0x2e6>

    /* The PDM function is intended to be used in conjunction with SAI_A sub-block
       configured in TDM MASTER mode. It cannot be used with SAI_B sub-block.
       Make sure that the SAI is already operating in TDM master mode before
       enabling the PDM interface */
    if(((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI2_Block_A) && \
 8002a06:	6802      	ldr	r2, [r0, #0]
{
 8002a08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(hsai->Init.PdmInit.Activation == ENABLE)
 8002a0c:	f890 6034 	ldrb.w	r6, [r0, #52]	; 0x34
 8002a10:	2e01      	cmp	r6, #1
 8002a12:	f000 8128 	beq.w	8002c66 <HAL_SAI_Init+0x266>
      return HAL_ERROR;
    }
  }

  /* Get the SAI base address according to the SAI handle */
  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8002a16:	4bbb      	ldr	r3, [pc, #748]	; (8002d04 <HAL_SAI_Init+0x304>)
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d016      	beq.n	8002a4a <HAL_SAI_Init+0x4a>
 8002a1c:	3320      	adds	r3, #32
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d013      	beq.n	8002a4a <HAL_SAI_Init+0x4a>
  {
    SaiBaseAddress = SAI1;
  }
  else if((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8002a22:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8002a26:	429a      	cmp	r2, r3
 8002a28:	f000 8134 	beq.w	8002c94 <HAL_SAI_Init+0x294>
 8002a2c:	3320      	adds	r3, #32
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	f000 8130 	beq.w	8002c94 <HAL_SAI_Init+0x294>
  {
    SaiBaseAddress = SAI2;
  }
  else if((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8002a34:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	f000 8193 	beq.w	8002d64 <HAL_SAI_Init+0x364>
 8002a3e:	3320      	adds	r3, #32
 8002a40:	429a      	cmp	r2, r3
 8002a42:	f000 818f 	beq.w	8002d64 <HAL_SAI_Init+0x364>
  {
    SaiBaseAddress = SAI3;
  }
  else
  {
    SaiBaseAddress = SAI4;
 8002a46:	4db0      	ldr	r5, [pc, #704]	; (8002d08 <HAL_SAI_Init+0x308>)
 8002a48:	e000      	b.n	8002a4c <HAL_SAI_Init+0x4c>
    SaiBaseAddress = SAI1;
 8002a4a:	4db0      	ldr	r5, [pc, #704]	; (8002d0c <HAL_SAI_Init+0x30c>)
  }

  if(hsai->State == HAL_SAI_STATE_RESET)
 8002a4c:	f890 308d 	ldrb.w	r3, [r0, #141]	; 0x8d
 8002a50:	4604      	mov	r4, r0
 8002a52:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f000 8125 	beq.w	8002ca6 <HAL_SAI_Init+0x2a6>
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8002a5c:	4bac      	ldr	r3, [pc, #688]	; (8002d10 <HAL_SAI_Init+0x310>)
  hsai->State = HAL_SAI_STATE_BUSY;
 8002a5e:	2002      	movs	r0, #2
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8002a60:	49ac      	ldr	r1, [pc, #688]	; (8002d14 <HAL_SAI_Init+0x314>)
 8002a62:	681b      	ldr	r3, [r3, #0]
  hsai->State = HAL_SAI_STATE_BUSY;
 8002a64:	f884 008d 	strb.w	r0, [r4, #141]	; 0x8d
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8002a68:	fba1 1303 	umull	r1, r3, r1, r3
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8002a6c:	6811      	ldr	r1, [r2, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8002a6e:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
 8002a70:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8002a74:	4083      	lsls	r3, r0
  __HAL_SAI_DISABLE(hsai);
 8002a76:	6011      	str	r1, [r2, #0]
 8002a78:	e002      	b.n	8002a80 <HAL_SAI_Init+0x80>
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
      status = HAL_TIMEOUT;
      break;
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8002a7a:	6811      	ldr	r1, [r2, #0]
 8002a7c:	03c8      	lsls	r0, r1, #15
 8002a7e:	d508      	bpl.n	8002a92 <HAL_SAI_Init+0x92>
    if (count-- == 0)
 8002a80:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002a84:	d2f9      	bcs.n	8002a7a <HAL_SAI_Init+0x7a>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8002a86:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002a8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a8e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  CLEAR_BIT(SaiBaseAddress->PDMCR, SAI_PDMCR_PDMEN);
 8002a92:	6c6b      	ldr	r3, [r5, #68]	; 0x44
  if(hsai->Init.PdmInit.Activation == ENABLE)
 8002a94:	2e01      	cmp	r6, #1
  CLEAR_BIT(SaiBaseAddress->PDMCR, SAI_PDMCR_PDMEN);
 8002a96:	f023 0301 	bic.w	r3, r3, #1
 8002a9a:	646b      	str	r3, [r5, #68]	; 0x44
  if(hsai->Init.PdmInit.Activation == ENABLE)
 8002a9c:	f000 8113 	beq.w	8002cc6 <HAL_SAI_Init+0x2c6>
  switch(hsai->Init.SynchroExt)
 8002aa0:	68e3      	ldr	r3, [r4, #12]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	f000 80f4 	beq.w	8002c90 <HAL_SAI_Init+0x290>
  uint32_t tmpregisterGCR = 0;
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	bf0c      	ite	eq
 8002aac:	2120      	moveq	r1, #32
 8002aae:	2100      	movne	r1, #0
  switch(hsai->Init.Synchro)
 8002ab0:	68a3      	ldr	r3, [r4, #8]
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d07a      	beq.n	8002bac <HAL_SAI_Init+0x1ac>
 8002ab6:	2b03      	cmp	r3, #3
 8002ab8:	d076      	beq.n	8002ba8 <HAL_SAI_Init+0x1a8>
  uint32_t syncen_bits = 0;
 8002aba:	2b01      	cmp	r3, #1
  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8002abc:	69e3      	ldr	r3, [r4, #28]
  SaiBaseAddress->GCR = tmpregisterGCR;
 8002abe:	6029      	str	r1, [r5, #0]
  uint32_t syncen_bits = 0;
 8002ac0:	bf0c      	ite	eq
 8002ac2:	f44f 6880 	moveq.w	r8, #1024	; 0x400
 8002ac6:	f04f 0800 	movne.w	r8, #0
  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d174      	bne.n	8002bb8 <HAL_SAI_Init+0x1b8>
 8002ace:	f8d4 e014 	ldr.w	lr, [r4, #20]
 8002ad2:	6a20      	ldr	r0, [r4, #32]
 8002ad4:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 8002ad8:	6d25      	ldr	r5, [r4, #80]	; 0x50
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8002ada:	6863      	ldr	r3, [r4, #4]
 8002adc:	f033 0102 	bics.w	r1, r3, #2
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8002ae0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8002ae2:	f040 80ba 	bne.w	8002c5a <HAL_SAI_Init+0x25a>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8002ae6:	2901      	cmp	r1, #1
 8002ae8:	bf14      	ite	ne
 8002aea:	f44f 7600 	movne.w	r6, #512	; 0x200
 8002aee:	2600      	moveq	r6, #0
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8002af0:	6c27      	ldr	r7, [r4, #64]	; 0x40
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) | \
 8002af2:	3d01      	subs	r5, #1
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8002af4:	6c61      	ldr	r1, [r4, #68]	; 0x44
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8002af6:	f24f 0a20 	movw	sl, #61472	; 0xf020
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8002afa:	433b      	orrs	r3, r7
  hsai->Instance->CR1 &=~ (SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8002afc:	6817      	ldr	r7, [r2, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8002afe:	f8df 923c 	ldr.w	r9, [pc, #572]	; 8002d3c <HAL_SAI_Init+0x33c>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8002b02:	f04f 0b00 	mov.w	fp, #0
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8002b06:	430b      	orrs	r3, r1
 8002b08:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002b0a:	430b      	orrs	r3, r1
 8002b0c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002b0e:	430b      	orrs	r3, r1
 8002b10:	6921      	ldr	r1, [r4, #16]
 8002b12:	430b      	orrs	r3, r1
  hsai->Instance->CR1 &=~ (SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8002b14:	4980      	ldr	r1, [pc, #512]	; (8002d18 <HAL_SAI_Init+0x318>)
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8002b16:	ea43 0308 	orr.w	r3, r3, r8
  hsai->Instance->CR1 &=~ (SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8002b1a:	4039      	ands	r1, r7
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8002b1c:	ea43 030e 	orr.w	r3, r3, lr
  hsai->Instance->CR1 &=~ (SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8002b20:	6011      	str	r1, [r2, #0]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8002b22:	6817      	ldr	r7, [r2, #0]
  hsai->State= HAL_SAI_STATE_READY;
 8002b24:	f04f 0e01 	mov.w	lr, #1
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8002b28:	ea43 030c 	orr.w	r3, r3, ip
  hsai->Instance->CR2 |=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8002b2c:	69a1      	ldr	r1, [r4, #24]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8002b2e:	433b      	orrs	r3, r7
  hsai->Instance->CR2 |=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8002b30:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8002b32:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
  hsai->Instance->CR2 |=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8002b36:	4339      	orrs	r1, r7
 8002b38:	6b20      	ldr	r0, [r4, #48]	; 0x30
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8002b3a:	4333      	orrs	r3, r6
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) | \
 8002b3c:	6e27      	ldr	r7, [r4, #96]	; 0x60
  hsai->Instance->CR2 |=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8002b3e:	4301      	orrs	r1, r0
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) | \
 8002b40:	6da0      	ldr	r0, [r4, #88]	; 0x58
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8002b42:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8002b44:	6853      	ldr	r3, [r2, #4]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) | \
 8002b46:	4307      	orrs	r7, r0
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8002b48:	4e74      	ldr	r6, [pc, #464]	; (8002d1c <HAL_SAI_Init+0x31c>)
  __HAL_UNLOCK(hsai);
 8002b4a:	4658      	mov	r0, fp
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8002b4c:	ea03 0909 	and.w	r9, r3, r9
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) | \
 8002b50:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8002b52:	f8c2 9004 	str.w	r9, [r2, #4]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) | \
 8002b56:	431f      	orrs	r7, r3
  hsai->Instance->CR2 |=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8002b58:	6853      	ldr	r3, [r2, #4]
 8002b5a:	4319      	orrs	r1, r3
                            ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8002b5c:	6d63      	ldr	r3, [r4, #84]	; 0x54
  hsai->Instance->CR2 |=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8002b5e:	6051      	str	r1, [r2, #4]
                            ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8002b60:	3b01      	subs	r3, #1
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8002b62:	6891      	ldr	r1, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) | \
 8002b64:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize | \
 8002b68:	6e63      	ldr	r3, [r4, #100]	; 0x64
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8002b6a:	400e      	ands	r6, r1
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize | \
 8002b6c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8002b6e:	6096      	str	r6, [r2, #8]
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize | \
 8002b70:	ea43 0601 	orr.w	r6, r3, r1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) | \
 8002b74:	6891      	ldr	r1, [r2, #8]
                            (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8002b76:	6f23      	ldr	r3, [r4, #112]	; 0x70
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) | \
 8002b78:	430f      	orrs	r7, r1
                            (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8002b7a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize | \
 8002b7c:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) | \
 8002b80:	433d      	orrs	r5, r7
                            (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8002b82:	3901      	subs	r1, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) | \
 8002b84:	6095      	str	r5, [r2, #8]
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize | \
 8002b86:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8002b8a:	68d1      	ldr	r1, [r2, #12]
 8002b8c:	ea01 010a 	and.w	r1, r1, sl
 8002b90:	60d1      	str	r1, [r2, #12]
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize | \
 8002b92:	68d1      	ldr	r1, [r2, #12]
 8002b94:	430b      	orrs	r3, r1
 8002b96:	60d3      	str	r3, [r2, #12]
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8002b98:	f8c4 b090 	str.w	fp, [r4, #144]	; 0x90
  __HAL_UNLOCK(hsai);
 8002b9c:	f884 b08c 	strb.w	fp, [r4, #140]	; 0x8c
  hsai->State= HAL_SAI_STATE_READY;
 8002ba0:	f884 e08d 	strb.w	lr, [r4, #141]	; 0x8d
 8002ba4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8002ba8:	f041 0101 	orr.w	r1, r1, #1
  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8002bac:	69e3      	ldr	r3, [r4, #28]
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8002bae:	f44f 6800 	mov.w	r8, #2048	; 0x800
  SaiBaseAddress->GCR = tmpregisterGCR;
 8002bb2:	6029      	str	r1, [r5, #0]
  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d08a      	beq.n	8002ace <HAL_SAI_Init+0xce>
    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8002bb8:	4b52      	ldr	r3, [pc, #328]	; (8002d04 <HAL_SAI_Init+0x304>)
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	f000 8095 	beq.w	8002cea <HAL_SAI_Init+0x2ea>
 8002bc0:	4857      	ldr	r0, [pc, #348]	; (8002d20 <HAL_SAI_Init+0x320>)
 8002bc2:	1a10      	subs	r0, r2, r0
 8002bc4:	fab0 f080 	clz	r0, r0
 8002bc8:	0940      	lsrs	r0, r0, #5
 8002bca:	2800      	cmp	r0, #0
 8002bcc:	f040 808d 	bne.w	8002cea <HAL_SAI_Init+0x2ea>
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8002bd0:	4b54      	ldr	r3, [pc, #336]	; (8002d24 <HAL_SAI_Init+0x324>)
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	f000 80b4 	beq.w	8002d40 <HAL_SAI_Init+0x340>
 8002bd8:	3320      	adds	r3, #32
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	f000 80b0 	beq.w	8002d40 <HAL_SAI_Init+0x340>
    if((hsai->Instance == SAI3_Block_A ) || (hsai->Instance == SAI3_Block_B ))
 8002be0:	4b51      	ldr	r3, [pc, #324]	; (8002d28 <HAL_SAI_Init+0x328>)
 8002be2:	429a      	cmp	r2, r3
 8002be4:	f000 8087 	beq.w	8002cf6 <HAL_SAI_Init+0x2f6>
 8002be8:	3320      	adds	r3, #32
 8002bea:	429a      	cmp	r2, r3
 8002bec:	f000 8083 	beq.w	8002cf6 <HAL_SAI_Init+0x2f6>
    if(hsai->Instance == SAI4_Block_A)
 8002bf0:	4b4e      	ldr	r3, [pc, #312]	; (8002d2c <HAL_SAI_Init+0x32c>)
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	f000 80be 	beq.w	8002d74 <HAL_SAI_Init+0x374>
    if(hsai->Instance == SAI4_Block_B)
 8002bf8:	4b4d      	ldr	r3, [pc, #308]	; (8002d30 <HAL_SAI_Init+0x330>)
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	f000 80b4 	beq.w	8002d68 <HAL_SAI_Init+0x368>
    if(hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8002c00:	f8d4 e014 	ldr.w	lr, [r4, #20]
 8002c04:	f5be 2f00 	cmp.w	lr, #524288	; 0x80000
 8002c08:	f000 80a0 	beq.w	8002d4c <HAL_SAI_Init+0x34c>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE)? 2 : 1;
 8002c0c:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
      tmpval = (freq * 10) / (hsai->Init.AudioFrequency * tmposr * 256);
 8002c10:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002c14:	69e3      	ldr	r3, [r4, #28]
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE)? 2 : 1;
 8002c16:	f1bc 6f80 	cmp.w	ip, #67108864	; 0x4000000
      tmpval = (freq * 10) / (hsai->Init.AudioFrequency * tmposr * 256);
 8002c1a:	ea4f 0140 	mov.w	r1, r0, lsl #1
 8002c1e:	ea4f 2003 	mov.w	r0, r3, lsl #8
 8002c22:	6d25      	ldr	r5, [r4, #80]	; 0x50
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE)? 2 : 1;
 8002c24:	bf0c      	ite	eq
 8002c26:	2302      	moveq	r3, #2
 8002c28:	2301      	movne	r3, #1
      tmpval = (freq * 10) / (hsai->Init.AudioFrequency * tmposr * 256);
 8002c2a:	fb03 f300 	mul.w	r3, r3, r0
 8002c2e:	fbb1 f1f3 	udiv	r1, r1, r3
    hsai->Init.Mckdiv = tmpval / 10;
 8002c32:	4b40      	ldr	r3, [pc, #256]	; (8002d34 <HAL_SAI_Init+0x334>)
 8002c34:	fba3 0301 	umull	r0, r3, r3, r1
 8002c38:	08d8      	lsrs	r0, r3, #3
    if((tmpval % 10) > 8)
 8002c3a:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    hsai->Init.Mckdiv = tmpval / 10;
 8002c3e:	6220      	str	r0, [r4, #32]
    if((tmpval % 10) > 8)
 8002c40:	eba1 0143 	sub.w	r1, r1, r3, lsl #1
 8002c44:	2909      	cmp	r1, #9
 8002c46:	f47f af48 	bne.w	8002ada <HAL_SAI_Init+0xda>
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8002c4a:	6863      	ldr	r3, [r4, #4]
      hsai->Init.Mckdiv += 1;
 8002c4c:	3001      	adds	r0, #1
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8002c4e:	f033 0102 	bics.w	r1, r3, #2
      hsai->Init.Mckdiv += 1;
 8002c52:	6220      	str	r0, [r4, #32]
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8002c54:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8002c56:	f43f af46 	beq.w	8002ae6 <HAL_SAI_Init+0xe6>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8002c5a:	2901      	cmp	r1, #1
 8002c5c:	bf14      	ite	ne
 8002c5e:	2600      	movne	r6, #0
 8002c60:	f44f 7600 	moveq.w	r6, #512	; 0x200
 8002c64:	e744      	b.n	8002af0 <HAL_SAI_Init+0xf0>
    if(((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI2_Block_A) && \
 8002c66:	4b27      	ldr	r3, [pc, #156]	; (8002d04 <HAL_SAI_Init+0x304>)
 8002c68:	4c2e      	ldr	r4, [pc, #184]	; (8002d24 <HAL_SAI_Init+0x324>)
 8002c6a:	492f      	ldr	r1, [pc, #188]	; (8002d28 <HAL_SAI_Init+0x328>)
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	bf18      	it	ne
 8002c70:	42a2      	cmpne	r2, r4
 8002c72:	bf14      	ite	ne
 8002c74:	2301      	movne	r3, #1
 8002c76:	2300      	moveq	r3, #0
        (hsai->Instance != SAI3_Block_A) && (hsai->Instance != SAI4_Block_A)) || \
 8002c78:	428a      	cmp	r2, r1
 8002c7a:	bf0c      	ite	eq
 8002c7c:	2300      	moveq	r3, #0
 8002c7e:	f003 0301 	andne.w	r3, r3, #1
 8002c82:	b1c3      	cbz	r3, 8002cb6 <HAL_SAI_Init+0x2b6>
 8002c84:	4b29      	ldr	r3, [pc, #164]	; (8002d2c <HAL_SAI_Init+0x32c>)
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d015      	beq.n	8002cb6 <HAL_SAI_Init+0x2b6>
    return HAL_ERROR;
 8002c8a:	2001      	movs	r0, #1
 8002c8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8002c90:	2110      	movs	r1, #16
 8002c92:	e70d      	b.n	8002ab0 <HAL_SAI_Init+0xb0>
  if(hsai->State == HAL_SAI_STATE_RESET)
 8002c94:	f890 308d 	ldrb.w	r3, [r0, #141]	; 0x8d
 8002c98:	4604      	mov	r4, r0
    SaiBaseAddress = SAI2;
 8002c9a:	4d27      	ldr	r5, [pc, #156]	; (8002d38 <HAL_SAI_Init+0x338>)
  if(hsai->State == HAL_SAI_STATE_RESET)
 8002c9c:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f47f aedb 	bne.w	8002a5c <HAL_SAI_Init+0x5c>
    hsai->Lock = HAL_UNLOCKED;
 8002ca6:	f880 108c 	strb.w	r1, [r0, #140]	; 0x8c
    HAL_SAI_MspInit(hsai);
 8002caa:	f001 f8d9 	bl	8003e60 <HAL_SAI_MspInit>
 8002cae:	6822      	ldr	r2, [r4, #0]
 8002cb0:	f894 6034 	ldrb.w	r6, [r4, #52]	; 0x34
 8002cb4:	e6d2      	b.n	8002a5c <HAL_SAI_Init+0x5c>
        (hsai->Instance != SAI3_Block_A) && (hsai->Instance != SAI4_Block_A)) || \
 8002cb6:	6843      	ldr	r3, [r0, #4]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d1e6      	bne.n	8002c8a <HAL_SAI_Init+0x28a>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||  \
 8002cbc:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002cbe:	2900      	cmp	r1, #0
 8002cc0:	f43f aea9 	beq.w	8002a16 <HAL_SAI_Init+0x16>
 8002cc4:	e7e1      	b.n	8002c8a <HAL_SAI_Init+0x28a>
 8002cc6:	2130      	movs	r1, #48	; 0x30
 8002cc8:	fa91 f1a1 	rbit	r1, r1
                           ((hsai->Init.PdmInit.MicPairsNbr - 1) << SAI_PDMCR_MICNBR_OFFSET));
 8002ccc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002cce:	fab1 f181 	clz	r1, r1
    SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8002cd2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
                           ((hsai->Init.PdmInit.MicPairsNbr - 1) << SAI_PDMCR_MICNBR_OFFSET));
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	408b      	lsls	r3, r1
    SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8002cd8:	4303      	orrs	r3, r0
 8002cda:	646b      	str	r3, [r5, #68]	; 0x44
    SET_BIT(SaiBaseAddress->PDMCR, SAI_PDMCR_PDMEN);
 8002cdc:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002cde:	f043 0301 	orr.w	r3, r3, #1
 8002ce2:	646b      	str	r3, [r5, #68]	; 0x44
 8002ce4:	e6dc      	b.n	8002aa0 <HAL_SAI_Init+0xa0>
    return HAL_ERROR;
 8002ce6:	2001      	movs	r0, #1
 8002ce8:	4770      	bx	lr
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8002cea:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002cee:	f7ff fdd7 	bl	80028a0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002cf2:	6822      	ldr	r2, [r4, #0]
 8002cf4:	e76c      	b.n	8002bd0 <HAL_SAI_Init+0x1d0>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8002cf6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002cfa:	f7ff fdd1 	bl	80028a0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002cfe:	6822      	ldr	r2, [r4, #0]
 8002d00:	e776      	b.n	8002bf0 <HAL_SAI_Init+0x1f0>
 8002d02:	bf00      	nop
 8002d04:	40015804 	.word	0x40015804
 8002d08:	58005400 	.word	0x58005400
 8002d0c:	40015800 	.word	0x40015800
 8002d10:	20000008 	.word	0x20000008
 8002d14:	95cbec1b 	.word	0x95cbec1b
 8002d18:	fc05c010 	.word	0xfc05c010
 8002d1c:	fff88000 	.word	0xfff88000
 8002d20:	40015824 	.word	0x40015824
 8002d24:	40015c04 	.word	0x40015c04
 8002d28:	40016004 	.word	0x40016004
 8002d2c:	58005404 	.word	0x58005404
 8002d30:	58005424 	.word	0x58005424
 8002d34:	cccccccd 	.word	0xcccccccd
 8002d38:	40015c00 	.word	0x40015c00
 8002d3c:	ffff1ff0 	.word	0xffff1ff0
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8002d40:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002d44:	f7ff fdac 	bl	80028a0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002d48:	6822      	ldr	r2, [r4, #0]
 8002d4a:	e749      	b.n	8002be0 <HAL_SAI_Init+0x1e0>
      tmpval = (freq * 10) / (hsai->Init.AudioFrequency * hsai->FrameInit.FrameLength);
 8002d4c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002d50:	6d25      	ldr	r5, [r4, #80]	; 0x50
 8002d52:	69e3      	ldr	r3, [r4, #28]
 8002d54:	0041      	lsls	r1, r0, #1
 8002d56:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 8002d5a:	fb03 f305 	mul.w	r3, r3, r5
 8002d5e:	fbb1 f1f3 	udiv	r1, r1, r3
 8002d62:	e766      	b.n	8002c32 <HAL_SAI_Init+0x232>
    SaiBaseAddress = SAI3;
 8002d64:	4d06      	ldr	r5, [pc, #24]	; (8002d80 <HAL_SAI_Init+0x380>)
 8002d66:	e671      	b.n	8002a4c <HAL_SAI_Init+0x4c>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8002d68:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002d6c:	f7ff fd98 	bl	80028a0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002d70:	6822      	ldr	r2, [r4, #0]
 8002d72:	e745      	b.n	8002c00 <HAL_SAI_Init+0x200>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8002d74:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002d78:	f7ff fd92 	bl	80028a0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002d7c:	6822      	ldr	r2, [r4, #0]
 8002d7e:	e73b      	b.n	8002bf8 <HAL_SAI_Init+0x1f8>
 8002d80:	40016000 	.word	0x40016000

08002d84 <HAL_SAI_Abort>:
{
 8002d84:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hsai);
 8002d86:	f890 308c 	ldrb.w	r3, [r0, #140]	; 0x8c
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d044      	beq.n	8002e18 <HAL_SAI_Abort+0x94>
  if((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8002d8e:	6801      	ldr	r1, [r0, #0]
  __HAL_LOCK(hsai);
 8002d90:	2201      	movs	r2, #1
 8002d92:	4604      	mov	r4, r0
  if((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8002d94:	680b      	ldr	r3, [r1, #0]
  __HAL_LOCK(hsai);
 8002d96:	f880 208c 	strb.w	r2, [r0, #140]	; 0x8c
  if((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8002d9a:	0398      	lsls	r0, r3, #14
 8002d9c:	d428      	bmi.n	8002df0 <HAL_SAI_Abort+0x6c>
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8002d9e:	4b1f      	ldr	r3, [pc, #124]	; (8002e1c <HAL_SAI_Abort+0x98>)
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8002da0:	f04f 32ff 	mov.w	r2, #4294967295
  hsai->Instance->IMR = 0;
 8002da4:	2500      	movs	r5, #0
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8002da6:	481e      	ldr	r0, [pc, #120]	; (8002e20 <HAL_SAI_Abort+0x9c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
  hsai->Instance->IMR = 0;
 8002daa:	610d      	str	r5, [r1, #16]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8002dac:	fba0 0303 	umull	r0, r3, r0, r3
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8002db0:	618a      	str	r2, [r1, #24]
  __HAL_SAI_DISABLE(hsai);
 8002db2:	680a      	ldr	r2, [r1, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8002db4:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
 8002db6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8002dba:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 8002dbc:	600a      	str	r2, [r1, #0]
 8002dbe:	e002      	b.n	8002dc6 <HAL_SAI_Abort+0x42>
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8002dc0:	680a      	ldr	r2, [r1, #0]
 8002dc2:	03d2      	lsls	r2, r2, #15
 8002dc4:	d508      	bpl.n	8002dd8 <HAL_SAI_Abort+0x54>
    if (count-- == 0)
 8002dc6:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002dca:	d2f9      	bcs.n	8002dc0 <HAL_SAI_Abort+0x3c>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8002dcc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002dd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dd4:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8002dd8:	684b      	ldr	r3, [r1, #4]
  __HAL_UNLOCK(hsai);
 8002dda:	2200      	movs	r2, #0
  hsai->State = HAL_SAI_STATE_READY;
 8002ddc:	2501      	movs	r5, #1
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8002dde:	f043 0308 	orr.w	r3, r3, #8
  __HAL_UNLOCK(hsai);
 8002de2:	4610      	mov	r0, r2
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8002de4:	604b      	str	r3, [r1, #4]
  hsai->State = HAL_SAI_STATE_READY;
 8002de6:	f884 508d 	strb.w	r5, [r4, #141]	; 0x8d
  __HAL_UNLOCK(hsai);
 8002dea:	f884 208c 	strb.w	r2, [r4, #140]	; 0x8c
 8002dee:	bd38      	pop	{r3, r4, r5, pc}
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8002df0:	680b      	ldr	r3, [r1, #0]
    if(hsai->hdmatx != NULL)
 8002df2:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8002df4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002df8:	600b      	str	r3, [r1, #0]
    if(hsai->hdmatx != NULL)
 8002dfa:	b120      	cbz	r0, 8002e06 <HAL_SAI_Abort+0x82>
      if(HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 8002dfc:	f7fd fcc8 	bl	8000790 <HAL_DMA_Abort>
 8002e00:	b108      	cbz	r0, 8002e06 <HAL_SAI_Abort+0x82>
        return HAL_ERROR;
 8002e02:	2001      	movs	r0, #1
 8002e04:	bd38      	pop	{r3, r4, r5, pc}
    if(hsai->hdmarx != NULL)
 8002e06:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8002e0a:	b118      	cbz	r0, 8002e14 <HAL_SAI_Abort+0x90>
      if(HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 8002e0c:	f7fd fcc0 	bl	8000790 <HAL_DMA_Abort>
 8002e10:	2800      	cmp	r0, #0
 8002e12:	d1f6      	bne.n	8002e02 <HAL_SAI_Abort+0x7e>
 8002e14:	6821      	ldr	r1, [r4, #0]
 8002e16:	e7c2      	b.n	8002d9e <HAL_SAI_Abort+0x1a>
  __HAL_LOCK(hsai);
 8002e18:	2002      	movs	r0, #2
}
 8002e1a:	bd38      	pop	{r3, r4, r5, pc}
 8002e1c:	20000008 	.word	0x20000008
 8002e20:	95cbec1b 	.word	0x95cbec1b

08002e24 <HAL_SAI_ErrorCallback>:
{
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop

08002e28 <HAL_SAI_IRQHandler>:
  if(hsai->State != HAL_SAI_STATE_RESET)
 8002e28:	f890 208d 	ldrb.w	r2, [r0, #141]	; 0x8d
 8002e2c:	2a00      	cmp	r2, #0
 8002e2e:	d059      	beq.n	8002ee4 <HAL_SAI_IRQHandler+0xbc>
    uint32_t itflags = hsai->Instance->SR;
 8002e30:	6801      	ldr	r1, [r0, #0]
 8002e32:	4603      	mov	r3, r0
 8002e34:	694a      	ldr	r2, [r1, #20]
{
 8002e36:	b570      	push	{r4, r5, r6, lr}
    if(((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 8002e38:	0715      	lsls	r5, r2, #28
    uint32_t itsources = hsai->Instance->IMR;
 8002e3a:	690c      	ldr	r4, [r1, #16]
{
 8002e3c:	b082      	sub	sp, #8
    uint32_t cr1config = hsai->Instance->CR1;
 8002e3e:	680e      	ldr	r6, [r1, #0]
    if(((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 8002e40:	d501      	bpl.n	8002e46 <HAL_SAI_IRQHandler+0x1e>
 8002e42:	0725      	lsls	r5, r4, #28
 8002e44:	d469      	bmi.n	8002f1a <HAL_SAI_IRQHandler+0xf2>
    else if(((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 8002e46:	07d5      	lsls	r5, r2, #31
 8002e48:	d40c      	bmi.n	8002e64 <HAL_SAI_IRQHandler+0x3c>
    else if(((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 8002e4a:	0790      	lsls	r0, r2, #30
 8002e4c:	d51e      	bpl.n	8002e8c <HAL_SAI_IRQHandler+0x64>
 8002e4e:	07a5      	lsls	r5, r4, #30
 8002e50:	d51c      	bpl.n	8002e8c <HAL_SAI_IRQHandler+0x64>
      if(hsai->mutecallback != (SAIcallback)NULL)
 8002e52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 8002e56:	2202      	movs	r2, #2
 8002e58:	618a      	str	r2, [r1, #24]
      if(hsai->mutecallback != (SAIcallback)NULL)
 8002e5a:	b1ab      	cbz	r3, 8002e88 <HAL_SAI_IRQHandler+0x60>
}
 8002e5c:	b002      	add	sp, #8
 8002e5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hsai->mutecallback();
 8002e62:	4718      	bx	r3
    else if(((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 8002e64:	f014 0501 	ands.w	r5, r4, #1
 8002e68:	d0ef      	beq.n	8002e4a <HAL_SAI_IRQHandler+0x22>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 8002e6a:	2201      	movs	r2, #1
      HAL_SAI_ErrorCallback(hsai);
 8002e6c:	4618      	mov	r0, r3
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 8002e6e:	618a      	str	r2, [r1, #24]
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 8002e70:	f893 108d 	ldrb.w	r1, [r3, #141]	; 0x8d
      hsai->ErrorCode |= tmperror;
 8002e74:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 8002e78:	2922      	cmp	r1, #34	; 0x22
 8002e7a:	bf18      	it	ne
 8002e7c:	2502      	movne	r5, #2
      hsai->ErrorCode |= tmperror;
 8002e7e:	4315      	orrs	r5, r2
 8002e80:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
      HAL_SAI_ErrorCallback(hsai);
 8002e84:	f7ff ffce 	bl	8002e24 <HAL_SAI_ErrorCallback>
}
 8002e88:	b002      	add	sp, #8
 8002e8a:	bd70      	pop	{r4, r5, r6, pc}
    else if(((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 8002e8c:	0690      	lsls	r0, r2, #26
 8002e8e:	d514      	bpl.n	8002eba <HAL_SAI_IRQHandler+0x92>
 8002e90:	06a5      	lsls	r5, r4, #26
 8002e92:	d512      	bpl.n	8002eba <HAL_SAI_IRQHandler+0x92>
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 8002e94:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
      if((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8002e98:	03b4      	lsls	r4, r6, #14
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 8002e9a:	f042 0204 	orr.w	r2, r2, #4
 8002e9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      if((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8002ea2:	d516      	bpl.n	8002ed2 <HAL_SAI_IRQHandler+0xaa>
        if(hsai->hdmatx != NULL)
 8002ea4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002ea6:	2a00      	cmp	r2, #0
 8002ea8:	d04d      	beq.n	8002f46 <HAL_SAI_IRQHandler+0x11e>
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8002eaa:	4b2b      	ldr	r3, [pc, #172]	; (8002f58 <HAL_SAI_IRQHandler+0x130>)
          HAL_DMA_Abort_IT(hsai->hdmatx);
 8002eac:	4610      	mov	r0, r2
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8002eae:	6513      	str	r3, [r2, #80]	; 0x50
}
 8002eb0:	b002      	add	sp, #8
 8002eb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          HAL_DMA_Abort_IT(hsai->hdmarx);
 8002eb6:	f7fd bcd7 	b.w	8000868 <HAL_DMA_Abort_IT>
    else if(((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 8002eba:	0650      	lsls	r0, r2, #25
 8002ebc:	d513      	bpl.n	8002ee6 <HAL_SAI_IRQHandler+0xbe>
 8002ebe:	0665      	lsls	r5, r4, #25
 8002ec0:	d511      	bpl.n	8002ee6 <HAL_SAI_IRQHandler+0xbe>
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 8002ec2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
      if((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8002ec6:	03b4      	lsls	r4, r6, #14
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 8002ec8:	f042 0208 	orr.w	r2, r2, #8
 8002ecc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      if((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8002ed0:	d4e8      	bmi.n	8002ea4 <HAL_SAI_IRQHandler+0x7c>
        HAL_SAI_Abort(hsai);
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	9301      	str	r3, [sp, #4]
 8002ed6:	f7ff ff55 	bl	8002d84 <HAL_SAI_Abort>
        HAL_SAI_ErrorCallback(hsai);
 8002eda:	9b01      	ldr	r3, [sp, #4]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff ffa1 	bl	8002e24 <HAL_SAI_ErrorCallback>
 8002ee2:	e7d1      	b.n	8002e88 <HAL_SAI_IRQHandler+0x60>
 8002ee4:	4770      	bx	lr
    else if(((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 8002ee6:	0750      	lsls	r0, r2, #29
 8002ee8:	d51d      	bpl.n	8002f26 <HAL_SAI_IRQHandler+0xfe>
 8002eea:	0765      	lsls	r5, r4, #29
 8002eec:	d51b      	bpl.n	8002f26 <HAL_SAI_IRQHandler+0xfe>
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 8002eee:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
      if((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8002ef2:	f416 3600 	ands.w	r6, r6, #131072	; 0x20000
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 8002ef6:	f042 0220 	orr.w	r2, r2, #32
 8002efa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      if((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8002efe:	d1d1      	bne.n	8002ea4 <HAL_SAI_IRQHandler+0x7c>
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8002f00:	f04f 34ff 	mov.w	r4, #4294967295
        hsai->State = HAL_SAI_STATE_READY;
 8002f04:	2201      	movs	r2, #1
        hsai->Instance->IMR = 0U;
 8002f06:	610e      	str	r6, [r1, #16]
        HAL_SAI_ErrorCallback(hsai);
 8002f08:	4618      	mov	r0, r3
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8002f0a:	618c      	str	r4, [r1, #24]
        hsai->XferCount = 0U;
 8002f0c:	f8a3 607a 	strh.w	r6, [r3, #122]	; 0x7a
        hsai->State = HAL_SAI_STATE_READY;
 8002f10:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        HAL_SAI_ErrorCallback(hsai);
 8002f14:	f7ff ff86 	bl	8002e24 <HAL_SAI_ErrorCallback>
 8002f18:	e7b6      	b.n	8002e88 <HAL_SAI_IRQHandler+0x60>
      hsai->InterruptServiceRoutine(hsai);
 8002f1a:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
}
 8002f1e:	b002      	add	sp, #8
 8002f20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      hsai->InterruptServiceRoutine(hsai);
 8002f24:	4718      	bx	r3
    else if(((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 8002f26:	06d0      	lsls	r0, r2, #27
 8002f28:	d5ae      	bpl.n	8002e88 <HAL_SAI_IRQHandler+0x60>
 8002f2a:	06e2      	lsls	r2, r4, #27
 8002f2c:	d5ac      	bpl.n	8002e88 <HAL_SAI_IRQHandler+0x60>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 8002f2e:	2210      	movs	r2, #16
      HAL_SAI_ErrorCallback(hsai);
 8002f30:	4618      	mov	r0, r3
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 8002f32:	618a      	str	r2, [r1, #24]
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 8002f34:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002f38:	f042 0210 	orr.w	r2, r2, #16
 8002f3c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      HAL_SAI_ErrorCallback(hsai);
 8002f40:	f7ff ff70 	bl	8002e24 <HAL_SAI_ErrorCallback>
}
 8002f44:	e7a0      	b.n	8002e88 <HAL_SAI_IRQHandler+0x60>
        else if(hsai->hdmarx != NULL)
 8002f46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d09c      	beq.n	8002e88 <HAL_SAI_IRQHandler+0x60>
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8002f4e:	4a02      	ldr	r2, [pc, #8]	; (8002f58 <HAL_SAI_IRQHandler+0x130>)
          HAL_DMA_Abort_IT(hsai->hdmarx);
 8002f50:	4618      	mov	r0, r3
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8002f52:	651a      	str	r2, [r3, #80]	; 0x50
 8002f54:	e7ac      	b.n	8002eb0 <HAL_SAI_IRQHandler+0x88>
 8002f56:	bf00      	nop
 8002f58:	08002f5d 	.word	0x08002f5d

08002f5c <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002f5c:	b510      	push	{r4, lr}
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f5e:	6b84      	ldr	r4, [r0, #56]	; 0x38
  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8002f60:	f04f 32ff 	mov.w	r2, #4294967295
  hsai->Instance->IMR = 0U;
 8002f64:	2000      	movs	r0, #0
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8002f66:	6821      	ldr	r1, [r4, #0]
 8002f68:	680b      	ldr	r3, [r1, #0]
 8002f6a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002f6e:	600b      	str	r3, [r1, #0]
  hsai->Instance->IMR = 0U;
 8002f70:	6108      	str	r0, [r1, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8002f72:	618a      	str	r2, [r1, #24]

  if(hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 8002f74:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002f78:	2b20      	cmp	r3, #32
 8002f7a:	d01b      	beq.n	8002fb4 <SAI_DMAAbort+0x58>
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8002f7c:	4b12      	ldr	r3, [pc, #72]	; (8002fc8 <SAI_DMAAbort+0x6c>)
 8002f7e:	4813      	ldr	r0, [pc, #76]	; (8002fcc <SAI_DMAAbort+0x70>)
 8002f80:	681b      	ldr	r3, [r3, #0]
  __HAL_SAI_DISABLE(hsai);
 8002f82:	680a      	ldr	r2, [r1, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8002f84:	fba0 0303 	umull	r0, r3, r0, r3
  __HAL_SAI_DISABLE(hsai);
 8002f88:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8002f8c:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
 8002f8e:	600a      	str	r2, [r1, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	e002      	b.n	8002f9a <SAI_DMAAbort+0x3e>
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8002f94:	680a      	ldr	r2, [r1, #0]
 8002f96:	03d2      	lsls	r2, r2, #15
 8002f98:	d508      	bpl.n	8002fac <SAI_DMAAbort+0x50>
    if (count-- == 0)
 8002f9a:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002f9e:	d2f9      	bcs.n	8002f94 <SAI_DMAAbort+0x38>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8002fa0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002fa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fa8:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  {
    /* Disable SAI peripheral */
    SAI_Disable(hsai);

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8002fac:	684b      	ldr	r3, [r1, #4]
 8002fae:	f043 0308 	orr.w	r3, r3, #8
 8002fb2:	604b      	str	r3, [r1, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8002fb4:	2201      	movs	r2, #1

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8002fb6:	2300      	movs	r3, #0

  /* SAI error Callback */
  HAL_SAI_ErrorCallback(hsai);
 8002fb8:	4620      	mov	r0, r4
  hsai->State = HAL_SAI_STATE_READY;
 8002fba:	f884 208d 	strb.w	r2, [r4, #141]	; 0x8d
  hsai->XferCount = 0U;
 8002fbe:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
  HAL_SAI_ErrorCallback(hsai);
 8002fc2:	f7ff ff2f 	bl	8002e24 <HAL_SAI_ErrorCallback>
 8002fc6:	bd10      	pop	{r4, pc}
 8002fc8:	20000008 	.word	0x20000008
 8002fcc:	95cbec1b 	.word	0x95cbec1b

08002fd0 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8002fd0:	b310      	cbz	r0, 8003018 <HAL_SDRAM_Init+0x48>
{   
 8002fd2:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8002fd4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8002fd8:	4604      	mov	r4, r0
 8002fda:	460d      	mov	r5, r1
 8002fdc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002fe0:	b1ab      	cbz	r3, 800300e <HAL_SDRAM_Init+0x3e>
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002fe2:	2302      	movs	r3, #2
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8002fe4:	1d21      	adds	r1, r4, #4
 8002fe6:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002fe8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8002fec:	f000 fa88 	bl	8003500 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8002ff0:	4629      	mov	r1, r5
 8002ff2:	e894 0005 	ldmia.w	r4, {r0, r2}
 8002ff6:	f000 fabf 	bl	8003578 <FMC_SDRAM_Timing_Init>
  
  /* Enable FMC IP */
  __FMC_ENABLE();
 8002ffa:	4a08      	ldr	r2, [pc, #32]	; (800301c <HAL_SDRAM_Init+0x4c>)
    
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8002ffc:	2101      	movs	r1, #1
  
  return HAL_OK;
 8002ffe:	2000      	movs	r0, #0
  __FMC_ENABLE();
 8003000:	6813      	ldr	r3, [r2, #0]
 8003002:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003006:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003008:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
  return HAL_OK;
 800300c:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 800300e:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8003012:	f000 fea5 	bl	8003d60 <HAL_SDRAM_MspInit>
 8003016:	e7e4      	b.n	8002fe2 <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 8003018:	2001      	movs	r0, #1
 800301a:	4770      	bx	lr
 800301c:	52004000 	.word	0x52004000

08003020 <HAL_SDRAM_RefreshErrorCallback>:
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop

08003024 <HAL_SDRAM_IRQHandler>:
  * @retval HAL status
*/
void HAL_SDRAM_IRQHandler(SDRAM_HandleTypeDef *hsdram)
{
  /* Check SDRAM interrupt Rising edge flag */
  if(__FMC_SDRAM_GET_FLAG(hsdram->Instance, FMC_SDRAM_FLAG_REFRESH_IT))
 8003024:	6802      	ldr	r2, [r0, #0]
 8003026:	6992      	ldr	r2, [r2, #24]
 8003028:	07d3      	lsls	r3, r2, #31
 800302a:	d400      	bmi.n	800302e <HAL_SDRAM_IRQHandler+0xa>
 800302c:	4770      	bx	lr
{
 800302e:	b510      	push	{r4, lr}
 8003030:	4604      	mov	r4, r0
  {
    /* SDRAM refresh error interrupt callback */
    HAL_SDRAM_RefreshErrorCallback(hsdram);
 8003032:	f7ff fff5 	bl	8003020 <HAL_SDRAM_RefreshErrorCallback>
    
    /* Clear SDRAM refresh error interrupt pending bit */
    __FMC_SDRAM_CLEAR_FLAG(hsdram->Instance, FMC_SDRAM_FLAG_REFRESH_ERROR);
 8003036:	6822      	ldr	r2, [r4, #0]
 8003038:	6953      	ldr	r3, [r2, #20]
 800303a:	f043 0301 	orr.w	r3, r3, #1
 800303e:	6153      	str	r3, [r2, #20]
 8003040:	bd10      	pop	{r4, pc}
 8003042:	bf00      	nop

08003044 <HAL_SDRAM_SendCommand>:
  * @param  Command: SDRAM command structure
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8003044:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8003046:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d101      	bne.n	8003054 <HAL_SDRAM_SendCommand+0x10>
  {
    return HAL_BUSY;
 8003050:	4618      	mov	r0, r3
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  
  return HAL_OK;  
}
 8003052:	bd38      	pop	{r3, r4, r5, pc}
 8003054:	4604      	mov	r4, r0
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003056:	2302      	movs	r3, #2
 8003058:	460d      	mov	r5, r1
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800305a:	6800      	ldr	r0, [r0, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800305c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8003060:	f000 fad8 	bl	8003614 <FMC_SDRAM_SendCommand>
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8003064:	682b      	ldr	r3, [r5, #0]
  return HAL_OK;  
 8003066:	2000      	movs	r0, #0
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8003068:	2b02      	cmp	r3, #2
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800306a:	bf0c      	ite	eq
 800306c:	2305      	moveq	r3, #5
    hsdram->State = HAL_SDRAM_STATE_READY;
 800306e:	2301      	movne	r3, #1
 8003070:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8003074:	bd38      	pop	{r3, r4, r5, pc}
 8003076:	bf00      	nop

08003078 <HAL_SDRAM_ProgramRefreshRate>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8003078:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d101      	bne.n	8003086 <HAL_SDRAM_ProgramRefreshRate+0xe>
  {
    return HAL_BUSY;
 8003082:	4618      	mov	r0, r3
 8003084:	4770      	bx	lr
{
 8003086:	b510      	push	{r4, lr}
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003088:	2302      	movs	r3, #2
 800308a:	4604      	mov	r4, r0
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800308c:	6800      	ldr	r0, [r0, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800308e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8003092:	f000 fad5 	bl	8003640 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003096:	2301      	movs	r3, #1
  
  return HAL_OK;   
 8003098:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 800309a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;   
 800309e:	bd10      	pop	{r4, pc}

080030a0 <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 80030a0:	6803      	ldr	r3, [r0, #0]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 80030a2:	492c      	ldr	r1, [pc, #176]	; (8003154 <SPI_CloseTransfer+0xb4>)
  uint32_t itflag = hspi->Instance->SR;
 80030a4:	695a      	ldr	r2, [r3, #20]
{
 80030a6:	b410      	push	{r4}
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80030a8:	699c      	ldr	r4, [r3, #24]
 80030aa:	f044 0408 	orr.w	r4, r4, #8
 80030ae:	619c      	str	r4, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80030b0:	699c      	ldr	r4, [r3, #24]
 80030b2:	f044 0410 	orr.w	r4, r4, #16
 80030b6:	619c      	str	r4, [r3, #24]
  __HAL_SPI_DISABLE(hspi);
 80030b8:	681c      	ldr	r4, [r3, #0]
 80030ba:	f024 0401 	bic.w	r4, r4, #1
 80030be:	601c      	str	r4, [r3, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 80030c0:	691c      	ldr	r4, [r3, #16]
 80030c2:	4021      	ands	r1, r4
 80030c4:	6119      	str	r1, [r3, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN|SPI_CFG1_RXDMAEN);
 80030c6:	6899      	ldr	r1, [r3, #8]
 80030c8:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
 80030cc:	6099      	str	r1, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80030ce:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
 80030d2:	2904      	cmp	r1, #4
 80030d4:	d001      	beq.n	80030da <SPI_CloseTransfer+0x3a>
  {
    if ((itflag & SPI_FLAG_UDR) != RESET)
 80030d6:	0691      	lsls	r1, r2, #26
 80030d8:	d430      	bmi.n	800313c <SPI_CloseTransfer+0x9c>
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80030da:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
 80030de:	2903      	cmp	r1, #3
 80030e0:	d001      	beq.n	80030e6 <SPI_CloseTransfer+0x46>
  {
    if ((itflag & SPI_FLAG_OVR) != RESET)
 80030e2:	0654      	lsls	r4, r2, #25
 80030e4:	d41f      	bmi.n	8003126 <SPI_CloseTransfer+0x86>
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != RESET)
 80030e6:	0591      	lsls	r1, r2, #22
 80030e8:	d509      	bpl.n	80030fe <SPI_CloseTransfer+0x5e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80030ea:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 80030ee:	f041 0101 	orr.w	r1, r1, #1
 80030f2:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80030f6:	6999      	ldr	r1, [r3, #24]
 80030f8:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80030fc:	6199      	str	r1, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != RESET)
 80030fe:	05d2      	lsls	r2, r2, #23
 8003100:	d509      	bpl.n	8003116 <SPI_CloseTransfer+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003102:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8003106:	f042 0208 	orr.w	r2, r2, #8
 800310a:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800310e:	699a      	ldr	r2, [r3, #24]
 8003110:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003114:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = 0U;
 8003116:	2300      	movs	r3, #0
  hspi->RxXferCount = 0U;
}
 8003118:	f85d 4b04 	ldr.w	r4, [sp], #4
  hspi->TxXferCount = 0U;
 800311c:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = 0U;
 8003120:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 8003124:	4770      	bx	lr
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003126:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 800312a:	f041 0104 	orr.w	r1, r1, #4
 800312e:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003132:	6999      	ldr	r1, [r3, #24]
 8003134:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8003138:	6199      	str	r1, [r3, #24]
 800313a:	e7d4      	b.n	80030e6 <SPI_CloseTransfer+0x46>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800313c:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 8003140:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8003144:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8003148:	6999      	ldr	r1, [r3, #24]
 800314a:	f041 0120 	orr.w	r1, r1, #32
 800314e:	6199      	str	r1, [r3, #24]
 8003150:	e7c3      	b.n	80030da <SPI_CloseTransfer+0x3a>
 8003152:	bf00      	nop
 8003154:	fffffc94 	.word	0xfffffc94

08003158 <HAL_SPI_Init>:
  if (hspi == NULL)
 8003158:	2800      	cmp	r0, #0
 800315a:	f000 80a9 	beq.w	80032b0 <HAL_SPI_Init+0x158>
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800315e:	4a55      	ldr	r2, [pc, #340]	; (80032b4 <HAL_SPI_Init+0x15c>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003160:	2100      	movs	r1, #0
{
 8003162:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8003164:	6803      	ldr	r3, [r0, #0]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003166:	6281      	str	r1, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8003168:	4293      	cmp	r3, r2
 800316a:	d015      	beq.n	8003198 <HAL_SPI_Init+0x40>
 800316c:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
 8003170:	4293      	cmp	r3, r2
 8003172:	d011      	beq.n	8003198 <HAL_SPI_Init+0x40>
 8003174:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003178:	4293      	cmp	r3, r2
 800317a:	d00d      	beq.n	8003198 <HAL_SPI_Init+0x40>
 800317c:	68c2      	ldr	r2, [r0, #12]
 800317e:	2a0f      	cmp	r2, #15
 8003180:	d808      	bhi.n	8003194 <HAL_SPI_Init+0x3c>
  *               the configuration information for SPI module.
  * @retval Packet size occuppied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold>>SPI_CFG1_FTHLV_Pos) + 1;
 8003182:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize     >>SPI_CFG1_DSIZE_Pos) + 1;

  /* Convert data size to Byte */
  data_size = (data_size+7)/8;
 8003184:	f102 0508 	add.w	r5, r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold>>SPI_CFG1_FTHLV_Pos) + 1;
 8003188:	094c      	lsrs	r4, r1, #5
  data_size = (data_size+7)/8;
 800318a:	08ed      	lsrs	r5, r5, #3

  return data_size * fifo_threashold;
 800318c:	fb04 5505 	mla	r5, r4, r5, r5
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE )) ||
 8003190:	2d08      	cmp	r5, #8
 8003192:	d909      	bls.n	80031a8 <HAL_SPI_Init+0x50>
    return HAL_ERROR;
 8003194:	2001      	movs	r0, #1
 8003196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  data_size = (data_size+7)/8;
 8003198:	68c2      	ldr	r2, [r0, #12]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold>>SPI_CFG1_FTHLV_Pos) + 1;
 800319a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  data_size = (data_size+7)/8;
 800319c:	f102 0508 	add.w	r5, r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold>>SPI_CFG1_FTHLV_Pos) + 1;
 80031a0:	094c      	lsrs	r4, r1, #5
  data_size = (data_size+7)/8;
 80031a2:	08ed      	lsrs	r5, r5, #3
  return data_size * fifo_threashold;
 80031a4:	fb04 5505 	mla	r5, r4, r5, r5
      (( IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)) )
 80031a8:	4e42      	ldr	r6, [pc, #264]	; (80032b4 <HAL_SPI_Init+0x15c>)
 80031aa:	4c43      	ldr	r4, [pc, #268]	; (80032b8 <HAL_SPI_Init+0x160>)
 80031ac:	42a3      	cmp	r3, r4
 80031ae:	bf18      	it	ne
 80031b0:	42b3      	cmpne	r3, r6
 80031b2:	d052      	beq.n	800325a <HAL_SPI_Init+0x102>
 80031b4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80031b8:	42a3      	cmp	r3, r4
 80031ba:	d04e      	beq.n	800325a <HAL_SPI_Init+0x102>
 80031bc:	4604      	mov	r4, r0
  if (hspi->State == HAL_SPI_STATE_RESET)
 80031be:	f890 0081 	ldrb.w	r0, [r0, #129]	; 0x81
 80031c2:	f000 05ff 	and.w	r5, r0, #255	; 0xff
 80031c6:	2800      	cmp	r0, #0
 80031c8:	d050      	beq.n	800326c <HAL_SPI_Init+0x114>
 80031ca:	f04f 0e00 	mov.w	lr, #0
  hspi->State = HAL_SPI_STATE_BUSY;
 80031ce:	2002      	movs	r0, #2
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 80031d0:	69a7      	ldr	r7, [r4, #24]
 80031d2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
  hspi->State = HAL_SPI_STATE_BUSY;
 80031d4:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 80031d8:	f1b7 6f80 	cmp.w	r7, #67108864	; 0x4000000
  __HAL_SPI_DISABLE(hspi);
 80031dc:	6818      	ldr	r0, [r3, #0]
 80031de:	f020 0001 	bic.w	r0, r0, #1
 80031e2:	6018      	str	r0, [r3, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 80031e4:	6860      	ldr	r0, [r4, #4]
 80031e6:	d059      	beq.n	800329c <HAL_SPI_Init+0x144>
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 80031e8:	6b66      	ldr	r6, [r4, #52]	; 0x34
 80031ea:	ea47 0c06 	orr.w	ip, r7, r6
 80031ee:	6a67      	ldr	r7, [r4, #36]	; 0x24
 80031f0:	6926      	ldr	r6, [r4, #16]
 80031f2:	ea4c 0c07 	orr.w	ip, ip, r7
 80031f6:	6967      	ldr	r7, [r4, #20]
 80031f8:	ea4c 0c06 	orr.w	ip, ip, r6
 80031fc:	6a26      	ldr	r6, [r4, #32]
 80031fe:	ea4c 0c07 	orr.w	ip, ip, r7
 8003202:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 8003204:	ea4c 0c06 	orr.w	ip, ip, r6
 8003208:	68a6      	ldr	r6, [r4, #8]
 800320a:	ea4c 0707 	orr.w	r7, ip, r7
 800320e:	433e      	orrs	r6, r7
 8003210:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 8003212:	433e      	orrs	r6, r7
 8003214:	6da7      	ldr	r7, [r4, #88]	; 0x58
 8003216:	433e      	orrs	r6, r7
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8003218:	69e7      	ldr	r7, [r4, #28]
 800321a:	4339      	orrs	r1, r7
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800321c:	4306      	orrs	r6, r0
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800321e:	430a      	orrs	r2, r1
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8003220:	4335      	orrs	r5, r6
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8003222:	ea42 020e 	orr.w	r2, r2, lr
 8003226:	609a      	str	r2, [r3, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8003228:	60dd      	str	r5, [r3, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800322a:	bb50      	cbnz	r0, 8003282 <HAL_SPI_Init+0x12a>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800322c:	689a      	ldr	r2, [r3, #8]
 800322e:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 8003232:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003236:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8003238:	689a      	ldr	r2, [r3, #8]
 800323a:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 800323e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003242:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003244:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003246:	f022 0201 	bic.w	r2, r2, #1
 800324a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800324c:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800324e:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003250:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8003254:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  return HAL_OK;
 8003258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (( IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)) )
 800325a:	2d10      	cmp	r5, #16
 800325c:	d89a      	bhi.n	8003194 <HAL_SPI_Init+0x3c>
 800325e:	4604      	mov	r4, r0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003260:	f890 0081 	ldrb.w	r0, [r0, #129]	; 0x81
 8003264:	f000 05ff 	and.w	r5, r0, #255	; 0xff
 8003268:	2800      	cmp	r0, #0
 800326a:	d1ae      	bne.n	80031ca <HAL_SPI_Init+0x72>
    hspi->Lock = HAL_UNLOCKED;
 800326c:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 8003270:	4620      	mov	r0, r4
 8003272:	f000 fd43 	bl	8003cfc <HAL_SPI_MspInit>
 8003276:	6823      	ldr	r3, [r4, #0]
 8003278:	f8d4 e028 	ldr.w	lr, [r4, #40]	; 0x28
 800327c:	68e2      	ldr	r2, [r4, #12]
 800327e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003280:	e7a5      	b.n	80031ce <HAL_SPI_Init+0x76>
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003282:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003284:	f022 0201 	bic.w	r2, r2, #1
 8003288:	651a      	str	r2, [r3, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800328a:	0242      	lsls	r2, r0, #9
 800328c:	d5de      	bpl.n	800324c <HAL_SPI_Init+0xf4>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800328e:	68da      	ldr	r2, [r3, #12]
 8003290:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003292:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003296:	430a      	orrs	r2, r1
 8003298:	60da      	str	r2, [r3, #12]
 800329a:	e7d7      	b.n	800324c <HAL_SPI_Init+0xf4>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 800329c:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 80032a0:	d1a2      	bne.n	80031e8 <HAL_SPI_Init+0x90>
 80032a2:	2d00      	cmp	r5, #0
 80032a4:	d1a0      	bne.n	80031e8 <HAL_SPI_Init+0x90>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80032a6:	681e      	ldr	r6, [r3, #0]
 80032a8:	f446 5680 	orr.w	r6, r6, #4096	; 0x1000
 80032ac:	601e      	str	r6, [r3, #0]
 80032ae:	e79b      	b.n	80031e8 <HAL_SPI_Init+0x90>
    return HAL_ERROR;
 80032b0:	2001      	movs	r0, #1
}
 80032b2:	4770      	bx	lr
 80032b4:	40013000 	.word	0x40013000
 80032b8:	40003800 	.word	0x40003800

080032bc <HAL_SPI_TxCpltCallback>:
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop

080032c0 <HAL_SPI_RxCpltCallback>:
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop

080032c4 <HAL_SPI_TxRxCpltCallback>:
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop

080032c8 <HAL_SPI_ErrorCallback>:
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop

080032cc <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->IER;
 80032cc:	6803      	ldr	r3, [r0, #0]
 80032ce:	691a      	ldr	r2, [r3, #16]
  uint32_t itflag   = hspi->Instance->SR;
 80032d0:	6959      	ldr	r1, [r3, #20]
{
 80032d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t trigger  = itsource & itflag;
 80032d6:	ea02 0501 	and.w	r5, r2, r1
  uint32_t cfg1     = hspi->Instance->CFG1;
 80032da:	f8d3 e008 	ldr.w	lr, [r3, #8]
{
 80032de:	4604      	mov	r4, r0
  HAL_SPI_StateTypeDef State = hspi->State;
 80032e0:	f890 6081 	ldrb.w	r6, [r0, #129]	; 0x81
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXNE))
 80032e4:	f005 0741 	and.w	r7, r5, #65	; 0x41
 80032e8:	2f01      	cmp	r7, #1
 80032ea:	f000 80c9 	beq.w	8003480 <HAL_SPI_IRQHandler+0x1b4>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXE))
 80032ee:	f005 0022 	and.w	r0, r5, #34	; 0x22
 80032f2:	2802      	cmp	r0, #2
 80032f4:	f000 80ca 	beq.w	800348c <HAL_SPI_IRQHandler+0x1c0>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80032f8:	0728      	lsls	r0, r5, #28
 80032fa:	d529      	bpl.n	8003350 <HAL_SPI_IRQHandler+0x84>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80032fc:	699a      	ldr	r2, [r3, #24]
    if( HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN|SPI_CFG1_RXDMAEN) ||                       // IT based transfer is done
 80032fe:	f41e 4f40 	tst.w	lr, #49152	; 0xc000
 8003302:	b2f6      	uxtb	r6, r6
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8003304:	f042 0208 	orr.w	r2, r2, #8
 8003308:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800330a:	699a      	ldr	r2, [r3, #24]
 800330c:	f042 0210 	orr.w	r2, r2, #16
 8003310:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8003312:	699a      	ldr	r2, [r3, #24]
 8003314:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003318:	619a      	str	r2, [r3, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800331a:	691a      	ldr	r2, [r3, #16]
 800331c:	f022 0208 	bic.w	r2, r2, #8
 8003320:	611a      	str	r2, [r3, #16]
    if( HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN|SPI_CFG1_RXDMAEN) ||                       // IT based transfer is done
 8003322:	d078      	beq.n	8003416 <HAL_SPI_IRQHandler+0x14a>
 8003324:	2e04      	cmp	r6, #4
 8003326:	f000 80c7 	beq.w	80034b8 <HAL_SPI_IRQHandler+0x1ec>
       ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 800332a:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800332c:	69d2      	ldr	r2, [r2, #28]
 800332e:	2a00      	cmp	r2, #0
 8003330:	d071      	beq.n	8003416 <HAL_SPI_IRQHandler+0x14a>
 8003332:	2e03      	cmp	r6, #3
 8003334:	f000 80bb 	beq.w	80034ae <HAL_SPI_IRQHandler+0x1e2>
       ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)) )   // DMA is used in normal mode
 8003338:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800333a:	69d2      	ldr	r2, [r2, #28]
 800333c:	2a00      	cmp	r2, #0
 800333e:	d06a      	beq.n	8003416 <HAL_SPI_IRQHandler+0x14a>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8003340:	2e05      	cmp	r6, #5
 8003342:	f040 809b 	bne.w	800347c <HAL_SPI_IRQHandler+0x1b0>
      HAL_SPI_TxRxCpltCallback(hspi);
 8003346:	4620      	mov	r0, r4
 8003348:	f7ff ffbc 	bl	80032c4 <HAL_SPI_TxRxCpltCallback>
 800334c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT) && HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP ))
 8003350:	0710      	lsls	r0, r2, #28
 8003352:	d507      	bpl.n	8003364 <HAL_SPI_IRQHandler+0x98>
 8003354:	0509      	lsls	r1, r1, #20
 8003356:	d505      	bpl.n	8003364 <HAL_SPI_IRQHandler+0x98>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8003358:	699a      	ldr	r2, [r3, #24]
 800335a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800335e:	619a      	str	r2, [r3, #24]
    return;
 8003360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != RESET)
 8003364:	f415 7f58 	tst.w	r5, #864	; 0x360
 8003368:	f000 8088 	beq.w	800347c <HAL_SPI_IRQHandler+0x1b0>
    if ((trigger & SPI_FLAG_OVR) != RESET)
 800336c:	066a      	lsls	r2, r5, #25
 800336e:	d509      	bpl.n	8003384 <HAL_SPI_IRQHandler+0xb8>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003370:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8003374:	f042 0204 	orr.w	r2, r2, #4
 8003378:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800337c:	699a      	ldr	r2, [r3, #24]
 800337e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003382:	619a      	str	r2, [r3, #24]
    if ((trigger & SPI_FLAG_MODF) != RESET)
 8003384:	05af      	lsls	r7, r5, #22
 8003386:	d509      	bpl.n	800339c <HAL_SPI_IRQHandler+0xd0>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003388:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800338c:	f042 0201 	orr.w	r2, r2, #1
 8003390:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003394:	699a      	ldr	r2, [r3, #24]
 8003396:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800339a:	619a      	str	r2, [r3, #24]
    if ((trigger & SPI_FLAG_FRE) != RESET)
 800339c:	05ee      	lsls	r6, r5, #23
 800339e:	d509      	bpl.n	80033b4 <HAL_SPI_IRQHandler+0xe8>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80033a0:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80033a4:	f042 0208 	orr.w	r2, r2, #8
 80033a8:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80033ac:	699a      	ldr	r2, [r3, #24]
 80033ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033b2:	619a      	str	r2, [r3, #24]
    if ((trigger & SPI_FLAG_UDR) != RESET)
 80033b4:	06ad      	lsls	r5, r5, #26
 80033b6:	d509      	bpl.n	80033cc <HAL_SPI_IRQHandler+0x100>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80033b8:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80033bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80033c0:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80033c4:	699a      	ldr	r2, [r3, #24]
 80033c6:	f042 0220 	orr.w	r2, r2, #32
 80033ca:	619a      	str	r2, [r3, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033cc:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80033d0:	2a00      	cmp	r2, #0
 80033d2:	d053      	beq.n	800347c <HAL_SPI_IRQHandler+0x1b0>
      __HAL_SPI_DISABLE(hspi);
 80033d4:	6819      	ldr	r1, [r3, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN|SPI_CFG1_RXDMAEN))
 80033d6:	f41e 4f40 	tst.w	lr, #49152	; 0xc000
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 80033da:	4a40      	ldr	r2, [pc, #256]	; (80034dc <HAL_SPI_IRQHandler+0x210>)
      __HAL_SPI_DISABLE(hspi);
 80033dc:	f021 0101 	bic.w	r1, r1, #1
 80033e0:	6019      	str	r1, [r3, #0]
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 80033e2:	6919      	ldr	r1, [r3, #16]
 80033e4:	ea02 0201 	and.w	r2, r2, r1
 80033e8:	611a      	str	r2, [r3, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN|SPI_CFG1_RXDMAEN))
 80033ea:	d06e      	beq.n	80034ca <HAL_SPI_IRQHandler+0x1fe>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80033ec:	689a      	ldr	r2, [r3, #8]
        if (hspi->hdmarx != NULL)
 80033ee:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80033f0:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80033f4:	609a      	str	r2, [r3, #8]
        if (hspi->hdmarx != NULL)
 80033f6:	b121      	cbz	r1, 8003402 <HAL_SPI_IRQHandler+0x136>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80033f8:	4b39      	ldr	r3, [pc, #228]	; (80034e0 <HAL_SPI_IRQHandler+0x214>)
          HAL_DMA_Abort_IT(hspi->hdmarx);
 80033fa:	4608      	mov	r0, r1
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80033fc:	650b      	str	r3, [r1, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmarx);
 80033fe:	f7fd fa33 	bl	8000868 <HAL_DMA_Abort_IT>
        if (hspi->hdmatx != NULL)
 8003402:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8003404:	2b00      	cmp	r3, #0
 8003406:	d039      	beq.n	800347c <HAL_SPI_IRQHandler+0x1b0>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003408:	4a35      	ldr	r2, [pc, #212]	; (80034e0 <HAL_SPI_IRQHandler+0x214>)
          HAL_DMA_Abort_IT(hspi->hdmatx);
 800340a:	4618      	mov	r0, r3
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800340c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800340e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          HAL_DMA_Abort_IT(hspi->hdmatx);
 8003412:	f7fd ba29 	b.w	8000868 <HAL_DMA_Abort_IT>
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN|SPI_CFG1_RXDMAEN))
 8003416:	689a      	ldr	r2, [r3, #8]
 8003418:	f412 4f40 	tst.w	r2, #49152	; 0xc000
 800341c:	d11e      	bne.n	800345c <HAL_SPI_IRQHandler+0x190>
        while (hspi->RxXferCount != 0)
 800341e:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 8003422:	b292      	uxth	r2, r2
 8003424:	b1d2      	cbz	r2, 800345c <HAL_SPI_IRQHandler+0x190>
 8003426:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003428:	e00e      	b.n	8003448 <HAL_SPI_IRQHandler+0x17c>
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800342a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342c:	f842 3b04 	str.w	r3, [r2], #4
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8003430:	6662      	str	r2, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 8003432:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8003436:	3b01      	subs	r3, #1
 8003438:	b29b      	uxth	r3, r3
 800343a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        while (hspi->RxXferCount != 0)
 800343e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8003442:	b29b      	uxth	r3, r3
 8003444:	b153      	cbz	r3, 800345c <HAL_SPI_IRQHandler+0x190>
 8003446:	6823      	ldr	r3, [r4, #0]
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8003448:	68e1      	ldr	r1, [r4, #12]
 800344a:	290f      	cmp	r1, #15
 800344c:	d8ed      	bhi.n	800342a <HAL_SPI_IRQHandler+0x15e>
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800344e:	2907      	cmp	r1, #7
 8003450:	d926      	bls.n	80034a0 <HAL_SPI_IRQHandler+0x1d4>
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
 8003452:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003454:	f822 3b02 	strh.w	r3, [r2], #2
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8003458:	6662      	str	r2, [r4, #100]	; 0x64
 800345a:	e7ea      	b.n	8003432 <HAL_SPI_IRQHandler+0x166>
      SPI_CloseTransfer(hspi);
 800345c:	4620      	mov	r0, r4
 800345e:	f7ff fe1f 	bl	80030a0 <SPI_CloseTransfer>
      hspi->State = HAL_SPI_STATE_READY;
 8003462:	2301      	movs	r3, #1
 8003464:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003468:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800346c:	b99b      	cbnz	r3, 8003496 <HAL_SPI_IRQHandler+0x1ca>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800346e:	2e05      	cmp	r6, #5
 8003470:	f43f af69 	beq.w	8003346 <HAL_SPI_IRQHandler+0x7a>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8003474:	2e04      	cmp	r6, #4
 8003476:	d023      	beq.n	80034c0 <HAL_SPI_IRQHandler+0x1f4>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8003478:	2e03      	cmp	r6, #3
 800347a:	d018      	beq.n	80034ae <HAL_SPI_IRQHandler+0x1e2>
 800347c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXE))
 8003480:	f005 0522 	and.w	r5, r5, #34	; 0x22
    hspi->RxISR(hspi);
 8003484:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8003486:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXE))
 8003488:	2d02      	cmp	r5, #2
 800348a:	d1f7      	bne.n	800347c <HAL_SPI_IRQHandler+0x1b0>
    hspi->TxISR(hspi);
 800348c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800348e:	4620      	mov	r0, r4
}
 8003490:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hspi->TxISR(hspi);
 8003494:	4718      	bx	r3
        HAL_SPI_ErrorCallback(hspi);
 8003496:	4620      	mov	r0, r4
 8003498:	f7ff ff16 	bl	80032c8 <HAL_SPI_ErrorCallback>
        return;
 800349c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80034a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80034a4:	7013      	strb	r3, [r2, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 80034a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80034a8:	3201      	adds	r2, #1
 80034aa:	6662      	str	r2, [r4, #100]	; 0x64
 80034ac:	e7c1      	b.n	8003432 <HAL_SPI_IRQHandler+0x166>
      HAL_SPI_TxCpltCallback(hspi);
 80034ae:	4620      	mov	r0, r4
 80034b0:	f7ff ff04 	bl	80032bc <HAL_SPI_TxCpltCallback>
 80034b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)) )   // DMA is used in normal mode
 80034b8:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80034ba:	69d2      	ldr	r2, [r2, #28]
 80034bc:	2a00      	cmp	r2, #0
 80034be:	d0aa      	beq.n	8003416 <HAL_SPI_IRQHandler+0x14a>
      HAL_SPI_RxCpltCallback(hspi);
 80034c0:	4620      	mov	r0, r4
 80034c2:	f7ff fefd 	bl	80032c0 <HAL_SPI_RxCpltCallback>
 80034c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        hspi->State = HAL_SPI_STATE_READY;
 80034ca:	2301      	movs	r3, #1
        HAL_SPI_ErrorCallback(hspi);
 80034cc:	4620      	mov	r0, r4
        hspi->State = HAL_SPI_STATE_READY;
 80034ce:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 80034d2:	f7ff fef9 	bl	80032c8 <HAL_SPI_ErrorCallback>
 80034d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034da:	bf00      	nop
 80034dc:	fffffc94 	.word	0xfffffc94
 80034e0:	080034e5 	.word	0x080034e5

080034e4 <SPI_DMAAbortOnError>:
{
 80034e4:	b508      	push	{r3, lr}
  hspi->RxXferCount = 0U;
 80034e6:	2200      	movs	r2, #0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034e8:	6b83      	ldr	r3, [r0, #56]	; 0x38
  hspi->State = HAL_SPI_STATE_READY;
 80034ea:	2101      	movs	r1, #1
  hspi->RxXferCount = 0U;
 80034ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  HAL_SPI_ErrorCallback(hspi);
 80034f0:	4618      	mov	r0, r3
  hspi->TxXferCount = 0U;
 80034f2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
 80034f6:	f883 1081 	strb.w	r1, [r3, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
 80034fa:	f7ff fee5 	bl	80032c8 <HAL_SPI_ErrorCallback>
 80034fe:	bd08      	pop	{r3, pc}

08003500 <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8003500:	680b      	ldr	r3, [r1, #0]
 8003502:	2b01      	cmp	r3, #1
{
 8003504:	b4f0      	push	{r4, r5, r6, r7}
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8003506:	d018      	beq.n	800353a <FMC_SDRAM_Init+0x3a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8003508:	6804      	ldr	r4, [r0, #0]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800350a:	4b1a      	ldr	r3, [pc, #104]	; (8003574 <FMC_SDRAM_Init+0x74>)
 800350c:	684a      	ldr	r2, [r1, #4]
 800350e:	4023      	ands	r3, r4
 8003510:	688d      	ldr	r5, [r1, #8]
 8003512:	68cc      	ldr	r4, [r1, #12]
 8003514:	431a      	orrs	r2, r3
 8003516:	690b      	ldr	r3, [r1, #16]
 8003518:	694f      	ldr	r7, [r1, #20]
 800351a:	432a      	orrs	r2, r5
 800351c:	698e      	ldr	r6, [r1, #24]
 800351e:	69cd      	ldr	r5, [r1, #28]
 8003520:	4322      	orrs	r2, r4
 8003522:	6a0c      	ldr	r4, [r1, #32]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003524:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8003526:	4313      	orrs	r3, r2
 8003528:	433b      	orrs	r3, r7
 800352a:	4333      	orrs	r3, r6
 800352c:	432b      	orrs	r3, r5
 800352e:	4323      	orrs	r3, r4
 8003530:	430b      	orrs	r3, r1
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8003532:	bcf0      	pop	{r4, r5, r6, r7}
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8003534:	6003      	str	r3, [r0, #0]
}
 8003536:	2000      	movs	r0, #0
 8003538:	4770      	bx	lr
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800353a:	6807      	ldr	r7, [r0, #0]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800353c:	4b0d      	ldr	r3, [pc, #52]	; (8003574 <FMC_SDRAM_Init+0x74>)
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800353e:	6844      	ldr	r4, [r0, #4]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8003540:	f427 47f8 	bic.w	r7, r7, #31744	; 0x7c00
 8003544:	684a      	ldr	r2, [r1, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8003546:	4023      	ands	r3, r4
 8003548:	688e      	ldr	r6, [r1, #8]
 800354a:	68cd      	ldr	r5, [r1, #12]
 800354c:	4313      	orrs	r3, r2
 800354e:	690c      	ldr	r4, [r1, #16]
 8003550:	69ca      	ldr	r2, [r1, #28]
 8003552:	4333      	orrs	r3, r6
 8003554:	6a0e      	ldr	r6, [r1, #32]
 8003556:	433a      	orrs	r2, r7
 8003558:	432b      	orrs	r3, r5
 800355a:	694d      	ldr	r5, [r1, #20]
 800355c:	4332      	orrs	r2, r6
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800355e:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 8003560:	4323      	orrs	r3, r4
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003562:	6989      	ldr	r1, [r1, #24]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8003564:	4332      	orrs	r2, r6
 8003566:	432b      	orrs	r3, r5
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8003568:	6002      	str	r2, [r0, #0]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800356a:	430b      	orrs	r3, r1
}
 800356c:	bcf0      	pop	{r4, r5, r6, r7}
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800356e:	6043      	str	r3, [r0, #4]
}
 8003570:	2000      	movs	r0, #0
 8003572:	4770      	bx	lr
 8003574:	ffff8000 	.word	0xffff8000

08003578 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8003578:	2a01      	cmp	r2, #1
{
 800357a:	b4f0      	push	{r4, r5, r6, r7}
  if (Bank != FMC_SDRAM_BANK2) 
 800357c:	d021      	beq.n	80035c2 <FMC_SDRAM_Timing_Init+0x4a>
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800357e:	684b      	ldr	r3, [r1, #4]
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8003580:	6882      	ldr	r2, [r0, #8]
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8003582:	680c      	ldr	r4, [r1, #0]
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8003584:	1e5d      	subs	r5, r3, #1
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8003586:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800358a:	688b      	ldr	r3, [r1, #8]
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800358c:	1e67      	subs	r7, r4, #1
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800358e:	68cc      	ldr	r4, [r1, #12]
 8003590:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8003594:	1e5e      	subs	r6, r3, #1
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8003596:	690d      	ldr	r5, [r1, #16]
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8003598:	1e63      	subs	r3, r4, #1
 800359a:	433a      	orrs	r2, r7
                       (((Timing->RPDelay)-1) << 20)             |\
 800359c:	694c      	ldr	r4, [r1, #20]
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800359e:	3d01      	subs	r5, #1
                       (((Timing->RCDDelay)-1) << 24));
 80035a0:	6989      	ldr	r1, [r1, #24]
 80035a2:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
                       (((Timing->RPDelay)-1) << 20)             |\
 80035a6:	3c01      	subs	r4, #1
                       (((Timing->RCDDelay)-1) << 24));
 80035a8:	3901      	subs	r1, #1
 80035aa:	ea42 3303 	orr.w	r3, r2, r3, lsl #12
 80035ae:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 80035b2:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80035b6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 80035ba:	bcf0      	pop	{r4, r5, r6, r7}
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80035bc:	6083      	str	r3, [r0, #8]
}
 80035be:	2000      	movs	r0, #0
 80035c0:	4770      	bx	lr
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80035c2:	6884      	ldr	r4, [r0, #8]
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80035c4:	684a      	ldr	r2, [r1, #4]
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80035c6:	68c3      	ldr	r3, [r0, #12]
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80035c8:	1e56      	subs	r6, r2, #1
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80035ca:	680a      	ldr	r2, [r1, #0]
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80035cc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80035d0:	688f      	ldr	r7, [r1, #8]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80035d2:	1e55      	subs	r5, r2, #1
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80035d4:	4a0e      	ldr	r2, [pc, #56]	; (8003610 <FMC_SDRAM_Timing_Init+0x98>)
 80035d6:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80035da:	3f01      	subs	r7, #1
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80035dc:	68ce      	ldr	r6, [r1, #12]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80035de:	4022      	ands	r2, r4
 80035e0:	432b      	orrs	r3, r5
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 80035e2:	690d      	ldr	r5, [r1, #16]
                        (((Timing->RPDelay)-1) << 20)); 
 80035e4:	694c      	ldr	r4, [r1, #20]
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80035e6:	3e01      	subs	r6, #1
                       (((Timing->RCDDelay)-1) << 24));   
 80035e8:	6989      	ldr	r1, [r1, #24]
 80035ea:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 80035ee:	3d01      	subs	r5, #1
 80035f0:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
                        (((Timing->RPDelay)-1) << 20)); 
 80035f4:	3c01      	subs	r4, #1
                       (((Timing->RCDDelay)-1) << 24));   
 80035f6:	3901      	subs	r1, #1
 80035f8:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80035fc:	ea42 5204 	orr.w	r2, r2, r4, lsl #20
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8003600:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8003604:	6082      	str	r2, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8003606:	60c3      	str	r3, [r0, #12]
}
 8003608:	2000      	movs	r0, #0
 800360a:	bcf0      	pop	{r4, r5, r6, r7}
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	ff0f0fff 	.word	0xff0f0fff

08003614 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8003614:	684a      	ldr	r2, [r1, #4]
 8003616:	680b      	ldr	r3, [r1, #0]
{
 8003618:	b470      	push	{r4, r5, r6}
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800361a:	4313      	orrs	r3, r2
                    (Command->CommandTarget)                |\
                    (((Command->AutoRefreshNumber)-1) << 5) |\
                    ((Command->ModeRegisterDefinition) << 9)
 800361c:	68ce      	ldr	r6, [r1, #12]
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800361e:	688a      	ldr	r2, [r1, #8]
{
 8003620:	b083      	sub	sp, #12
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8003622:	ea43 2346 	orr.w	r3, r3, r6, lsl #9
  __IO uint32_t tmpr = 0;
 8003626:	2400      	movs	r4, #0
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8003628:	3a01      	subs	r2, #1
{
 800362a:	4605      	mov	r5, r0
  __IO uint32_t tmpr = 0;
 800362c:	9401      	str	r4, [sp, #4]
    
  Device->SDCMR = tmpr;


  return HAL_OK;
}
 800362e:	4620      	mov	r0, r4
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8003630:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8003634:	9301      	str	r3, [sp, #4]
  Device->SDCMR = tmpr;
 8003636:	9b01      	ldr	r3, [sp, #4]
 8003638:	612b      	str	r3, [r5, #16]
}
 800363a:	b003      	add	sp, #12
 800363c:	bc70      	pop	{r4, r5, r6}
 800363e:	4770      	bx	lr

08003640 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device: Pointer to SDRAM device instance  
  * @param  RefreshRate: The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8003640:	4602      	mov	r2, r0
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
  
  return HAL_OK;   
}
 8003642:	2000      	movs	r0, #0
  Device->SDRTR |= (RefreshRate<<1);
 8003644:	6953      	ldr	r3, [r2, #20]
 8003646:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 800364a:	6151      	str	r1, [r2, #20]
}
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop

08003650 <SDRAM_init>:

static volatile uint32_t * SDRAM_BASE =  (volatile uint32_t *)SDRAM_BANK1_ADDR;
HAL_StatusTypeDef SDRAM_state;

uint8_t SDRAM_init(SDRAM_HandleTypeDef * hsdram)
{
 8003650:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t mode_reg = 0;
	uint32_t cntRAM;
	uint32_t Check = 0;

	cmd.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
	cmd.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8003652:	2210      	movs	r2, #16
{
 8003654:	b085      	sub	sp, #20
	cmd.AutoRefreshNumber = 8;
	cmd.ModeRegisterDefinition = FMC_SDRAM_NORMAL_MODE;
	SDRAM_state = HAL_SDRAM_SendCommand(hsdram, &cmd, SDRAM_TIMEOUT);
 8003656:	4d23      	ldr	r5, [pc, #140]	; (80036e4 <SDRAM_init+0x94>)
	cmd.AutoRefreshNumber = 8;
 8003658:	2308      	movs	r3, #8
	cmd.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 800365a:	2701      	movs	r7, #1
	cmd.ModeRegisterDefinition = FMC_SDRAM_NORMAL_MODE;
 800365c:	2400      	movs	r4, #0
	SDRAM_state = HAL_SDRAM_SendCommand(hsdram, &cmd, SDRAM_TIMEOUT);
 800365e:	4669      	mov	r1, sp
	cmd.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8003660:	9201      	str	r2, [sp, #4]
	SDRAM_state = HAL_SDRAM_SendCommand(hsdram, &cmd, SDRAM_TIMEOUT);
 8003662:	f64f 72ff 	movw	r2, #65535	; 0xffff
{
 8003666:	4606      	mov	r6, r0
	cmd.AutoRefreshNumber = 8;
 8003668:	9302      	str	r3, [sp, #8]
	cmd.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 800366a:	9700      	str	r7, [sp, #0]
	cmd.ModeRegisterDefinition = FMC_SDRAM_NORMAL_MODE;
 800366c:	9403      	str	r4, [sp, #12]
	SDRAM_state = HAL_SDRAM_SendCommand(hsdram, &cmd, SDRAM_TIMEOUT);
 800366e:	f7ff fce9 	bl	8003044 <HAL_SDRAM_SendCommand>
 8003672:	7028      	strb	r0, [r5, #0]
	HAL_Delay(1);
 8003674:	4638      	mov	r0, r7
 8003676:	f7fc fe79 	bl	800036c <HAL_Delay>

	cmd.CommandMode = FMC_SDRAM_CMD_PALL;
 800367a:	2302      	movs	r3, #2
	SDRAM_state = HAL_SDRAM_SendCommand(hsdram, &cmd, SDRAM_TIMEOUT);
 800367c:	4669      	mov	r1, sp
 800367e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003682:	4630      	mov	r0, r6
	cmd.CommandMode = FMC_SDRAM_CMD_PALL;
 8003684:	9300      	str	r3, [sp, #0]
	SDRAM_state = HAL_SDRAM_SendCommand(hsdram, &cmd, SDRAM_TIMEOUT);
 8003686:	f7ff fcdd 	bl	8003044 <HAL_SDRAM_SendCommand>

	cmd.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800368a:	2303      	movs	r3, #3
	SDRAM_state = HAL_SDRAM_SendCommand(hsdram, &cmd, SDRAM_TIMEOUT);
 800368c:	7028      	strb	r0, [r5, #0]
	SDRAM_state = HAL_SDRAM_SendCommand(hsdram, &cmd, SDRAM_TIMEOUT);
 800368e:	4669      	mov	r1, sp
 8003690:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003694:	4630      	mov	r0, r6
	cmd.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003696:	9300      	str	r3, [sp, #0]
							SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL |
							SDRAM_MODEREG_CAS_LATENCY_2 |
							SDRAM_MODEREG_OPERATING_MODE_STANDARD |
							SDRAM_MODEREG_WRITEBURST_MODE_BURST;

	cmd.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8003698:	2704      	movs	r7, #4
	SDRAM_state = HAL_SDRAM_SendCommand(hsdram, &cmd, SDRAM_TIMEOUT);
 800369a:	f7ff fcd3 	bl	8003044 <HAL_SDRAM_SendCommand>
	cmd.ModeRegisterDefinition = mode_reg;
 800369e:	2320      	movs	r3, #32
	SDRAM_state = HAL_SDRAM_SendCommand(hsdram, &cmd, SDRAM_TIMEOUT);
 80036a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
	SDRAM_state = HAL_SDRAM_SendCommand(hsdram, &cmd, SDRAM_TIMEOUT);
 80036a4:	7028      	strb	r0, [r5, #0]
	SDRAM_state = HAL_SDRAM_SendCommand(hsdram, &cmd, SDRAM_TIMEOUT);
 80036a6:	4669      	mov	r1, sp
 80036a8:	4630      	mov	r0, r6
	cmd.ModeRegisterDefinition = mode_reg;
 80036aa:	9303      	str	r3, [sp, #12]
	cmd.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 80036ac:	9700      	str	r7, [sp, #0]
	SDRAM_state = HAL_SDRAM_SendCommand(hsdram, &cmd, SDRAM_TIMEOUT);
 80036ae:	f7ff fcc9 	bl	8003044 <HAL_SDRAM_SendCommand>

	SDRAM_state = HAL_SDRAM_ProgramRefreshRate(hsdram, 6);
 80036b2:	2106      	movs	r1, #6
	SDRAM_state = HAL_SDRAM_SendCommand(hsdram, &cmd, SDRAM_TIMEOUT);
 80036b4:	7028      	strb	r0, [r5, #0]
	SDRAM_state = HAL_SDRAM_ProgramRefreshRate(hsdram, 6);
 80036b6:	4630      	mov	r0, r6
 80036b8:	f7ff fcde 	bl	8003078 <HAL_SDRAM_ProgramRefreshRate>
 80036bc:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 80036c0:	7028      	strb	r0, [r5, #0]
	for (cntRAM = 0; cntRAM < 0x800000; cntRAM++)
	{
		SDRAM_BASE[cntRAM] = cntRAM;
 80036c2:	f842 4b04 	str.w	r4, [r2], #4
	for (cntRAM = 0; cntRAM < 0x800000; cntRAM++)
 80036c6:	3401      	adds	r4, #1
 80036c8:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 80036cc:	d1f9      	bne.n	80036c2 <SDRAM_init+0x72>
	}
	Check = SDRAM_BASE[0x7FFFFF];
 80036ce:	4b06      	ldr	r3, [pc, #24]	; (80036e8 <SDRAM_init+0x98>)
	HAL_Delay(1);
 80036d0:	2001      	movs	r0, #1
	Check = SDRAM_BASE[0x7FFFFF];
 80036d2:	f04f 4440 	mov.w	r4, #3221225472	; 0xc0000000
 80036d6:	681d      	ldr	r5, [r3, #0]
	HAL_Delay(1);
 80036d8:	f7fc fe48 	bl	800036c <HAL_Delay>
	SDRAM_BASE[0] = Check;
	return 1;
}
 80036dc:	2001      	movs	r0, #1
	SDRAM_BASE[0] = Check;
 80036de:	6025      	str	r5, [r4, #0]
}
 80036e0:	b005      	add	sp, #20
 80036e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036e4:	20000034 	.word	0x20000034
 80036e8:	c1fffffc 	.word	0xc1fffffc

080036ec <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Supply configuration update enable 
    */
  MODIFY_REG(PWR->CR3, PWR_CR3_SCUEN, 0);
 80036ec:	4b3c      	ldr	r3, [pc, #240]	; (80037e0 <SystemClock_Config+0xf4>)

    /**Configure the main internal regulator output voltage 
    */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80036ee:	2100      	movs	r1, #0
  MODIFY_REG(PWR->CR3, PWR_CR3_SCUEN, 0);
 80036f0:	68da      	ldr	r2, [r3, #12]

  while ((PWR->D3CR & (PWR_D3CR_VOSRDY)) != PWR_D3CR_VOSRDY) 
 80036f2:	4618      	mov	r0, r3
{
 80036f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  MODIFY_REG(PWR->CR3, PWR_CR3_SCUEN, 0);
 80036f6:	f022 0204 	bic.w	r2, r2, #4
{
 80036fa:	b0cd      	sub	sp, #308	; 0x134
  MODIFY_REG(PWR->CR3, PWR_CR3_SCUEN, 0);
 80036fc:	60da      	str	r2, [r3, #12]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80036fe:	9101      	str	r1, [sp, #4]
 8003700:	699a      	ldr	r2, [r3, #24]
 8003702:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003706:	619a      	str	r2, [r3, #24]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800370e:	9301      	str	r3, [sp, #4]
 8003710:	9b01      	ldr	r3, [sp, #4]
  while ((PWR->D3CR & (PWR_D3CR_VOSRDY)) != PWR_D3CR_VOSRDY) 
 8003712:	6983      	ldr	r3, [r0, #24]
 8003714:	049b      	lsls	r3, r3, #18
 8003716:	d5fc      	bpl.n	8003712 <SystemClock_Config+0x26>
  {
    
  }
    /**Macro to configure the PLL clock source 
    */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8003718:	4832      	ldr	r0, [pc, #200]	; (80037e4 <SystemClock_Config+0xf8>)

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800371a:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800371c:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLN = 50;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800371e:	2200      	movs	r2, #0
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8003720:	6a83      	ldr	r3, [r0, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003722:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLN = 50;
 8003726:	2732      	movs	r7, #50	; 0x32
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8003728:	250c      	movs	r5, #12
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800372a:	f023 0303 	bic.w	r3, r3, #3
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800372e:	2604      	movs	r6, #4
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8003730:	4323      	orrs	r3, r4
 8003732:	6283      	str	r3, [r0, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003734:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003736:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 50;
 800373a:	9716      	str	r7, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800373c:	951a      	str	r5, [sp, #104]	; 0x68
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800373e:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003740:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003742:	9413      	str	r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003744:	9414      	str	r4, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 8003746:	9417      	str	r4, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003748:	9419      	str	r4, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800374a:	9618      	str	r6, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800374c:	921b      	str	r2, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800374e:	921c      	str	r2, [sp, #112]	; 0x70
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003750:	f7fd fc38 	bl	8000fc4 <HAL_RCC_OscConfig>
 8003754:	b100      	cbz	r0, 8003758 <SystemClock_Config+0x6c>
 8003756:	e7fe      	b.n	8003756 <SystemClock_Config+0x6a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003758:	213f      	movs	r1, #63	; 0x3f
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800375a:	2708      	movs	r7, #8
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800375c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8003760:	2540      	movs	r5, #64	; 0x40
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003762:	2203      	movs	r2, #3
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003764:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003766:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003768:	eb0d 0007 	add.w	r0, sp, r7
 800376c:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800376e:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003770:	9203      	str	r2, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8003772:	9705      	str	r7, [sp, #20]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8003774:	9506      	str	r5, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003776:	9507      	str	r5, [sp, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8003778:	9509      	str	r5, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800377a:	f7fd ff45 	bl	8001608 <HAL_RCC_ClockConfig>
 800377e:	4603      	mov	r3, r0
 8003780:	b100      	cbz	r0, 8003784 <SystemClock_Config+0x98>
 8003782:	e7fe      	b.n	8003782 <SystemClock_Config+0x96>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5|RCC_PERIPHCLK_SAI2
 8003784:	f8df e068 	ldr.w	lr, [pc, #104]	; 80037f0 <SystemClock_Config+0x104>
                              |RCC_PERIPHCLK_LPTIM5|RCC_PERIPHCLK_LPTIM3
                              |RCC_PERIPHCLK_FMC;
  PeriphClkInitStruct.PLL2.PLL2M = 8;
  PeriphClkInitStruct.PLL2.PLL2N = 393;
 8003788:	f240 1189 	movw	r1, #393	; 0x189
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
  PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL2;
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_HSE;
 800378c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
  PeriphClkInitStruct.Lptim345ClockSelection = RCC_LPTIM345CLKSOURCE_D3PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003790:	a81d      	add	r0, sp, #116	; 0x74
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8003792:	9420      	str	r4, [sp, #128]	; 0x80
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8003794:	9421      	str	r4, [sp, #132]	; 0x84
  PeriphClkInitStruct.PLL2.PLL2M = 8;
 8003796:	971e      	str	r7, [sp, #120]	; 0x78
  PeriphClkInitStruct.PLL2.PLL2R = 8;
 8003798:	9722      	str	r7, [sp, #136]	; 0x88
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 800379a:	9523      	str	r5, [sp, #140]	; 0x8c
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800379c:	9324      	str	r3, [sp, #144]	; 0x90
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800379e:	9325      	str	r3, [sp, #148]	; 0x94
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 80037a0:	932e      	str	r3, [sp, #184]	; 0xb8
  PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL2;
 80037a2:	9533      	str	r5, [sp, #204]	; 0xcc
  PeriphClkInitStruct.Lptim345ClockSelection = RCC_LPTIM345CLKSOURCE_D3PCLK1;
 80037a4:	9344      	str	r3, [sp, #272]	; 0x110
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5|RCC_PERIPHCLK_SAI2
 80037a6:	f8cd e074 	str.w	lr, [sp, #116]	; 0x74
  PeriphClkInitStruct.PLL2.PLL2N = 393;
 80037aa:	911f      	str	r1, [sp, #124]	; 0x7c
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_HSE;
 80037ac:	9235      	str	r2, [sp, #212]	; 0xd4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80037ae:	f7fe f8bf 	bl	8001930 <HAL_RCCEx_PeriphCLKConfig>
 80037b2:	4604      	mov	r4, r0
 80037b4:	b100      	cbz	r0, 80037b8 <SystemClock_Config+0xcc>
 80037b6:	e7fe      	b.n	80037b6 <SystemClock_Config+0xca>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 80037b8:	4a0b      	ldr	r2, [pc, #44]	; (80037e8 <SystemClock_Config+0xfc>)
 80037ba:	4b0c      	ldr	r3, [pc, #48]	; (80037ec <SystemClock_Config+0x100>)
 80037bc:	6810      	ldr	r0, [r2, #0]
 80037be:	fba3 3000 	umull	r3, r0, r3, r0
 80037c2:	0980      	lsrs	r0, r0, #6
 80037c4:	f7fc fe40 	bl	8000448 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80037c8:	4630      	mov	r0, r6
 80037ca:	f7fc fe55 	bl	8000478 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80037ce:	4622      	mov	r2, r4
 80037d0:	4621      	mov	r1, r4
 80037d2:	f04f 30ff 	mov.w	r0, #4294967295
 80037d6:	f7fc fdef 	bl	80003b8 <HAL_NVIC_SetPriority>
}
 80037da:	b04d      	add	sp, #308	; 0x134
 80037dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037de:	bf00      	nop
 80037e0:	58024800 	.word	0x58024800
 80037e4:	58024400 	.word	0x58024400
 80037e8:	20000008 	.word	0x20000008
 80037ec:	10624dd3 	.word	0x10624dd3
 80037f0:	01002280 	.word	0x01002280

080037f4 <main>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80037f4:	4cae      	ldr	r4, [pc, #696]	; (8003ab0 <main+0x2bc>)
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FMC_NBL0_GPIO_Port, FMC_NBL0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : SPI5_NSS_Pin */
  GPIO_InitStruct.Pin = SPI5_NSS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037f6:	2501      	movs	r5, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pin : BLUE_Pin */
  GPIO_InitStruct.Pin = BLUE_Pin;
 80037f8:	f44f 7800 	mov.w	r8, #512	; 0x200
{
 80037fc:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8003800:	b091      	sub	sp, #68	; 0x44
  hdma_memtomem_bdma_channel0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8003802:	2780      	movs	r7, #128	; 0x80
  HAL_Init();
 8003804:	f7fc fd8c 	bl	8000320 <HAL_Init>
  hdma_memtomem_bdma_channel0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003808:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
  SystemClock_Config();
 800380c:	f7ff ff6e 	bl	80036ec <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003810:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  HAL_GPIO_WritePin(SPI5_NSS_GPIO_Port, SPI5_NSS_Pin, GPIO_PIN_RESET);
 8003814:	2140      	movs	r1, #64	; 0x40
 8003816:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003818:	f043 0304 	orr.w	r3, r3, #4
  HAL_GPIO_WritePin(SPI5_NSS_GPIO_Port, SPI5_NSS_Pin, GPIO_PIN_RESET);
 800381c:	48a5      	ldr	r0, [pc, #660]	; (8003ab4 <main+0x2c0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800381e:	4616      	mov	r6, r2
  GPIO_InitStruct.Pin = SPI5_NSS_Pin;
 8003820:	4689      	mov	r9, r1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003822:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8003826:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800382a:	f003 0304 	and.w	r3, r3, #4
 800382e:	9302      	str	r3, [sp, #8]
 8003830:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003832:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8003836:	f043 0320 	orr.w	r3, r3, #32
 800383a:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800383e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8003842:	f003 0320 	and.w	r3, r3, #32
 8003846:	9303      	str	r3, [sp, #12]
 8003848:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800384a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800384e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003852:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8003856:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800385a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800385e:	9304      	str	r3, [sp, #16]
 8003860:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003862:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8003866:	432b      	orrs	r3, r5
 8003868:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800386c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8003870:	402b      	ands	r3, r5
 8003872:	9305      	str	r3, [sp, #20]
 8003874:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003876:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800387a:	430b      	orrs	r3, r1
 800387c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8003880:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8003884:	400b      	ands	r3, r1
 8003886:	9306      	str	r3, [sp, #24]
 8003888:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800388a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800388e:	f043 0310 	orr.w	r3, r3, #16
 8003892:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8003896:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800389a:	f003 0310 	and.w	r3, r3, #16
 800389e:	9307      	str	r3, [sp, #28]
 80038a0:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80038a2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80038a6:	f043 0308 	orr.w	r3, r3, #8
 80038aa:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80038ae:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80038b2:	f003 0308 	and.w	r3, r3, #8
 80038b6:	9308      	str	r3, [sp, #32]
 80038b8:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(SPI5_NSS_GPIO_Port, SPI5_NSS_Pin, GPIO_PIN_RESET);
 80038ba:	f7fd faa9 	bl	8000e10 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, PAD2_Pin|ANA_EN_Pin, GPIO_PIN_RESET);
 80038be:	4632      	mov	r2, r6
 80038c0:	f240 4101 	movw	r1, #1025	; 0x401
 80038c4:	487c      	ldr	r0, [pc, #496]	; (8003ab8 <main+0x2c4>)
 80038c6:	f7fd faa3 	bl	8000e10 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, CODEC_NRST_Pin|RED_Pin|GREEN_Pin, GPIO_PIN_RESET);
 80038ca:	4632      	mov	r2, r6
 80038cc:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 80038d0:	487a      	ldr	r0, [pc, #488]	; (8003abc <main+0x2c8>)
 80038d2:	f7fd fa9d 	bl	8000e10 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin, GPIO_PIN_RESET);
 80038d6:	4632      	mov	r2, r6
 80038d8:	4641      	mov	r1, r8
 80038da:	4879      	ldr	r0, [pc, #484]	; (8003ac0 <main+0x2cc>)
 80038dc:	f7fd fa98 	bl	8000e10 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FMC_NBL0_GPIO_Port, FMC_NBL0_Pin, GPIO_PIN_RESET);
 80038e0:	4632      	mov	r2, r6
 80038e2:	4629      	mov	r1, r5
 80038e4:	4877      	ldr	r0, [pc, #476]	; (8003ac4 <main+0x2d0>)
 80038e6:	f7fd fa93 	bl	8000e10 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(SPI5_NSS_GPIO_Port, &GPIO_InitStruct);
 80038ea:	a909      	add	r1, sp, #36	; 0x24
 80038ec:	4871      	ldr	r0, [pc, #452]	; (8003ab4 <main+0x2c0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ee:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038f0:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = SPI5_NSS_Pin;
 80038f2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038f6:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(SPI5_NSS_GPIO_Port, &GPIO_InitStruct);
 80038f8:	f7fd f95c 	bl	8000bb4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PAD2_Pin|ANA_EN_Pin;
 80038fc:	f240 4301 	movw	r3, #1025	; 0x401
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003900:	a909      	add	r1, sp, #36	; 0x24
 8003902:	486d      	ldr	r0, [pc, #436]	; (8003ab8 <main+0x2c4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003904:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003906:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = PAD2_Pin|ANA_EN_Pin;
 8003908:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800390a:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800390c:	f7fd f952 	bl	8000bb4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CODEC_NRST_Pin|RED_Pin|GREEN_Pin;
 8003910:	f44f 7330 	mov.w	r3, #704	; 0x2c0
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003914:	a909      	add	r1, sp, #36	; 0x24
 8003916:	4869      	ldr	r0, [pc, #420]	; (8003abc <main+0x2c8>)
  GPIO_InitStruct.Pin = CODEC_NRST_Pin|RED_Pin|GREEN_Pin;
 8003918:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800391a:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800391c:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800391e:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003920:	f7fd f948 	bl	8000bb4 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(BLUE_GPIO_Port, &GPIO_InitStruct);
 8003924:	a909      	add	r1, sp, #36	; 0x24
 8003926:	4866      	ldr	r0, [pc, #408]	; (8003ac0 <main+0x2cc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003928:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800392a:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800392c:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = BLUE_Pin;
 800392e:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  HAL_GPIO_Init(BLUE_GPIO_Port, &GPIO_InitStruct);
 8003932:	f7fd f93f 	bl	8000bb4 <HAL_GPIO_Init>
  /*Configure GPIO pin : FMC_NBL0_Pin */
  GPIO_InitStruct.Pin = FMC_NBL0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(FMC_NBL0_GPIO_Port, &GPIO_InitStruct);
 8003936:	a909      	add	r1, sp, #36	; 0x24
 8003938:	4862      	ldr	r0, [pc, #392]	; (8003ac4 <main+0x2d0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800393a:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800393c:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = FMC_NBL0_Pin;
 800393e:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003940:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(FMC_NBL0_GPIO_Port, &GPIO_InitStruct);
 8003942:	f7fd f937 	bl	8000bb4 <HAL_GPIO_Init>
  __HAL_RCC_BDMA_CLK_ENABLE();
 8003946:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
  hdma_memtomem_bdma_channel0.Init.MemInc = DMA_MINC_ENABLE;
 800394a:	f44f 6180 	mov.w	r1, #1024	; 0x400
  hdma_memtomem_bdma_channel0.Instance = BDMA_Channel0;
 800394e:	4b5e      	ldr	r3, [pc, #376]	; (8003ac8 <main+0x2d4>)
  __HAL_RCC_BDMA_CLK_ENABLE();
 8003950:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  if (HAL_DMA_Init(&hdma_memtomem_bdma_channel0) != HAL_OK)
 8003954:	4618      	mov	r0, r3
  __HAL_RCC_BDMA_CLK_ENABLE();
 8003956:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
 800395a:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
  hdma_memtomem_bdma_channel0.Init.Request = BDMA_REQUEST_MEM2MEM;
 800395e:	605e      	str	r6, [r3, #4]
  __HAL_RCC_BDMA_CLK_ENABLE();
 8003960:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
  hdma_memtomem_bdma_channel0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003964:	619e      	str	r6, [r3, #24]
  hdma_memtomem_bdma_channel0.Init.Mode = DMA_NORMAL;
 8003966:	61de      	str	r6, [r3, #28]
  __HAL_RCC_BDMA_CLK_ENABLE();
 8003968:	9201      	str	r2, [sp, #4]
  hdma_memtomem_bdma_channel0.Instance = BDMA_Channel0;
 800396a:	4a58      	ldr	r2, [pc, #352]	; (8003acc <main+0x2d8>)
  hdma_memtomem_bdma_channel0.Init.Priority = DMA_PRIORITY_LOW;
 800396c:	621e      	str	r6, [r3, #32]
  hdma_memtomem_bdma_channel0.Init.PeriphInc = DMA_PINC_ENABLE;
 800396e:	f8c3 800c 	str.w	r8, [r3, #12]
  __HAL_RCC_BDMA_CLK_ENABLE();
 8003972:	9e01      	ldr	r6, [sp, #4]
  hdma_memtomem_bdma_channel0.Instance = BDMA_Channel0;
 8003974:	601a      	str	r2, [r3, #0]
  hdma_memtomem_bdma_channel0.Init.MemInc = DMA_MINC_ENABLE;
 8003976:	6119      	str	r1, [r3, #16]
  hdma_memtomem_bdma_channel0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8003978:	609f      	str	r7, [r3, #8]
  hdma_memtomem_bdma_channel0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800397a:	f8c3 b014 	str.w	fp, [r3, #20]
  if (HAL_DMA_Init(&hdma_memtomem_bdma_channel0) != HAL_OK)
 800397e:	f7fc fdcf 	bl	8000520 <HAL_DMA_Init>
 8003982:	b100      	cbz	r0, 8003986 <main+0x192>
 8003984:	e7fe      	b.n	8003984 <main+0x190>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003986:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
 800398a:	4602      	mov	r2, r0
  hdma_memtomem_dma1_stream2.Instance = DMA1_Stream2;
 800398c:	4b50      	ldr	r3, [pc, #320]	; (8003ad0 <main+0x2dc>)
  hdma_memtomem_dma1_stream2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800398e:	f44f 3640 	mov.w	r6, #196608	; 0x30000
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003992:	f041 0101 	orr.w	r1, r1, #1
  hdma_memtomem_dma1_stream2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003996:	f04f 0a04 	mov.w	sl, #4
  __HAL_RCC_DMA1_CLK_ENABLE();
 800399a:	f8c4 10d8 	str.w	r1, [r4, #216]	; 0xd8
 800399e:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
  hdma_memtomem_dma1_stream2.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80039a2:	609f      	str	r7, [r3, #8]
  hdma_memtomem_dma1_stream2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80039a4:	2703      	movs	r7, #3
  __HAL_RCC_DMA1_CLK_ENABLE();
 80039a6:	f001 0101 	and.w	r1, r1, #1
  hdma_memtomem_dma1_stream2.Init.MemInc = DMA_MINC_DISABLE;
 80039aa:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_stream2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039ac:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_stream2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039ae:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_stream2.Init.Mode = DMA_NORMAL;
 80039b0:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_stream2.Init.MemBurst = DMA_MBURST_SINGLE;
 80039b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma1_stream2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80039b4:	631a      	str	r2, [r3, #48]	; 0x30
  hdma_memtomem_dma1_stream2.Instance = DMA1_Stream2;
 80039b6:	4a47      	ldr	r2, [pc, #284]	; (8003ad4 <main+0x2e0>)
  hdma_memtomem_dma1_stream2.Init.Request = DMA_REQUEST_MEM2MEM;
 80039b8:	6058      	str	r0, [r3, #4]
  hdma_memtomem_dma1_stream2.Init.PeriphInc = DMA_PINC_DISABLE;
 80039ba:	60d8      	str	r0, [r3, #12]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_stream2) != HAL_OK)
 80039bc:	4618      	mov	r0, r3
  __HAL_RCC_DMA1_CLK_ENABLE();
 80039be:	9100      	str	r1, [sp, #0]
  hdma_memtomem_dma1_stream2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80039c0:	621e      	str	r6, [r3, #32]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80039c2:	9900      	ldr	r1, [sp, #0]
  hdma_memtomem_dma1_stream2.Instance = DMA1_Stream2;
 80039c4:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_stream2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80039c6:	f8c3 a024 	str.w	sl, [r3, #36]	; 0x24
  hdma_memtomem_dma1_stream2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80039ca:	629f      	str	r7, [r3, #40]	; 0x28
  if (HAL_DMA_Init(&hdma_memtomem_dma1_stream2) != HAL_OK)
 80039cc:	f7fc fda8 	bl	8000520 <HAL_DMA_Init>
 80039d0:	4606      	mov	r6, r0
 80039d2:	b100      	cbz	r0, 80039d6 <main+0x1e2>
 80039d4:	e7fe      	b.n	80039d4 <main+0x1e0>
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80039d6:	4602      	mov	r2, r0
 80039d8:	4601      	mov	r1, r0
 80039da:	200b      	movs	r0, #11
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80039dc:	4c3e      	ldr	r4, [pc, #248]	; (8003ad8 <main+0x2e4>)
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80039de:	f7fc fceb 	bl	80003b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80039e2:	200b      	movs	r0, #11
 80039e4:	f7fc fd22 	bl	800042c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80039e8:	4632      	mov	r2, r6
 80039ea:	4631      	mov	r1, r6
 80039ec:	200c      	movs	r0, #12
 80039ee:	f7fc fce3 	bl	80003b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80039f2:	200c      	movs	r0, #12
 80039f4:	f7fc fd1a 	bl	800042c <HAL_NVIC_EnableIRQ>
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80039f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80039fc:	4837      	ldr	r0, [pc, #220]	; (8003adc <main+0x2e8>)
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_10;
 80039fe:	f04f 0802 	mov.w	r8, #2
  SdramTiming.WriteRecoveryTime = 3;
 8003a02:	970d      	str	r7, [sp, #52]	; 0x34
  SdramTiming.SelfRefreshTime = 5;
 8003a04:	f04f 0c05 	mov.w	ip, #5
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003a08:	f8c4 9014 	str.w	r9, [r4, #20]
  SdramTiming.RowCycleDelay = 6;
 8003a0c:	2306      	movs	r3, #6
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8003a0e:	6222      	str	r2, [r4, #32]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8003a10:	f44f 7780 	mov.w	r7, #256	; 0x100
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8003a14:	2208      	movs	r2, #8
  SdramTiming.ExitSelfRefreshDelay = 7;
 8003a16:	f04f 0907 	mov.w	r9, #7
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8003a1a:	a909      	add	r1, sp, #36	; 0x24
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8003a1c:	6020      	str	r0, [r4, #0]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8003a1e:	4620      	mov	r0, r4
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8003a20:	6066      	str	r6, [r4, #4]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_8;
 8003a22:	6126      	str	r6, [r4, #16]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003a24:	61e6      	str	r6, [r4, #28]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8003a26:	f8c4 b024 	str.w	fp, [r4, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8003a2a:	62a6      	str	r6, [r4, #40]	; 0x28
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_10;
 8003a2c:	f8c4 8008 	str.w	r8, [r4, #8]
  SdramTiming.LoadToActiveDelay = 2;
 8003a30:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  SdramTiming.RPDelay = 2;
 8003a34:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
  SdramTiming.RCDDelay = 2;
 8003a38:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8003a3c:	60e2      	str	r2, [r4, #12]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8003a3e:	61a7      	str	r7, [r4, #24]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8003a40:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  SdramTiming.SelfRefreshTime = 5;
 8003a44:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  SdramTiming.RowCycleDelay = 6;
 8003a48:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8003a4a:	f7ff fac1 	bl	8002fd0 <HAL_SDRAM_Init>
 8003a4e:	4601      	mov	r1, r0
 8003a50:	b100      	cbz	r0, 8003a54 <main+0x260>
 8003a52:	e7fe      	b.n	8003a52 <main+0x25e>
  hsai_BlockA2.Instance = SAI2_Block_A;
 8003a54:	4b22      	ldr	r3, [pc, #136]	; (8003ae0 <main+0x2ec>)
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_32;
 8003a56:	26e0      	movs	r6, #224	; 0xe0
  hsai_BlockA2.Instance = SAI2_Block_A;
 8003a58:	4a22      	ldr	r2, [pc, #136]	; (8003ae4 <main+0x2f0>)
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8003a5a:	f44f 3b00 	mov.w	fp, #131072	; 0x20000
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8003a5e:	6299      	str	r1, [r3, #40]	; 0x28
  hsai_BlockA2.Instance = SAI2_Block_A;
 8003a60:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 8003a62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8003a66:	62d9      	str	r1, [r3, #44]	; 0x2c
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 8003a68:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_96K;
 8003a6a:	4a1f      	ldr	r2, [pc, #124]	; (8003ae8 <main+0x2f4>)
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 8003a6c:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 0;
 8003a70:	6399      	str	r1, [r3, #56]	; 0x38
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8003a72:	6599      	str	r1, [r3, #88]	; 0x58
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8003a74:	6619      	str	r1, [r3, #96]	; 0x60
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8003a76:	6659      	str	r1, [r3, #100]	; 0x64
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8003a78:	6699      	str	r1, [r3, #104]	; 0x68
  hsai_BlockA2.SlotInit.SlotNumber = 8;
 8003a7a:	2108      	movs	r1, #8
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_96K;
 8003a7c:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.SlotInit.SlotActive = 0x000000FF;
 8003a7e:	22ff      	movs	r2, #255	; 0xff
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8003a80:	6418      	str	r0, [r3, #64]	; 0x40
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8003a82:	6498      	str	r0, [r3, #72]	; 0x48
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8003a84:	64d8      	str	r0, [r3, #76]	; 0x4c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8003a86:	6098      	str	r0, [r3, #8]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8003a88:	6158      	str	r0, [r3, #20]
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8003a8a:	4618      	mov	r0, r3
  hsai_BlockA2.SlotInit.SlotActive = 0x000000FF;
 8003a8c:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_RX;
 8003a8e:	605d      	str	r5, [r3, #4]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_FULL;
 8003a90:	f8c3 a018 	str.w	sl, [r3, #24]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_OUTBLOCKB_ENABLE;
 8003a94:	f8c3 800c 	str.w	r8, [r3, #12]
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8003a98:	63df      	str	r7, [r3, #60]	; 0x3c
  hsai_BlockA2.FrameInit.FrameLength = 256;
 8003a9a:	651f      	str	r7, [r3, #80]	; 0x50
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8003a9c:	655d      	str	r5, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotNumber = 8;
 8003a9e:	66d9      	str	r1, [r3, #108]	; 0x6c
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_32;
 8003aa0:	645e      	str	r6, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8003aa2:	f8c3 b05c 	str.w	fp, [r3, #92]	; 0x5c
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8003aa6:	f7fe ffab 	bl	8002a00 <HAL_SAI_Init>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	b1f0      	cbz	r0, 8003aec <main+0x2f8>
 8003aae:	e7fe      	b.n	8003aae <main+0x2ba>
 8003ab0:	58024400 	.word	0x58024400
 8003ab4:	58021400 	.word	0x58021400
 8003ab8:	58020000 	.word	0x58020000
 8003abc:	58020c00 	.word	0x58020c00
 8003ac0:	58021800 	.word	0x58021800
 8003ac4:	58021000 	.word	0x58021000
 8003ac8:	200003f4 	.word	0x200003f4
 8003acc:	58025408 	.word	0x58025408
 8003ad0:	20000348 	.word	0x20000348
 8003ad4:	40020040 	.word	0x40020040
 8003ad8:	200003c0 	.word	0x200003c0
 8003adc:	52004140 	.word	0x52004140
 8003ae0:	200001cc 	.word	0x200001cc
 8003ae4:	40015c04 	.word	0x40015c04
 8003ae8:	00017700 	.word	0x00017700
  hsai_BlockB2.Instance = SAI2_Block_B;
 8003aec:	4b3d      	ldr	r3, [pc, #244]	; (8003be4 <main+0x3f0>)
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 8003aee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  hsai_BlockB2.Instance = SAI2_Block_B;
 8003af2:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8003c00 <main+0x40c>
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_TX;
 8003af6:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8003af8:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 8003afa:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8003afc:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8003afe:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8003b00:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8003b02:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8003b04:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.PdmInit.Activation = DISABLE;
 8003b06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.PdmInit.MicPairsNbr = 0;
 8003b0a:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8003b0c:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8003b0e:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8003b10:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8003b12:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB2.SlotInit.SlotNumber = 8;
 8003b14:	2208      	movs	r2, #8
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 8003b16:	6119      	str	r1, [r3, #16]
  hsai_BlockB2.SlotInit.SlotNumber = 8;
 8003b18:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB2.SlotInit.SlotActive = 0x000000FF;
 8003b1a:	22ff      	movs	r2, #255	; 0xff
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_96K;
 8003b1c:	4932      	ldr	r1, [pc, #200]	; (8003be8 <main+0x3f4>)
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8003b1e:	6418      	str	r0, [r3, #64]	; 0x40
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8003b20:	4618      	mov	r0, r3
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_32;
 8003b22:	645e      	str	r6, [r3, #68]	; 0x44
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8003b24:	64dd      	str	r5, [r3, #76]	; 0x4c
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_FULL;
 8003b26:	f8c3 a018 	str.w	sl, [r3, #24]
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_96K;
 8003b2a:	61d9      	str	r1, [r3, #28]
  hsai_BlockB2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8003b2c:	63df      	str	r7, [r3, #60]	; 0x3c
  hsai_BlockB2.FrameInit.FrameLength = 256;
 8003b2e:	651f      	str	r7, [r3, #80]	; 0x50
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8003b30:	655d      	str	r5, [r3, #84]	; 0x54
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8003b32:	f8c3 b05c 	str.w	fp, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x000000FF;
 8003b36:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockB2.Instance = SAI2_Block_B;
 8003b38:	f8c3 8000 	str.w	r8, [r3]
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8003b3c:	f7fe ff60 	bl	8002a00 <HAL_SAI_Init>
 8003b40:	b100      	cbz	r0, 8003b44 <main+0x350>
 8003b42:	e7fe      	b.n	8003b42 <main+0x34e>
  hspi5.Instance = SPI5;
 8003b44:	4b29      	ldr	r3, [pc, #164]	; (8003bec <main+0x3f8>)
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003b46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8003b4a:	f44f 0e80 	mov.w	lr, #4194304	; 0x400000
  hspi5.Instance = SPI5;
 8003b4e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8003c04 <main+0x410>
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003b52:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  hspi5.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003b56:	f04f 7780 	mov.w	r7, #16777216	; 0x1000000
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8003b5a:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8003b5e:	6098      	str	r0, [r3, #8]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b60:	6118      	str	r0, [r3, #16]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003b62:	6218      	str	r0, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8003b64:	6258      	str	r0, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b66:	6298      	str	r0, [r3, #40]	; 0x28
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003b68:	6398      	str	r0, [r3, #56]	; 0x38
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003b6a:	6418      	str	r0, [r3, #64]	; 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003b6c:	6458      	str	r0, [r3, #68]	; 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003b6e:	6498      	str	r0, [r3, #72]	; 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003b70:	64d8      	str	r0, [r3, #76]	; 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003b72:	6518      	str	r0, [r3, #80]	; 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003b74:	6558      	str	r0, [r3, #84]	; 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003b76:	6598      	str	r0, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8003b78:	4618      	mov	r0, r3
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003b7a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8003b7c:	f8c3 900c 	str.w	r9, [r3, #12]
  hspi5.Init.CRCPolynomial = 7;
 8003b80:	f8c3 902c 	str.w	r9, [r3, #44]	; 0x2c
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_08DATA;
 8003b84:	63de      	str	r6, [r3, #60]	; 0x3c
  hspi5.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003b86:	615f      	str	r7, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8003b88:	619d      	str	r5, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003b8a:	61d9      	str	r1, [r3, #28]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8003b8c:	e883 5000 	stmia.w	r3, {ip, lr}
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8003b90:	f7ff fae2 	bl	8003158 <HAL_SPI_Init>
 8003b94:	4602      	mov	r2, r0
 8003b96:	b100      	cbz	r0, 8003b9a <main+0x3a6>
 8003b98:	e7fe      	b.n	8003b98 <main+0x3a4>
  hlptim5.Instance = LPTIM5;
 8003b9a:	4b15      	ldr	r3, [pc, #84]	; (8003bf0 <main+0x3fc>)
  hlptim5.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8003b9c:	f64f 75ff 	movw	r5, #65535	; 0xffff
  hlptim5.Instance = LPTIM5;
 8003ba0:	4914      	ldr	r1, [pc, #80]	; (8003bf4 <main+0x400>)
  if (HAL_LPTIM_Init(&hlptim5) != HAL_OK)
 8003ba2:	4618      	mov	r0, r3
  hlptim5.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8003ba4:	605a      	str	r2, [r3, #4]
  hlptim5.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8003ba6:	609a      	str	r2, [r3, #8]
  hlptim5.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8003ba8:	621a      	str	r2, [r3, #32]
  hlptim5.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8003baa:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim5.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8003bac:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim5.Instance = LPTIM5;
 8003bae:	6019      	str	r1, [r3, #0]
  hlptim5.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8003bb0:	615d      	str	r5, [r3, #20]
  if (HAL_LPTIM_Init(&hlptim5) != HAL_OK)
 8003bb2:	f7fd f933 	bl	8000e1c <HAL_LPTIM_Init>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	b100      	cbz	r0, 8003bbc <main+0x3c8>
 8003bba:	e7fe      	b.n	8003bba <main+0x3c6>
  hlptim3.Instance = LPTIM3;
 8003bbc:	4b0e      	ldr	r3, [pc, #56]	; (8003bf8 <main+0x404>)
 8003bbe:	490f      	ldr	r1, [pc, #60]	; (8003bfc <main+0x408>)
  if (HAL_LPTIM_Init(&hlptim3) != HAL_OK)
 8003bc0:	4618      	mov	r0, r3
  hlptim3.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8003bc2:	605a      	str	r2, [r3, #4]
  hlptim3.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8003bc4:	609a      	str	r2, [r3, #8]
  hlptim3.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8003bc6:	615d      	str	r5, [r3, #20]
  hlptim3.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8003bc8:	621a      	str	r2, [r3, #32]
  hlptim3.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8003bca:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim3.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8003bcc:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim3.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8003bce:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim3.Instance = LPTIM3;
 8003bd0:	6019      	str	r1, [r3, #0]
  if (HAL_LPTIM_Init(&hlptim3) != HAL_OK)
 8003bd2:	f7fd f923 	bl	8000e1c <HAL_LPTIM_Init>
 8003bd6:	b100      	cbz	r0, 8003bda <main+0x3e6>
 8003bd8:	e7fe      	b.n	8003bd8 <main+0x3e4>
  SDRAM_init(&hsdram1);
 8003bda:	4620      	mov	r0, r4
 8003bdc:	f7ff fd38 	bl	8003650 <SDRAM_init>
 8003be0:	e7fe      	b.n	8003be0 <main+0x3ec>
 8003be2:	bf00      	nop
 8003be4:	20000038 	.word	0x20000038
 8003be8:	00017700 	.word	0x00017700
 8003bec:	20000144 	.word	0x20000144
 8003bf0:	20000298 	.word	0x20000298
 8003bf4:	58003000 	.word	0x58003000
 8003bf8:	20000260 	.word	0x20000260
 8003bfc:	58002800 	.word	0x58002800
 8003c00:	40015c24 	.word	0x40015c24
 8003c04:	40015000 	.word	0x40015000

08003c08 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8003c08:	e7fe      	b.n	8003c08 <_Error_Handler>
 8003c0a:	bf00      	nop

08003c0c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c0c:	4b1f      	ldr	r3, [pc, #124]	; (8003c8c <HAL_MspInit+0x80>)

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c0e:	2003      	movs	r0, #3
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c10:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8003c14:	f042 0202 	orr.w	r2, r2, #2
{
 8003c18:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c1a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
{
 8003c1e:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003c24:	f003 0302 	and.w	r3, r3, #2
 8003c28:	9301      	str	r3, [sp, #4]
 8003c2a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c2c:	f7fc fbb0 	bl	8000390 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003c30:	2200      	movs	r2, #0
 8003c32:	f06f 000b 	mvn.w	r0, #11
 8003c36:	4611      	mov	r1, r2
 8003c38:	f7fc fbbe 	bl	80003b8 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f06f 000a 	mvn.w	r0, #10
 8003c42:	4611      	mov	r1, r2
 8003c44:	f7fc fbb8 	bl	80003b8 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f06f 0009 	mvn.w	r0, #9
 8003c4e:	4611      	mov	r1, r2
 8003c50:	f7fc fbb2 	bl	80003b8 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003c54:	2200      	movs	r2, #0
 8003c56:	f06f 0004 	mvn.w	r0, #4
 8003c5a:	4611      	mov	r1, r2
 8003c5c:	f7fc fbac 	bl	80003b8 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003c60:	2200      	movs	r2, #0
 8003c62:	f06f 0003 	mvn.w	r0, #3
 8003c66:	4611      	mov	r1, r2
 8003c68:	f7fc fba6 	bl	80003b8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f06f 0001 	mvn.w	r0, #1
 8003c72:	4611      	mov	r1, r2
 8003c74:	f7fc fba0 	bl	80003b8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8003c7e:	4611      	mov	r1, r2
 8003c80:	f7fc fb9a 	bl	80003b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c84:	b003      	add	sp, #12
 8003c86:	f85d fb04 	ldr.w	pc, [sp], #4
 8003c8a:	bf00      	nop
 8003c8c:	58024400 	.word	0x58024400

08003c90 <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{

  if(hlptim->Instance==LPTIM3)
 8003c90:	6803      	ldr	r3, [r0, #0]
 8003c92:	4a17      	ldr	r2, [pc, #92]	; (8003cf0 <HAL_LPTIM_MspInit+0x60>)
 8003c94:	4293      	cmp	r3, r2
{
 8003c96:	b510      	push	{r4, lr}
 8003c98:	b082      	sub	sp, #8
  if(hlptim->Instance==LPTIM3)
 8003c9a:	d004      	beq.n	8003ca6 <HAL_LPTIM_MspInit+0x16>
    __HAL_RCC_LPTIM3_CLK_ENABLE();
  /* USER CODE BEGIN LPTIM3_MspInit 1 */

  /* USER CODE END LPTIM3_MspInit 1 */
  }
  else if(hlptim->Instance==LPTIM5)
 8003c9c:	4a15      	ldr	r2, [pc, #84]	; (8003cf4 <HAL_LPTIM_MspInit+0x64>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d010      	beq.n	8003cc4 <HAL_LPTIM_MspInit+0x34>
  /* USER CODE BEGIN LPTIM5_MspInit 1 */

  /* USER CODE END LPTIM5_MspInit 1 */
  }

}
 8003ca2:	b002      	add	sp, #8
 8003ca4:	bd10      	pop	{r4, pc}
    __HAL_RCC_LPTIM3_CLK_ENABLE();
 8003ca6:	4b14      	ldr	r3, [pc, #80]	; (8003cf8 <HAL_LPTIM_MspInit+0x68>)
 8003ca8:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8003cac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cb0:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8003cb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003cb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cbc:	9300      	str	r3, [sp, #0]
 8003cbe:	9b00      	ldr	r3, [sp, #0]
}
 8003cc0:	b002      	add	sp, #8
 8003cc2:	bd10      	pop	{r4, pc}
    __HAL_RCC_LPTIM5_CLK_ENABLE();
 8003cc4:	4b0c      	ldr	r3, [pc, #48]	; (8003cf8 <HAL_LPTIM_MspInit+0x68>)
    HAL_NVIC_SetPriority(LPTIM5_IRQn, 0, 0);
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	208d      	movs	r0, #141	; 0x8d
    __HAL_RCC_LPTIM5_CLK_ENABLE();
 8003cca:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
    HAL_NVIC_SetPriority(LPTIM5_IRQn, 0, 0);
 8003cce:	4611      	mov	r1, r2
    __HAL_RCC_LPTIM5_CLK_ENABLE();
 8003cd0:	f444 5480 	orr.w	r4, r4, #4096	; 0x1000
 8003cd4:	f8c3 40f4 	str.w	r4, [r3, #244]	; 0xf4
 8003cd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003cdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ce0:	9301      	str	r3, [sp, #4]
 8003ce2:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(LPTIM5_IRQn, 0, 0);
 8003ce4:	f7fc fb68 	bl	80003b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM5_IRQn);
 8003ce8:	208d      	movs	r0, #141	; 0x8d
 8003cea:	f7fc fb9f 	bl	800042c <HAL_NVIC_EnableIRQ>
}
 8003cee:	e7d8      	b.n	8003ca2 <HAL_LPTIM_MspInit+0x12>
 8003cf0:	58002800 	.word	0x58002800
 8003cf4:	58003000 	.word	0x58003000
 8003cf8:	58024400 	.word	0x58024400

08003cfc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI5)
 8003cfc:	6802      	ldr	r2, [r0, #0]
 8003cfe:	4b15      	ldr	r3, [pc, #84]	; (8003d54 <HAL_SPI_MspInit+0x58>)
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d000      	beq.n	8003d06 <HAL_SPI_MspInit+0xa>
 8003d04:	4770      	bx	lr
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003d06:	4b14      	ldr	r3, [pc, #80]	; (8003d58 <HAL_SPI_MspInit+0x5c>)
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003d08:	4814      	ldr	r0, [pc, #80]	; (8003d5c <HAL_SPI_MspInit+0x60>)
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003d0a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003d0e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
{
 8003d12:	b5f0      	push	{r4, r5, r6, r7, lr}
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003d14:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
{
 8003d18:	b087      	sub	sp, #28
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003d1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d1e:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003d20:	f44f 7760 	mov.w	r7, #896	; 0x380
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d24:	2602      	movs	r6, #2
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003d26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003d2a:	2505      	movs	r5, #5
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003d2c:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003d2e:	9701      	str	r7, [sp, #4]
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003d30:	9300      	str	r3, [sp, #0]
 8003d32:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d34:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d36:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d38:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003d3a:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003d3c:	f7fc ff3a 	bl	8000bb4 <HAL_GPIO_Init>

    /* SPI5 interrupt Init */
    HAL_NVIC_SetPriority(SPI5_IRQn, 0, 0);
 8003d40:	4622      	mov	r2, r4
 8003d42:	4621      	mov	r1, r4
 8003d44:	2055      	movs	r0, #85	; 0x55
 8003d46:	f7fc fb37 	bl	80003b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
 8003d4a:	2055      	movs	r0, #85	; 0x55
 8003d4c:	f7fc fb6e 	bl	800042c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8003d50:	b007      	add	sp, #28
 8003d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d54:	40015000 	.word	0x40015000
 8003d58:	58024400 	.word	0x58024400
 8003d5c:	58021400 	.word	0x58021400

08003d60 <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
 8003d60:	4b36      	ldr	r3, [pc, #216]	; (8003e3c <HAL_SDRAM_MspInit+0xdc>)
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003d62:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (FMC_Initialized) {
 8003d64:	681c      	ldr	r4, [r3, #0]
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003d66:	b087      	sub	sp, #28
  if (FMC_Initialized) {
 8003d68:	b10c      	cbz	r4, 8003d6e <HAL_SDRAM_MspInit+0xe>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003d6a:	b007      	add	sp, #28
 8003d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_RCC_FMC_CLK_ENABLE();
 8003d6e:	4a34      	ldr	r2, [pc, #208]	; (8003e40 <HAL_SDRAM_MspInit+0xe0>)
  FMC_Initialized = 1;
 8003d70:	2101      	movs	r1, #1
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8003d72:	f64f 003f 	movw	r0, #63551	; 0xf83f
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d76:	2702      	movs	r7, #2
  FMC_Initialized = 1;
 8003d78:	6019      	str	r1, [r3, #0]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d7a:	2603      	movs	r6, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 8003d7c:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003d80:	250c      	movs	r5, #12
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003d82:	a901      	add	r1, sp, #4
  __HAL_RCC_FMC_CLK_ENABLE();
 8003d84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d88:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8003d8c:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8003d90:	9001      	str	r0, [sp, #4]
  __HAL_RCC_FMC_CLK_ENABLE();
 8003d92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003d96:	482b      	ldr	r0, [pc, #172]	; (8003e44 <HAL_SDRAM_MspInit+0xe4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d98:	9403      	str	r4, [sp, #12]
  __HAL_RCC_FMC_CLK_ENABLE();
 8003d9a:	9300      	str	r3, [sp, #0]
 8003d9c:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d9e:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003da0:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003da2:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003da4:	f7fc ff06 	bl	8000bb4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003da8:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003daa:	4827      	ldr	r0, [pc, #156]	; (8003e48 <HAL_SDRAM_MspInit+0xe8>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dac:	9702      	str	r7, [sp, #8]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003dae:	eb0d 0103 	add.w	r1, sp, r3
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003db2:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003db4:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003db6:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db8:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003dba:	f7fc fefb 	bl	8000bb4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003dbe:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dc0:	a901      	add	r1, sp, #4
 8003dc2:	4822      	ldr	r0, [pc, #136]	; (8003e4c <HAL_SDRAM_MspInit+0xec>)
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003dc4:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dc6:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dc8:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003dca:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dcc:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dce:	f7fc fef1 	bl	8000bb4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003dd2:	2310      	movs	r3, #16
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003dd4:	a901      	add	r1, sp, #4
 8003dd6:	481e      	ldr	r0, [pc, #120]	; (8003e50 <HAL_SDRAM_MspInit+0xf0>)
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003dd8:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dda:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ddc:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003dde:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003de0:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003de2:	f7fc fee7 	bl	8000bb4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4 
 8003de6:	f248 1337 	movw	r3, #33079	; 0x8137
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003dea:	a901      	add	r1, sp, #4
 8003dec:	4819      	ldr	r0, [pc, #100]	; (8003e54 <HAL_SDRAM_MspInit+0xf4>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4 
 8003dee:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003df0:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003df2:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003df4:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df6:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003df8:	f7fc fedc 	bl	8000bb4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8003dfc:	f44f 63f0 	mov.w	r3, #1920	; 0x780
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003e00:	a901      	add	r1, sp, #4
 8003e02:	4815      	ldr	r0, [pc, #84]	; (8003e58 <HAL_SDRAM_MspInit+0xf8>)
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8003e04:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e06:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e08:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003e0a:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e0c:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003e0e:	f7fc fed1 	bl	8000bb4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
 8003e12:	f24c 0303 	movw	r3, #49155	; 0xc003
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e16:	a901      	add	r1, sp, #4
 8003e18:	4810      	ldr	r0, [pc, #64]	; (8003e5c <HAL_SDRAM_MspInit+0xfc>)
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
 8003e1a:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e1c:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e1e:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003e20:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e22:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e24:	f7fc fec6 	bl	8000bb4 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(FMC_IRQn, 0, 0);
 8003e28:	4622      	mov	r2, r4
 8003e2a:	4621      	mov	r1, r4
 8003e2c:	2030      	movs	r0, #48	; 0x30
 8003e2e:	f7fc fac3 	bl	80003b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FMC_IRQn);
 8003e32:	2030      	movs	r0, #48	; 0x30
 8003e34:	f7fc fafa 	bl	800042c <HAL_NVIC_EnableIRQ>
}
 8003e38:	b007      	add	sp, #28
 8003e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e3c:	2000002c 	.word	0x2000002c
 8003e40:	58024400 	.word	0x58024400
 8003e44:	58021400 	.word	0x58021400
 8003e48:	58021c00 	.word	0x58021c00
 8003e4c:	58020000 	.word	0x58020000
 8003e50:	58020800 	.word	0x58020800
 8003e54:	58021800 	.word	0x58021800
 8003e58:	58021000 	.word	0x58021000
 8003e5c:	58020c00 	.word	0x58020c00

08003e60 <HAL_SAI_MspInit>:
void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8003e60:	4a73      	ldr	r2, [pc, #460]	; (8004030 <HAL_SAI_MspInit+0x1d0>)
 8003e62:	6803      	ldr	r3, [r0, #0]
 8003e64:	4293      	cmp	r3, r2
{
 8003e66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e6a:	4605      	mov	r5, r0
 8003e6c:	b088      	sub	sp, #32
    if(hsai->Instance==SAI2_Block_A)
 8003e6e:	f000 8081 	beq.w	8003f74 <HAL_SAI_MspInit+0x114>
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);

    }
    if(hsai->Instance==SAI2_Block_B)
 8003e72:	4a70      	ldr	r2, [pc, #448]	; (8004034 <HAL_SAI_MspInit+0x1d4>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d002      	beq.n	8003e7e <HAL_SAI_MspInit+0x1e>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
    }
}
 8003e78:	b008      	add	sp, #32
 8003e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (SAI2_client == 0)
 8003e7e:	4c6e      	ldr	r4, [pc, #440]	; (8004038 <HAL_SAI_MspInit+0x1d8>)
 8003e80:	6822      	ldr	r2, [r4, #0]
 8003e82:	2a00      	cmp	r2, #0
 8003e84:	d060      	beq.n	8003f48 <HAL_SAI_MspInit+0xe8>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e86:	2600      	movs	r6, #0
    SAI2_client ++;
 8003e88:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003e8a:	f04f 0802 	mov.w	r8, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e8e:	2703      	movs	r7, #3
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003e90:	f04f 0a0a 	mov.w	sl, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e94:	a903      	add	r1, sp, #12
 8003e96:	4869      	ldr	r0, [pc, #420]	; (800403c <HAL_SAI_MspInit+0x1dc>)
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003e98:	f44f 5980 	mov.w	r9, #4096	; 0x1000
    SAI2_client ++;
 8003e9c:	6022      	str	r2, [r4, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003e9e:	f8cd 800c 	str.w	r8, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ea2:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003ea6:	f8cd a01c 	str.w	sl, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eaa:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003eac:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eae:	f7fc fe81 	bl	8000bb4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003eb2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003eb6:	a903      	add	r1, sp, #12
 8003eb8:	4861      	ldr	r0, [pc, #388]	; (8004040 <HAL_SAI_MspInit+0x1e0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eba:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003ebe:	f8cd a01c 	str.w	sl, [sp, #28]
    hdma_sai2_b.Init.Request = DMA_REQUEST_SAI2_B;
 8003ec2:	f04f 0a5a 	mov.w	sl, #90	; 0x5a
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003ec6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ec8:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003eca:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003ecc:	f7fc fe72 	bl	8000bb4 <HAL_GPIO_Init>
    GPIO_InitStruct.Alternate = GPIO_AF8_SAI2;
 8003ed0:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ed2:	a903      	add	r1, sp, #12
 8003ed4:	4859      	ldr	r0, [pc, #356]	; (800403c <HAL_SAI_MspInit+0x1dc>)
    hdma_sai2_b.Instance = DMA1_Stream1;
 8003ed6:	4c5b      	ldr	r4, [pc, #364]	; (8004044 <HAL_SAI_MspInit+0x1e4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ed8:	f8cd 8010 	str.w	r8, [sp, #16]
    hdma_sai2_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003edc:	f04f 0840 	mov.w	r8, #64	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_SAI2;
 8003ee0:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ee2:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ee4:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003ee6:	f8cd 900c 	str.w	r9, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eea:	f7fc fe63 	bl	8000bb4 <HAL_GPIO_Init>
    hdma_sai2_b.Instance = DMA1_Stream1;
 8003eee:	4856      	ldr	r0, [pc, #344]	; (8004048 <HAL_SAI_MspInit+0x1e8>)
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8003ef0:	f44f 6c80 	mov.w	ip, #1024	; 0x400
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003ef4:	f44f 4e80 	mov.w	lr, #16384	; 0x4000
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8003ef8:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_HIGH;
 8003efc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003f00:	2304      	movs	r3, #4
    hdma_sai2_b.Instance = DMA1_Stream1;
 8003f02:	6020      	str	r0, [r4, #0]
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8003f04:	4620      	mov	r0, r4
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003f06:	f8c4 9014 	str.w	r9, [r4, #20]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f0a:	60e6      	str	r6, [r4, #12]
    hdma_sai2_b.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003f0c:	62a7      	str	r7, [r4, #40]	; 0x28
    hdma_sai2_b.Init.MemBurst = DMA_MBURST_SINGLE;
 8003f0e:	62e6      	str	r6, [r4, #44]	; 0x2c
    hdma_sai2_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003f10:	6326      	str	r6, [r4, #48]	; 0x30
    hdma_sai2_b.Init.Request = DMA_REQUEST_SAI2_B;
 8003f12:	f8c4 a004 	str.w	sl, [r4, #4]
    hdma_sai2_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f16:	f8c4 8008 	str.w	r8, [r4, #8]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8003f1a:	f8c4 c010 	str.w	ip, [r4, #16]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003f1e:	f8c4 e018 	str.w	lr, [r4, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8003f22:	61e1      	str	r1, [r4, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_HIGH;
 8003f24:	6222      	str	r2, [r4, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003f26:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8003f28:	f7fc fafa 	bl	8000520 <HAL_DMA_Init>
 8003f2c:	b930      	cbnz	r0, 8003f3c <HAL_SAI_MspInit+0xdc>
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 8003f2e:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
 8003f32:	63a5      	str	r5, [r4, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 8003f34:	67ec      	str	r4, [r5, #124]	; 0x7c
}
 8003f36:	b008      	add	sp, #32
 8003f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      _Error_Handler(__FILE__, __LINE__);
 8003f3c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8003f40:	4842      	ldr	r0, [pc, #264]	; (800404c <HAL_SAI_MspInit+0x1ec>)
 8003f42:	f7ff fe61 	bl	8003c08 <_Error_Handler>
 8003f46:	e7f2      	b.n	8003f2e <HAL_SAI_MspInit+0xce>
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003f48:	4b41      	ldr	r3, [pc, #260]	; (8004050 <HAL_SAI_MspInit+0x1f0>)
      HAL_NVIC_SetPriority(SAI2_IRQn, 0, 0);
 8003f4a:	4611      	mov	r1, r2
 8003f4c:	205b      	movs	r0, #91	; 0x5b
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003f4e:	f8d3 60f0 	ldr.w	r6, [r3, #240]	; 0xf0
 8003f52:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
 8003f56:	f8c3 60f0 	str.w	r6, [r3, #240]	; 0xf0
 8003f5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f62:	9302      	str	r3, [sp, #8]
 8003f64:	9b02      	ldr	r3, [sp, #8]
      HAL_NVIC_SetPriority(SAI2_IRQn, 0, 0);
 8003f66:	f7fc fa27 	bl	80003b8 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8003f6a:	205b      	movs	r0, #91	; 0x5b
 8003f6c:	f7fc fa5e 	bl	800042c <HAL_NVIC_EnableIRQ>
 8003f70:	6822      	ldr	r2, [r4, #0]
 8003f72:	e788      	b.n	8003e86 <HAL_SAI_MspInit+0x26>
    if (SAI2_client == 0)
 8003f74:	4c30      	ldr	r4, [pc, #192]	; (8004038 <HAL_SAI_MspInit+0x1d8>)
 8003f76:	6822      	ldr	r2, [r4, #0]
 8003f78:	2a00      	cmp	r2, #0
 8003f7a:	d03c      	beq.n	8003ff6 <HAL_SAI_MspInit+0x196>
    SAI2_client ++;
 8003f7c:	3201      	adds	r2, #1
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f7e:	2600      	movs	r6, #0
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8003f80:	f44f 5c60 	mov.w	ip, #14336	; 0x3800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f84:	f04f 0e02 	mov.w	lr, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f88:	2703      	movs	r7, #3
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003f8a:	230a      	movs	r3, #10
    SAI2_client ++;
 8003f8c:	6022      	str	r2, [r4, #0]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f8e:	a903      	add	r1, sp, #12
    hdma_sai2_a.Instance = DMA1_Stream0;
 8003f90:	4c30      	ldr	r4, [pc, #192]	; (8004054 <HAL_SAI_MspInit+0x1f4>)
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f92:	4831      	ldr	r0, [pc, #196]	; (8004058 <HAL_SAI_MspInit+0x1f8>)
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8003f94:	f8cd c00c 	str.w	ip, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f98:	f8cd e010 	str.w	lr, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f9c:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003f9e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa0:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003fa2:	f7fc fe07 	bl	8000bb4 <HAL_GPIO_Init>
    hdma_sai2_a.Init.Request = DMA_REQUEST_SAI2_A;
 8003fa6:	2059      	movs	r0, #89	; 0x59
    hdma_sai2_a.Instance = DMA1_Stream0;
 8003fa8:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800405c <HAL_SAI_MspInit+0x1fc>
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8003fac:	f44f 6c80 	mov.w	ip, #1024	; 0x400
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003fb0:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
    hdma_sai2_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003fb4:	62a7      	str	r7, [r4, #40]	; 0x28
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8003fb6:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003fba:	f44f 4780 	mov.w	r7, #16384	; 0x4000
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_HIGH;
 8003fbe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003fc2:	2304      	movs	r3, #4
    hdma_sai2_a.Init.Request = DMA_REQUEST_SAI2_A;
 8003fc4:	6060      	str	r0, [r4, #4]
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8003fc6:	4620      	mov	r0, r4
    hdma_sai2_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003fc8:	60a6      	str	r6, [r4, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fca:	60e6      	str	r6, [r4, #12]
    hdma_sai2_a.Init.MemBurst = DMA_MBURST_SINGLE;
 8003fcc:	62e6      	str	r6, [r4, #44]	; 0x2c
    hdma_sai2_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003fce:	6326      	str	r6, [r4, #48]	; 0x30
    hdma_sai2_a.Instance = DMA1_Stream0;
 8003fd0:	f8c4 8000 	str.w	r8, [r4]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8003fd4:	f8c4 c010 	str.w	ip, [r4, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003fd8:	f8c4 e014 	str.w	lr, [r4, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003fdc:	61a7      	str	r7, [r4, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8003fde:	61e1      	str	r1, [r4, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_HIGH;
 8003fe0:	6222      	str	r2, [r4, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003fe2:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8003fe4:	f7fc fa9c 	bl	8000520 <HAL_DMA_Init>
 8003fe8:	b9d8      	cbnz	r0, 8004022 <HAL_SAI_MspInit+0x1c2>
 8003fea:	682b      	ldr	r3, [r5, #0]
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 8003fec:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
 8003ff0:	63a5      	str	r5, [r4, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 8003ff2:	67ec      	str	r4, [r5, #124]	; 0x7c
 8003ff4:	e73d      	b.n	8003e72 <HAL_SAI_MspInit+0x12>
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003ff6:	4b16      	ldr	r3, [pc, #88]	; (8004050 <HAL_SAI_MspInit+0x1f0>)
    HAL_NVIC_SetPriority(SAI2_IRQn, 0, 0);
 8003ff8:	4611      	mov	r1, r2
 8003ffa:	205b      	movs	r0, #91	; 0x5b
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003ffc:	f8d3 60f0 	ldr.w	r6, [r3, #240]	; 0xf0
 8004000:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
 8004004:	f8c3 60f0 	str.w	r6, [r3, #240]	; 0xf0
 8004008:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800400c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004010:	9301      	str	r3, [sp, #4]
 8004012:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(SAI2_IRQn, 0, 0);
 8004014:	f7fc f9d0 	bl	80003b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8004018:	205b      	movs	r0, #91	; 0x5b
 800401a:	f7fc fa07 	bl	800042c <HAL_NVIC_EnableIRQ>
 800401e:	6822      	ldr	r2, [r4, #0]
 8004020:	e7ac      	b.n	8003f7c <HAL_SAI_MspInit+0x11c>
      _Error_Handler(__FILE__, __LINE__);
 8004022:	f240 11c1 	movw	r1, #449	; 0x1c1
 8004026:	4809      	ldr	r0, [pc, #36]	; (800404c <HAL_SAI_MspInit+0x1ec>)
 8004028:	f7ff fdee 	bl	8003c08 <_Error_Handler>
 800402c:	e7dd      	b.n	8003fea <HAL_SAI_MspInit+0x18a>
 800402e:	bf00      	nop
 8004030:	40015c04 	.word	0x40015c04
 8004034:	40015c24 	.word	0x40015c24
 8004038:	20000030 	.word	0x20000030
 800403c:	58020000 	.word	0x58020000
 8004040:	58021000 	.word	0x58021000
 8004044:	200000cc 	.word	0x200000cc
 8004048:	40020028 	.word	0x40020028
 800404c:	08004208 	.word	0x08004208
 8004050:	58024400 	.word	0x58024400
 8004054:	200002d0 	.word	0x200002d0
 8004058:	58020c00 	.word	0x58020c00
 800405c:	40020010 	.word	0x40020010

08004060 <NMI_Handler>:
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop

08004064 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8004064:	e7fe      	b.n	8004064 <HardFault_Handler>
 8004066:	bf00      	nop

08004068 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8004068:	e7fe      	b.n	8004068 <MemManage_Handler>
 800406a:	bf00      	nop

0800406c <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800406c:	e7fe      	b.n	800406c <BusFault_Handler>
 800406e:	bf00      	nop

08004070 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8004070:	e7fe      	b.n	8004070 <UsageFault_Handler>
 8004072:	bf00      	nop

08004074 <SVC_Handler>:
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop

08004078 <DebugMon_Handler>:
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop

0800407c <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop

08004080 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8004080:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004082:	f7fc f961 	bl	8000348 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004086:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800408a:	f7fc ba03 	b.w	8000494 <HAL_SYSTICK_IRQHandler>
 800408e:	bf00      	nop

08004090 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8004090:	4801      	ldr	r0, [pc, #4]	; (8004098 <DMA1_Stream0_IRQHandler+0x8>)
 8004092:	f7fc bc37 	b.w	8000904 <HAL_DMA_IRQHandler>
 8004096:	bf00      	nop
 8004098:	200002d0 	.word	0x200002d0

0800409c <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 800409c:	4801      	ldr	r0, [pc, #4]	; (80040a4 <DMA1_Stream1_IRQHandler+0x8>)
 800409e:	f7fc bc31 	b.w	8000904 <HAL_DMA_IRQHandler>
 80040a2:	bf00      	nop
 80040a4:	200000cc 	.word	0x200000cc

080040a8 <FMC_IRQHandler>:
void FMC_IRQHandler(void)
{
  /* USER CODE BEGIN FMC_IRQn 0 */

  /* USER CODE END FMC_IRQn 0 */
  HAL_SDRAM_IRQHandler(&hsdram1);
 80040a8:	4801      	ldr	r0, [pc, #4]	; (80040b0 <FMC_IRQHandler+0x8>)
 80040aa:	f7fe bfbb 	b.w	8003024 <HAL_SDRAM_IRQHandler>
 80040ae:	bf00      	nop
 80040b0:	200003c0 	.word	0x200003c0

080040b4 <SPI5_IRQHandler>:
void SPI5_IRQHandler(void)
{
  /* USER CODE BEGIN SPI5_IRQn 0 */

  /* USER CODE END SPI5_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi5);
 80040b4:	4801      	ldr	r0, [pc, #4]	; (80040bc <SPI5_IRQHandler+0x8>)
 80040b6:	f7ff b909 	b.w	80032cc <HAL_SPI_IRQHandler>
 80040ba:	bf00      	nop
 80040bc:	20000144 	.word	0x20000144

080040c0 <SAI2_IRQHandler>:

/**
* @brief This function handles SAI2 global interrupt.
*/
void SAI2_IRQHandler(void)
{
 80040c0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SAI2_IRQn 0 */

  /* USER CODE END SAI2_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA2);
 80040c2:	4804      	ldr	r0, [pc, #16]	; (80040d4 <SAI2_IRQHandler+0x14>)
 80040c4:	f7fe feb0 	bl	8002e28 <HAL_SAI_IRQHandler>
  HAL_SAI_IRQHandler(&hsai_BlockB2);
 80040c8:	4803      	ldr	r0, [pc, #12]	; (80040d8 <SAI2_IRQHandler+0x18>)
  /* USER CODE BEGIN SAI2_IRQn 1 */

  /* USER CODE END SAI2_IRQn 1 */
}
 80040ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SAI_IRQHandler(&hsai_BlockB2);
 80040ce:	f7fe beab 	b.w	8002e28 <HAL_SAI_IRQHandler>
 80040d2:	bf00      	nop
 80040d4:	200001cc 	.word	0x200001cc
 80040d8:	20000038 	.word	0x20000038

080040dc <LPTIM5_IRQHandler>:
void LPTIM5_IRQHandler(void)
{
  /* USER CODE BEGIN LPTIM5_IRQn 0 */

  /* USER CODE END LPTIM5_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim5);
 80040dc:	4801      	ldr	r0, [pc, #4]	; (80040e4 <LPTIM5_IRQHandler+0x8>)
 80040de:	f7fc bf13 	b.w	8000f08 <HAL_LPTIM_IRQHandler>
 80040e2:	bf00      	nop
 80040e4:	20000298 	.word	0x20000298

080040e8 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80040e8:	4914      	ldr	r1, [pc, #80]	; (800413c <SystemInit+0x54>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80040ea:	2200      	movs	r2, #0
  RCC->CR |= RCC_CR_HSION;
 80040ec:	4b14      	ldr	r3, [pc, #80]	; (8004140 <SystemInit+0x58>)

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= (uint32_t)0xEAF6ED7F;
 80040ee:	4815      	ldr	r0, [pc, #84]	; (8004144 <SystemInit+0x5c>)
{
 80040f0:	b4f0      	push	{r4, r5, r6, r7}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80040f2:	f8d1 4088 	ldr.w	r4, [r1, #136]	; 0x88

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  *((__IO uint32_t*)0x51008108) = 0x00000001;
 80040f6:	2701      	movs	r7, #1

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal ITCMSRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80040f8:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
  *((__IO uint32_t*)0x51008108) = 0x00000001;
 80040fc:	4e12      	ldr	r6, [pc, #72]	; (8004148 <SystemInit+0x60>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80040fe:	f444 0470 	orr.w	r4, r4, #15728640	; 0xf00000
 8004102:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
  RCC->CR |= RCC_CR_HSION;
 8004106:	681c      	ldr	r4, [r3, #0]
 8004108:	433c      	orrs	r4, r7
 800410a:	601c      	str	r4, [r3, #0]
  RCC->CFGR = 0x00000000;
 800410c:	611a      	str	r2, [r3, #16]
  RCC->CR &= (uint32_t)0xEAF6ED7F;
 800410e:	681c      	ldr	r4, [r3, #0]
 8004110:	4020      	ands	r0, r4
 8004112:	6018      	str	r0, [r3, #0]
  RCC->D1CFGR = 0x00000000;
 8004114:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8004116:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8004118:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x00000000;
 800411a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x00000000;
 800411c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x00000000;
 800411e:	631a      	str	r2, [r3, #48]	; 0x30
  RCC->PLL1FRACR = 0x00000000;
 8004120:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->PLL2DIVR = 0x00000000;
 8004122:	639a      	str	r2, [r3, #56]	; 0x38
  RCC->PLL2FRACR = 0x00000000;
 8004124:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC->PLL3DIVR = 0x00000000;
 8004126:	641a      	str	r2, [r3, #64]	; 0x40
  RCC->PLL3FRACR = 0x00000000;
 8004128:	645a      	str	r2, [r3, #68]	; 0x44
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800412a:	6818      	ldr	r0, [r3, #0]
 800412c:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8004130:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 8004132:	661a      	str	r2, [r3, #96]	; 0x60
  *((__IO uint32_t*)0x51008108) = 0x00000001;
 8004134:	6037      	str	r7, [r6, #0]
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8004136:	608d      	str	r5, [r1, #8]
#endif

}
 8004138:	bcf0      	pop	{r4, r5, r6, r7}
 800413a:	4770      	bx	lr
 800413c:	e000ed00 	.word	0xe000ed00
 8004140:	58024400 	.word	0x58024400
 8004144:	eaf6ed7f 	.word	0xeaf6ed7f
 8004148:	51008108 	.word	0x51008108

0800414c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800414c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004184 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004150:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004152:	e003      	b.n	800415c <LoopCopyDataInit>

08004154 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004154:	4b0c      	ldr	r3, [pc, #48]	; (8004188 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004156:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004158:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800415a:	3104      	adds	r1, #4

0800415c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800415c:	480b      	ldr	r0, [pc, #44]	; (800418c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800415e:	4b0c      	ldr	r3, [pc, #48]	; (8004190 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004160:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004162:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004164:	d3f6      	bcc.n	8004154 <CopyDataInit>
  ldr  r2, =_sbss
 8004166:	4a0b      	ldr	r2, [pc, #44]	; (8004194 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004168:	e002      	b.n	8004170 <LoopFillZerobss>

0800416a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800416a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800416c:	f842 3b04 	str.w	r3, [r2], #4

08004170 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004170:	4b09      	ldr	r3, [pc, #36]	; (8004198 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004172:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004174:	d3f9      	bcc.n	800416a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004176:	f7ff ffb7 	bl	80040e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800417a:	f000 f811 	bl	80041a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800417e:	f7ff fb39 	bl	80037f4 <main>
  bx  lr    
 8004182:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004184:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004188:	0800423c 	.word	0x0800423c
  ldr  r0, =_sdata
 800418c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004190:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8004194:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8004198:	2000046c 	.word	0x2000046c

0800419c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800419c:	e7fe      	b.n	800419c <ADC3_IRQHandler>
	...

080041a0 <__libc_init_array>:
 80041a0:	b570      	push	{r4, r5, r6, lr}
 80041a2:	4e0d      	ldr	r6, [pc, #52]	; (80041d8 <__libc_init_array+0x38>)
 80041a4:	4c0d      	ldr	r4, [pc, #52]	; (80041dc <__libc_init_array+0x3c>)
 80041a6:	1ba4      	subs	r4, r4, r6
 80041a8:	10a4      	asrs	r4, r4, #2
 80041aa:	2500      	movs	r5, #0
 80041ac:	42a5      	cmp	r5, r4
 80041ae:	d109      	bne.n	80041c4 <__libc_init_array+0x24>
 80041b0:	4e0b      	ldr	r6, [pc, #44]	; (80041e0 <__libc_init_array+0x40>)
 80041b2:	4c0c      	ldr	r4, [pc, #48]	; (80041e4 <__libc_init_array+0x44>)
 80041b4:	f000 f818 	bl	80041e8 <_init>
 80041b8:	1ba4      	subs	r4, r4, r6
 80041ba:	10a4      	asrs	r4, r4, #2
 80041bc:	2500      	movs	r5, #0
 80041be:	42a5      	cmp	r5, r4
 80041c0:	d105      	bne.n	80041ce <__libc_init_array+0x2e>
 80041c2:	bd70      	pop	{r4, r5, r6, pc}
 80041c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80041c8:	4798      	blx	r3
 80041ca:	3501      	adds	r5, #1
 80041cc:	e7ee      	b.n	80041ac <__libc_init_array+0xc>
 80041ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80041d2:	4798      	blx	r3
 80041d4:	3501      	adds	r5, #1
 80041d6:	e7f2      	b.n	80041be <__libc_init_array+0x1e>
 80041d8:	08004234 	.word	0x08004234
 80041dc:	08004234 	.word	0x08004234
 80041e0:	08004234 	.word	0x08004234
 80041e4:	08004238 	.word	0x08004238

080041e8 <_init>:
 80041e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ea:	bf00      	nop
 80041ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ee:	bc08      	pop	{r3}
 80041f0:	469e      	mov	lr, r3
 80041f2:	4770      	bx	lr

080041f4 <_fini>:
 80041f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041f6:	bf00      	nop
 80041f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041fa:	bc08      	pop	{r3}
 80041fc:	469e      	mov	lr, r3
 80041fe:	4770      	bx	lr
